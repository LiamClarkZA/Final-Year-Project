
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006370  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08006500  08006500  00016500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000338  20000000  08006860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020338  2**0
                  CONTENTS
  8 .bss          00001964  20000338  20000338  00020338  2**2
                  ALLOC
  9 ._user_heap_stack 00000c00  20001c9c  20001c9c  00020338  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001dda8  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003bc5  00000000  00000000  0003e110  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008de9  00000000  00000000  00041cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  0004aac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  0004b748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000070e5  00000000  00000000  0004c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004a81  00000000  00000000  000536cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005814e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002f5c  00000000  00000000  000581cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000338 	.word	0x20000338
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064e8 	.word	0x080064e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000033c 	.word	0x2000033c
 80001cc:	080064e8 	.word	0x080064e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b97a 	b.w	8000f8c <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	9e08      	ldr	r6, [sp, #32]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d151      	bne.n	8000d64 <__udivmoddi4+0xb4>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	d96d      	bls.n	8000da2 <__udivmoddi4+0xf2>
 8000cc6:	fab2 fe82 	clz	lr, r2
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d00b      	beq.n	8000ce8 <__udivmoddi4+0x38>
 8000cd0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cd4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cd8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cdc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ce0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ce4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cec:	0c25      	lsrs	r5, r4, #16
 8000cee:	fbbc f8fa 	udiv	r8, ip, sl
 8000cf2:	fa1f f987 	uxth.w	r9, r7
 8000cf6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cfa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cfe:	fb08 f309 	mul.w	r3, r8, r9
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x6c>
 8000d06:	19ed      	adds	r5, r5, r7
 8000d08:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d0c:	f080 8123 	bcs.w	8000f56 <__udivmoddi4+0x2a6>
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	f240 8120 	bls.w	8000f56 <__udivmoddi4+0x2a6>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	443d      	add	r5, r7
 8000d1c:	1aed      	subs	r5, r5, r3
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d24:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb00 f909 	mul.w	r9, r0, r9
 8000d30:	45a1      	cmp	r9, r4
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x98>
 8000d34:	19e4      	adds	r4, r4, r7
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	f080 810a 	bcs.w	8000f52 <__udivmoddi4+0x2a2>
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	f240 8107 	bls.w	8000f52 <__udivmoddi4+0x2a2>
 8000d44:	3802      	subs	r0, #2
 8000d46:	443c      	add	r4, r7
 8000d48:	eba4 0409 	sub.w	r4, r4, r9
 8000d4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d50:	2100      	movs	r1, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d061      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	6034      	str	r4, [r6, #0]
 8000d5e:	6073      	str	r3, [r6, #4]
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0xc8>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d054      	beq.n	8000e16 <__udivmoddi4+0x166>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	f040 808e 	bne.w	8000e9e <__udivmoddi4+0x1ee>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xdc>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80fa 	bhi.w	8000f80 <__udivmoddi4+0x2d0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	46ac      	mov	ip, r5
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d03f      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d9a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	b912      	cbnz	r2, 8000daa <__udivmoddi4+0xfa>
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000daa:	fab7 fe87 	clz	lr, r7
 8000dae:	f1be 0f00 	cmp.w	lr, #0
 8000db2:	d134      	bne.n	8000e1e <__udivmoddi4+0x16e>
 8000db4:	1beb      	subs	r3, r5, r7
 8000db6:	0c3a      	lsrs	r2, r7, #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dc2:	0c25      	lsrs	r5, r4, #16
 8000dc4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dc8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dcc:	fb0c f308 	mul.w	r3, ip, r8
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x134>
 8000dd4:	19ed      	adds	r5, r5, r7
 8000dd6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x132>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	f200 80d1 	bhi.w	8000f84 <__udivmoddi4+0x2d4>
 8000de2:	4680      	mov	r8, r0
 8000de4:	1aed      	subs	r5, r5, r3
 8000de6:	b2a3      	uxth	r3, r4
 8000de8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dec:	fb02 5510 	mls	r5, r2, r0, r5
 8000df0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000df4:	fb0c fc00 	mul.w	ip, ip, r0
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x15c>
 8000dfc:	19e4      	adds	r4, r4, r7
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x15a>
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	f200 80b8 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	eba4 040c 	sub.w	r4, r4, ip
 8000e10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e14:	e79d      	b.n	8000d52 <__udivmoddi4+0xa2>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1ce 0420 	rsb	r4, lr, #32
 8000e22:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e2a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e2e:	0c3a      	lsrs	r2, r7, #16
 8000e30:	fa25 f404 	lsr.w	r4, r5, r4
 8000e34:	ea48 0803 	orr.w	r8, r8, r3
 8000e38:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e3c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e40:	fb02 4411 	mls	r4, r2, r1, r4
 8000e44:	fa1f fc87 	uxth.w	ip, r7
 8000e48:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e4c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e56:	d909      	bls.n	8000e6c <__udivmoddi4+0x1bc>
 8000e58:	19ed      	adds	r5, r5, r7
 8000e5a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e5e:	f080 808a 	bcs.w	8000f76 <__udivmoddi4+0x2c6>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	f240 8087 	bls.w	8000f76 <__udivmoddi4+0x2c6>
 8000e68:	3902      	subs	r1, #2
 8000e6a:	443d      	add	r5, r7
 8000e6c:	1aeb      	subs	r3, r5, r3
 8000e6e:	fa1f f588 	uxth.w	r5, r8
 8000e72:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e76:	fb02 3310 	mls	r3, r2, r0, r3
 8000e7a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e7e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x1e6>
 8000e86:	19ed      	adds	r5, r5, r7
 8000e88:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8c:	d26f      	bcs.n	8000f6e <__udivmoddi4+0x2be>
 8000e8e:	42ab      	cmp	r3, r5
 8000e90:	d96d      	bls.n	8000f6e <__udivmoddi4+0x2be>
 8000e92:	3802      	subs	r0, #2
 8000e94:	443d      	add	r5, r7
 8000e96:	1aeb      	subs	r3, r5, r3
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	e78f      	b.n	8000dbe <__udivmoddi4+0x10e>
 8000e9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ea2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ea6:	408b      	lsls	r3, r1
 8000ea8:	fa05 f401 	lsl.w	r4, r5, r1
 8000eac:	ea48 0303 	orr.w	r3, r8, r3
 8000eb0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ebe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ec2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ec6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eca:	fa1f f883 	uxth.w	r8, r3
 8000ece:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ed2:	fb09 f408 	mul.w	r4, r9, r8
 8000ed6:	42ac      	cmp	r4, r5
 8000ed8:	fa02 f201 	lsl.w	r2, r2, r1
 8000edc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x244>
 8000ee2:	18ed      	adds	r5, r5, r3
 8000ee4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee8:	d243      	bcs.n	8000f72 <__udivmoddi4+0x2c2>
 8000eea:	42ac      	cmp	r4, r5
 8000eec:	d941      	bls.n	8000f72 <__udivmoddi4+0x2c2>
 8000eee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef2:	441d      	add	r5, r3
 8000ef4:	1b2d      	subs	r5, r5, r4
 8000ef6:	fa1f fe8e 	uxth.w	lr, lr
 8000efa:	fbb5 f0fc 	udiv	r0, r5, ip
 8000efe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f02:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f06:	fb00 f808 	mul.w	r8, r0, r8
 8000f0a:	45a0      	cmp	r8, r4
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x26e>
 8000f0e:	18e4      	adds	r4, r4, r3
 8000f10:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f14:	d229      	bcs.n	8000f6a <__udivmoddi4+0x2ba>
 8000f16:	45a0      	cmp	r8, r4
 8000f18:	d927      	bls.n	8000f6a <__udivmoddi4+0x2ba>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	441c      	add	r4, r3
 8000f1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f22:	eba4 0408 	sub.w	r4, r4, r8
 8000f26:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2a:	454c      	cmp	r4, r9
 8000f2c:	46c6      	mov	lr, r8
 8000f2e:	464d      	mov	r5, r9
 8000f30:	d315      	bcc.n	8000f5e <__udivmoddi4+0x2ae>
 8000f32:	d012      	beq.n	8000f5a <__udivmoddi4+0x2aa>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x29c>
 8000f36:	ebba 030e 	subs.w	r3, sl, lr
 8000f3a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40cb      	lsrs	r3, r1
 8000f44:	431f      	orrs	r7, r3
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	6037      	str	r7, [r6, #0]
 8000f4a:	6074      	str	r4, [r6, #4]
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	4618      	mov	r0, r3
 8000f54:	e6f8      	b.n	8000d48 <__udivmoddi4+0x98>
 8000f56:	4690      	mov	r8, r2
 8000f58:	e6e0      	b.n	8000d1c <__udivmoddi4+0x6c>
 8000f5a:	45c2      	cmp	sl, r8
 8000f5c:	d2ea      	bcs.n	8000f34 <__udivmoddi4+0x284>
 8000f5e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f62:	eb69 0503 	sbc.w	r5, r9, r3
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7e4      	b.n	8000f34 <__udivmoddi4+0x284>
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	e7d7      	b.n	8000f1e <__udivmoddi4+0x26e>
 8000f6e:	4640      	mov	r0, r8
 8000f70:	e791      	b.n	8000e96 <__udivmoddi4+0x1e6>
 8000f72:	4681      	mov	r9, r0
 8000f74:	e7be      	b.n	8000ef4 <__udivmoddi4+0x244>
 8000f76:	4601      	mov	r1, r0
 8000f78:	e778      	b.n	8000e6c <__udivmoddi4+0x1bc>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	443c      	add	r4, r7
 8000f7e:	e745      	b.n	8000e0c <__udivmoddi4+0x15c>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xe6>
 8000f84:	f1a8 0802 	sub.w	r8, r8, #2
 8000f88:	443d      	add	r5, r7
 8000f8a:	e72b      	b.n	8000de4 <__udivmoddi4+0x134>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_InitTick+0x3c>)
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_InitTick+0x40>)
{
 8000f96:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	7818      	ldrb	r0, [r3, #0]
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fa2:	6810      	ldr	r0, [r2, #0]
 8000fa4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fa8:	f000 f8a8 	bl	80010fc <HAL_SYSTICK_Config>
 8000fac:	4604      	mov	r4, r0
 8000fae:	b958      	cbnz	r0, 8000fc8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb0:	2d0f      	cmp	r5, #15
 8000fb2:	d809      	bhi.n	8000fc8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f85e 	bl	800107c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HAL_InitTick+0x44>)
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	601d      	str	r5, [r3, #0]
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fc8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
 8000fcc:	20000120 	.word	0x20000120
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_Init>:
{
 8000fd8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_Init+0x30>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fe2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ff2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f82f 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff ffc8 	bl	8000f90 <HAL_InitTick>
  HAL_MspInit();
 8001000:	f002 fc8c 	bl	800391c <HAL_MspInit>
}
 8001004:	2000      	movs	r0, #0
 8001006:	bd08      	pop	{r3, pc}
 8001008:	40023c00 	.word	0x40023c00

0800100c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x10>)
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_IncTick+0x14>)
 8001010:	6811      	ldr	r1, [r2, #0]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	440b      	add	r3, r1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000364 	.word	0x20000364
 8001020:	20000000 	.word	0x20000000

08001024 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001024:	4b01      	ldr	r3, [pc, #4]	; (800102c <HAL_GetTick+0x8>)
 8001026:	6818      	ldr	r0, [r3, #0]
}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000364 	.word	0x20000364

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff fff6 	bl	8001024 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001038:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	bf1c      	itt	ne
 800103c:	4b05      	ldrne	r3, [pc, #20]	; (8001054 <HAL_Delay+0x24>)
 800103e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001040:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001042:	bf18      	it	ne
 8001044:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001046:	f7ff ffed 	bl	8001024 <HAL_GetTick>
 800104a:	1b40      	subs	r0, r0, r5
 800104c:	4284      	cmp	r4, r0
 800104e:	d8fa      	bhi.n	8001046 <HAL_Delay+0x16>
  {
  }
}
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	20000000 	.word	0x20000000

08001058 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800105a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	0c1b      	lsrs	r3, r3, #16
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001068:	0200      	lsls	r0, r0, #8
 800106a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001072:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001074:	60d3      	str	r3, [r2, #12]
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b530      	push	{r4, r5, lr}
 8001080:	68dc      	ldr	r4, [r3, #12]
 8001082:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001086:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	2b04      	cmp	r3, #4
 800108e:	bf28      	it	cs
 8001090:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 0501 	mov.w	r5, #1
 8001098:	fa05 f303 	lsl.w	r3, r5, r3
 800109c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a0:	bf8c      	ite	hi
 80010a2:	3c03      	subhi	r4, #3
 80010a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a6:	4019      	ands	r1, r3
 80010a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010aa:	fa05 f404 	lsl.w	r4, r5, r4
 80010ae:	3c01      	subs	r4, #1
 80010b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80010b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	ea42 0201 	orr.w	r2, r2, r1
 80010b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	bfaf      	iteee	ge
 80010be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	f000 000f 	andlt.w	r0, r0, #15
 80010c6:	4b06      	ldrlt	r3, [pc, #24]	; (80010e0 <HAL_NVIC_SetPriority+0x64>)
 80010c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	bfa5      	ittet	ge
 80010cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80010d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010d8:	bd30      	pop	{r4, r5, pc}
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	e000ed14 	.word	0xe000ed14

080010e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80010e4:	0942      	lsrs	r2, r0, #5
 80010e6:	2301      	movs	r3, #1
 80010e8:	f000 001f 	and.w	r0, r0, #31
 80010ec:	fa03 f000 	lsl.w	r0, r3, r0
 80010f0:	4b01      	ldr	r3, [pc, #4]	; (80010f8 <HAL_NVIC_EnableIRQ+0x14>)
 80010f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100

080010fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	3801      	subs	r0, #1
 80010fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001102:	d20a      	bcs.n	800111a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001108:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	21f0      	movs	r1, #240	; 0xf0
 800110c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800112a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800112c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800112e:	bf0c      	ite	eq
 8001130:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001134:	f022 0204 	bicne.w	r2, r2, #4
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	4770      	bx	lr
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001140:	4770      	bx	lr

08001142 <HAL_SYSTICK_IRQHandler>:
{
 8001142:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001144:	f7ff fffc 	bl	8001140 <HAL_SYSTICK_Callback>
 8001148:	bd08      	pop	{r3, pc}
	...

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001150:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001152:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001304 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001158:	4a68      	ldr	r2, [pc, #416]	; (80012fc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001308 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001160:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001162:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001168:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001170:	45b6      	cmp	lr, r6
 8001172:	f040 80ae 	bne.w	80012d2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001176:	684c      	ldr	r4, [r1, #4]
 8001178:	f024 0710 	bic.w	r7, r4, #16
 800117c:	2f02      	cmp	r7, #2
 800117e:	d116      	bne.n	80011ae <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001180:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001184:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001188:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800118c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001190:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001194:	f04f 0c0f 	mov.w	ip, #15
 8001198:	fa0c fc0b 	lsl.w	ip, ip, fp
 800119c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a0:	690d      	ldr	r5, [r1, #16]
 80011a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80011a6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80011aa:	f8ca 5020 	str.w	r5, [sl, #32]
 80011ae:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80011b4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b8:	fa05 f50a 	lsl.w	r5, r5, sl
 80011bc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011be:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ca:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011cc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80011d2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d6:	d811      	bhi.n	80011fc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80011d8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011da:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011de:	68cf      	ldr	r7, [r1, #12]
 80011e0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80011e4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80011e8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80011ea:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011f0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80011f4:	409f      	lsls	r7, r3
 80011f6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80011fa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80011fc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001200:	688f      	ldr	r7, [r1, #8]
 8001202:	fa07 f70a 	lsl.w	r7, r7, sl
 8001206:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001208:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800120a:	00e5      	lsls	r5, r4, #3
 800120c:	d561      	bpl.n	80012d2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	f04f 0b00 	mov.w	fp, #0
 8001212:	f8cd b00c 	str.w	fp, [sp, #12]
 8001216:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121a:	4d39      	ldr	r5, [pc, #228]	; (8001300 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001220:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001224:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001228:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800122c:	9703      	str	r7, [sp, #12]
 800122e:	9f03      	ldr	r7, [sp, #12]
 8001230:	f023 0703 	bic.w	r7, r3, #3
 8001234:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001238:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800123c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001240:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001244:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001248:	f04f 0e0f 	mov.w	lr, #15
 800124c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001250:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001252:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001256:	d043      	beq.n	80012e0 <HAL_GPIO_Init+0x194>
 8001258:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800125c:	42a8      	cmp	r0, r5
 800125e:	d041      	beq.n	80012e4 <HAL_GPIO_Init+0x198>
 8001260:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001264:	42a8      	cmp	r0, r5
 8001266:	d03f      	beq.n	80012e8 <HAL_GPIO_Init+0x19c>
 8001268:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800126c:	42a8      	cmp	r0, r5
 800126e:	d03d      	beq.n	80012ec <HAL_GPIO_Init+0x1a0>
 8001270:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001274:	42a8      	cmp	r0, r5
 8001276:	d03b      	beq.n	80012f0 <HAL_GPIO_Init+0x1a4>
 8001278:	4548      	cmp	r0, r9
 800127a:	d03b      	beq.n	80012f4 <HAL_GPIO_Init+0x1a8>
 800127c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001280:	42a8      	cmp	r0, r5
 8001282:	d039      	beq.n	80012f8 <HAL_GPIO_Init+0x1ac>
 8001284:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001288:	42a8      	cmp	r0, r5
 800128a:	bf14      	ite	ne
 800128c:	2508      	movne	r5, #8
 800128e:	2507      	moveq	r5, #7
 8001290:	fa05 f50c 	lsl.w	r5, r5, ip
 8001294:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800129a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800129c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80012a2:	bf0c      	ite	eq
 80012a4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80012a6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80012a8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80012aa:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ac:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80012b0:	bf0c      	ite	eq
 80012b2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80012b4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80012b6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ba:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80012be:	bf0c      	ite	eq
 80012c0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80012c2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80012c4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80012c6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80012ca:	bf54      	ite	pl
 80012cc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80012ce:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80012d0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d2:	3301      	adds	r3, #1
 80012d4:	2b10      	cmp	r3, #16
 80012d6:	f47f af44 	bne.w	8001162 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80012da:	b005      	add	sp, #20
 80012dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e0:	465d      	mov	r5, fp
 80012e2:	e7d5      	b.n	8001290 <HAL_GPIO_Init+0x144>
 80012e4:	2501      	movs	r5, #1
 80012e6:	e7d3      	b.n	8001290 <HAL_GPIO_Init+0x144>
 80012e8:	2502      	movs	r5, #2
 80012ea:	e7d1      	b.n	8001290 <HAL_GPIO_Init+0x144>
 80012ec:	2503      	movs	r5, #3
 80012ee:	e7cf      	b.n	8001290 <HAL_GPIO_Init+0x144>
 80012f0:	2504      	movs	r5, #4
 80012f2:	e7cd      	b.n	8001290 <HAL_GPIO_Init+0x144>
 80012f4:	2505      	movs	r5, #5
 80012f6:	e7cb      	b.n	8001290 <HAL_GPIO_Init+0x144>
 80012f8:	2506      	movs	r5, #6
 80012fa:	e7c9      	b.n	8001290 <HAL_GPIO_Init+0x144>
 80012fc:	40013c00 	.word	0x40013c00
 8001300:	40020000 	.word	0x40020000
 8001304:	40023800 	.word	0x40023800
 8001308:	40021400 	.word	0x40021400

0800130c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800130c:	b10a      	cbz	r2, 8001312 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130e:	6181      	str	r1, [r0, #24]
 8001310:	4770      	bx	lr
 8001312:	0409      	lsls	r1, r1, #16
 8001314:	e7fb      	b.n	800130e <HAL_GPIO_WritePin+0x2>

08001316 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001316:	6943      	ldr	r3, [r0, #20]
 8001318:	4059      	eors	r1, r3
 800131a:	6141      	str	r1, [r0, #20]
 800131c:	4770      	bx	lr

0800131e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 800131e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001320:	4606      	mov	r6, r0
{ 
 8001322:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8001324:	2800      	cmp	r0, #0
 8001326:	d064      	beq.n	80013f2 <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001328:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 800132a:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 800132c:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8001330:	f002 fc1a 	bl	8003b68 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8001334:	f854 0b10 	ldr.w	r0, [r4], #16
 8001338:	f001 f828 	bl	800238c <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800133c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133e:	466d      	mov	r5, sp
 8001340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001346:	e894 0003 	ldmia.w	r4, {r0, r1}
 800134a:	e885 0003 	stmia.w	r5, {r0, r1}
 800134e:	1d37      	adds	r7, r6, #4
 8001350:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001354:	6830      	ldr	r0, [r6, #0]
 8001356:	f000 ffd9 	bl	800230c <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800135a:	2100      	movs	r1, #0
 800135c:	6830      	ldr	r0, [r6, #0]
 800135e:	f001 f81b 	bl	8002398 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8001362:	2100      	movs	r1, #0
 8001364:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001366:	4632      	mov	r2, r6
 8001368:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 800136c:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800136e:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8001370:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001374:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 8001376:	3101      	adds	r1, #1
 8001378:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 800137a:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800137e:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 8001382:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 8001384:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 8001386:	64d0      	str	r0, [r2, #76]	; 0x4c
 8001388:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 800138c:	d1f0      	bne.n	8001370 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 800138e:	2200      	movs	r2, #0
 8001390:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 8001394:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001396:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 800139a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 800139e:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 80013a0:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 80013a4:	3201      	adds	r2, #1
 80013a6:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 80013a8:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013ac:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 80013b0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 80013b4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 80013b8:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 80013bc:	6041      	str	r1, [r0, #4]
 80013be:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 80013c2:	d1e8      	bne.n	8001396 <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80013c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c6:	466d      	mov	r5, sp
 80013c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80013d6:	4670      	mov	r0, lr
 80013d8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80013dc:	f000 fff4 	bl	80023c8 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 80013e0:	2301      	movs	r3, #1
 80013e2:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 80013e6:	6830      	ldr	r0, [r6, #0]
 80013e8:	f001 fb11 	bl	8002a0e <USB_DevDisconnect>
 return HAL_OK;
 80013ec:	2000      	movs	r0, #0
}
 80013ee:	b00b      	add	sp, #44	; 0x2c
 80013f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80013f2:	2001      	movs	r0, #1
 80013f4:	e7fb      	b.n	80013ee <HAL_PCD_Init+0xd0>

080013f6 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80013f6:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80013fa:	2b01      	cmp	r3, #1
{ 
 80013fc:	b510      	push	{r4, lr}
 80013fe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001400:	d00c      	beq.n	800141c <HAL_PCD_Start+0x26>
 8001402:	2301      	movs	r3, #1
 8001404:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8001408:	6800      	ldr	r0, [r0, #0]
 800140a:	f001 faf4 	bl	80029f6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800140e:	6820      	ldr	r0, [r4, #0]
 8001410:	f000 ffb6 	bl	8002380 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8001414:	2000      	movs	r0, #0
 8001416:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800141a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800141c:	2002      	movs	r0, #2
}
 800141e:	bd10      	pop	{r4, pc}

08001420 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001424:	f8d0 9000 	ldr.w	r9, [r0]
{
 8001428:	b087      	sub	sp, #28
 800142a:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800142c:	4648      	mov	r0, r9
 800142e:	f001 fb28 	bl	8002a82 <USB_GetMode>
 8001432:	9002      	str	r0, [sp, #8]
 8001434:	2800      	cmp	r0, #0
 8001436:	f040 812e 	bne.w	8001696 <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 800143a:	6820      	ldr	r0, [r4, #0]
 800143c:	f001 faf3 	bl	8002a26 <USB_ReadInterrupts>
 8001440:	2800      	cmp	r0, #0
 8001442:	f000 8128 	beq.w	8001696 <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001446:	6820      	ldr	r0, [r4, #0]
 8001448:	f001 faed 	bl	8002a26 <USB_ReadInterrupts>
 800144c:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800144e:	bf48      	it	mi
 8001450:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001452:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001454:	bf42      	ittt	mi
 8001456:	6953      	ldrmi	r3, [r2, #20]
 8001458:	f003 0302 	andmi.w	r3, r3, #2
 800145c:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800145e:	f001 fae2 	bl	8002a26 <USB_ReadInterrupts>
 8001462:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8001466:	d00a      	beq.n	800147e <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001468:	6820      	ldr	r0, [r4, #0]
 800146a:	f001 fae0 	bl	8002a2e <USB_ReadDevAllOutEpInterrupt>
 800146e:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 8001472:	4607      	mov	r7, r0
 8001474:	46a2      	mov	sl, r4
      epnum = 0U;
 8001476:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8001478:	2f00      	cmp	r7, #0
 800147a:	f040 810f 	bne.w	800169c <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800147e:	6820      	ldr	r0, [r4, #0]
 8001480:	f001 fad1 	bl	8002a26 <USB_ReadInterrupts>
 8001484:	0341      	lsls	r1, r0, #13
 8001486:	d50b      	bpl.n	80014a0 <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001488:	6820      	ldr	r0, [r4, #0]
 800148a:	f001 fad8 	bl	8002a3e <USB_ReadDevAllInEpInterrupt>
 800148e:	4626      	mov	r6, r4
 8001490:	9003      	str	r0, [sp, #12]
 8001492:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 8001496:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8001498:	9b03      	ldr	r3, [sp, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 813f 	bne.w	800171e <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014a0:	6820      	ldr	r0, [r4, #0]
 80014a2:	f001 fac0 	bl	8002a26 <USB_ReadInterrupts>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	da0d      	bge.n	80014c6 <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014aa:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 80014ae:	f023 0301 	bic.w	r3, r3, #1
 80014b2:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 80014b6:	4620      	mov	r0, r4
 80014b8:	f002 fbd4 	bl	8003c64 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80014bc:	6822      	ldr	r2, [r4, #0]
 80014be:	6953      	ldr	r3, [r2, #20]
 80014c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014c4:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80014c6:	6820      	ldr	r0, [r4, #0]
 80014c8:	f001 faad 	bl	8002a26 <USB_ReadInterrupts>
 80014cc:	0506      	lsls	r6, r0, #20
 80014ce:	d50b      	bpl.n	80014e8 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80014d0:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 80014d4:	07d8      	lsls	r0, r3, #31
 80014d6:	d502      	bpl.n	80014de <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80014d8:	4620      	mov	r0, r4
 80014da:	f002 fbab 	bl	8003c34 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80014de:	6822      	ldr	r2, [r4, #0]
 80014e0:	6953      	ldr	r3, [r2, #20]
 80014e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e6:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80014e8:	6820      	ldr	r0, [r4, #0]
 80014ea:	f001 fa9c 	bl	8002a26 <USB_ReadInterrupts>
 80014ee:	04c1      	lsls	r1, r0, #19
 80014f0:	d537      	bpl.n	8001562 <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80014f2:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 80014f6:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 80014f8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001500:	2110      	movs	r1, #16
 8001502:	f000 fffd 	bl	8002500 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001506:	6861      	ldr	r1, [r4, #4]
 8001508:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 800150c:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150e:	9802      	ldr	r0, [sp, #8]
 8001510:	4288      	cmp	r0, r1
 8001512:	f040 8192 	bne.w	800183a <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800151c:	69f3      	ldr	r3, [r6, #28]
 800151e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001522:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8001524:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 818f 	beq.w	800184a <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 800152c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8001530:	f043 030b 	orr.w	r3, r3, #11
 8001534:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8001538:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800153a:	f043 030b 	orr.w	r3, r3, #11
 800153e:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001540:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001544:	7c21      	ldrb	r1, [r4, #16]
 8001546:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001548:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800154c:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001550:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001554:	f001 fab4 	bl	8002ac0 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001558:	6822      	ldr	r2, [r4, #0]
 800155a:	6953      	ldr	r3, [r2, #20]
 800155c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001560:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001562:	6820      	ldr	r0, [r4, #0]
 8001564:	f001 fa5f 	bl	8002a26 <USB_ReadInterrupts>
 8001568:	0482      	lsls	r2, r0, #18
 800156a:	d51d      	bpl.n	80015a8 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 800156c:	6820      	ldr	r0, [r4, #0]
 800156e:	f001 fa8c 	bl	8002a8a <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001572:	6820      	ldr	r0, [r4, #0]
 8001574:	68c3      	ldr	r3, [r0, #12]
 8001576:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800157a:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800157c:	f000 ffe9 	bl	8002552 <USB_GetDevSpeed>
 8001580:	2800      	cmp	r0, #0
 8001582:	f040 816b 	bne.w	800185c <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001586:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8001588:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 800158a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800158e:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001590:	68d3      	ldr	r3, [r2, #12]
 8001592:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8001596:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8001598:	4620      	mov	r0, r4
 800159a:	f002 fb3a 	bl	8003c12 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800159e:	6822      	ldr	r2, [r4, #0]
 80015a0:	6953      	ldr	r3, [r2, #20]
 80015a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a6:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015a8:	6820      	ldr	r0, [r4, #0]
 80015aa:	f001 fa3c 	bl	8002a26 <USB_ReadInterrupts>
 80015ae:	06c3      	lsls	r3, r0, #27
 80015b0:	d52b      	bpl.n	800160a <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015b2:	6822      	ldr	r2, [r4, #0]
 80015b4:	6993      	ldr	r3, [r2, #24]
 80015b6:	f023 0310 	bic.w	r3, r3, #16
 80015ba:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 80015bc:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 80015c0:	f3c6 4343 	ubfx	r3, r6, #17, #4
 80015c4:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80015c6:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 80015ca:	f040 81a8 	bne.w	800191e <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80015d2:	421e      	tst	r6, r3
 80015d4:	d014      	beq.n	8001600 <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 80015d6:	271c      	movs	r7, #28
 80015d8:	fb07 4708 	mla	r7, r7, r8, r4
 80015dc:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80015e0:	4632      	mov	r2, r6
 80015e2:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 80015e6:	4648      	mov	r0, r9
 80015e8:	f001 f9af 	bl	800294a <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80015ec:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80015f0:	4433      	add	r3, r6
 80015f2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80015f6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80015fa:	441e      	add	r6, r3
 80015fc:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001600:	6822      	ldr	r2, [r4, #0]
 8001602:	6993      	ldr	r3, [r2, #24]
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800160a:	6820      	ldr	r0, [r4, #0]
 800160c:	f001 fa0b 	bl	8002a26 <USB_ReadInterrupts>
 8001610:	0707      	lsls	r7, r0, #28
 8001612:	d507      	bpl.n	8001624 <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 8001614:	4620      	mov	r0, r4
 8001616:	f002 faf8 	bl	8003c0a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800161a:	6822      	ldr	r2, [r4, #0]
 800161c:	6953      	ldr	r3, [r2, #20]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001624:	6820      	ldr	r0, [r4, #0]
 8001626:	f001 f9fe 	bl	8002a26 <USB_ReadInterrupts>
 800162a:	02c6      	lsls	r6, r0, #11
 800162c:	d508      	bpl.n	8001640 <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 800162e:	b2e9      	uxtb	r1, r5
 8001630:	4620      	mov	r0, r4
 8001632:	f002 fb1f 	bl	8003c74 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001636:	6822      	ldr	r2, [r4, #0]
 8001638:	6953      	ldr	r3, [r2, #20]
 800163a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163e:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001640:	6820      	ldr	r0, [r4, #0]
 8001642:	f001 f9f0 	bl	8002a26 <USB_ReadInterrupts>
 8001646:	0280      	lsls	r0, r0, #10
 8001648:	d508      	bpl.n	800165c <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 800164a:	b2e9      	uxtb	r1, r5
 800164c:	4620      	mov	r0, r4
 800164e:	f002 fb0d 	bl	8003c6c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001652:	6822      	ldr	r2, [r4, #0]
 8001654:	6953      	ldr	r3, [r2, #20]
 8001656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165a:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800165c:	6820      	ldr	r0, [r4, #0]
 800165e:	f001 f9e2 	bl	8002a26 <USB_ReadInterrupts>
 8001662:	0041      	lsls	r1, r0, #1
 8001664:	d507      	bpl.n	8001676 <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8001666:	4620      	mov	r0, r4
 8001668:	f002 fb08 	bl	8003c7c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800166c:	6822      	ldr	r2, [r4, #0]
 800166e:	6953      	ldr	r3, [r2, #20]
 8001670:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001674:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001676:	6820      	ldr	r0, [r4, #0]
 8001678:	f001 f9d5 	bl	8002a26 <USB_ReadInterrupts>
 800167c:	0742      	lsls	r2, r0, #29
 800167e:	d50a      	bpl.n	8001696 <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001684:	076b      	lsls	r3, r5, #29
 8001686:	d502      	bpl.n	800168e <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8001688:	4620      	mov	r0, r4
 800168a:	f002 fafb 	bl	8003c84 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4315      	orrs	r5, r2
 8001694:	605d      	str	r5, [r3, #4]
    }
  }
}
 8001696:	b007      	add	sp, #28
 8001698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 800169c:	07f8      	lsls	r0, r7, #31
 800169e:	d538      	bpl.n	8001712 <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80016a0:	fa5f fb85 	uxtb.w	fp, r5
 80016a4:	4659      	mov	r1, fp
 80016a6:	6820      	ldr	r0, [r4, #0]
 80016a8:	f001 f9d1 	bl	8002a4e <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016ac:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80016b0:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016b2:	d021      	beq.n	80016f8 <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 80016b4:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016b6:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 80016b8:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016ba:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 80016bc:	d10c      	bne.n	80016d8 <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 80016be:	6931      	ldr	r1, [r6, #16]
 80016c0:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 80016c4:	f3c1 0112 	ubfx	r1, r1, #0, #19
 80016c8:	1a41      	subs	r1, r0, r1
 80016ca:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 80016ce:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 80016d2:	4408      	add	r0, r1
 80016d4:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80016d8:	4659      	mov	r1, fp
 80016da:	4620      	mov	r0, r4
 80016dc:	f002 fa84 	bl	8003be8 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 80016e0:	6921      	ldr	r1, [r4, #16]
 80016e2:	2901      	cmp	r1, #1
 80016e4:	d108      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80016e6:	b93d      	cbnz	r5, 80016f8 <HAL_PCD_IRQHandler+0x2d8>
 80016e8:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80016ec:	b922      	cbnz	r2, 80016f8 <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016ee:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80016f2:	6820      	ldr	r0, [r4, #0]
 80016f4:	f001 f9e4 	bl	8002ac0 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016f8:	f018 0f08 	tst.w	r8, #8
 80016fc:	d004      	beq.n	8001708 <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 80016fe:	4620      	mov	r0, r4
 8001700:	f002 fa6c 	bl	8003bdc <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001704:	2308      	movs	r3, #8
 8001706:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001708:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800170c:	bf1c      	itt	ne
 800170e:	2310      	movne	r3, #16
 8001710:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8001712:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8001714:	087f      	lsrs	r7, r7, #1
 8001716:	3620      	adds	r6, #32
 8001718:	f10a 0a1c 	add.w	sl, sl, #28
 800171c:	e6ac      	b.n	8001478 <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 800171e:	9b03      	ldr	r3, [sp, #12]
 8001720:	07da      	lsls	r2, r3, #31
 8001722:	d558      	bpl.n	80017d6 <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001724:	fa5f fb85 	uxtb.w	fp, r5
 8001728:	4659      	mov	r1, fp
 800172a:	6820      	ldr	r0, [r4, #0]
 800172c:	f001 f999 	bl	8002a62 <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001730:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001732:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001734:	d520      	bpl.n	8001778 <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001736:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 800173a:	2101      	movs	r1, #1
 800173c:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800173e:	ea23 0301 	bic.w	r3, r3, r1
 8001742:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001746:	2301      	movs	r3, #1
 8001748:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 800174c:	6923      	ldr	r3, [r4, #16]
 800174e:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001750:	bf01      	itttt	eq
 8001752:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8001754:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8001756:	189b      	addeq	r3, r3, r2
 8001758:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800175a:	4659      	mov	r1, fp
 800175c:	4620      	mov	r0, r4
 800175e:	f002 fa4c 	bl	8003bfa <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8001762:	6921      	ldr	r1, [r4, #16]
 8001764:	2901      	cmp	r1, #1
 8001766:	d107      	bne.n	8001778 <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001768:	b935      	cbnz	r5, 8001778 <HAL_PCD_IRQHandler+0x358>
 800176a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800176c:	b923      	cbnz	r3, 8001778 <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800176e:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001772:	6820      	ldr	r0, [r4, #0]
 8001774:	f001 f9a4 	bl	8002ac0 <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001778:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800177a:	bf44      	itt	mi
 800177c:	2308      	movmi	r3, #8
 800177e:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001782:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001784:	bf44      	itt	mi
 8001786:	2310      	movmi	r3, #16
 8001788:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800178c:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800178e:	bf44      	itt	mi
 8001790:	2340      	movmi	r3, #64	; 0x40
 8001792:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001796:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001798:	bf44      	itt	mi
 800179a:	2302      	movmi	r3, #2
 800179c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017a0:	063f      	lsls	r7, r7, #24
 80017a2:	d518      	bpl.n	80017d6 <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80017a8:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 80017aa:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80017ac:	1aff      	subs	r7, r7, r3
 80017ae:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80017b0:	429f      	cmp	r7, r3
 80017b2:	bf28      	it	cs
 80017b4:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80017b6:	9b04      	ldr	r3, [sp, #16]
 80017b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80017bc:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80017c0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 80017c4:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80017c8:	9305      	str	r3, [sp, #20]
 80017ca:	9b05      	ldr	r3, [sp, #20]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4553      	cmp	r3, sl
 80017d2:	d808      	bhi.n	80017e6 <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 80017d4:	b32f      	cbz	r7, 8001822 <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 80017d6:	9b03      	ldr	r3, [sp, #12]
 80017d8:	085b      	lsrs	r3, r3, #1
        epnum++;
 80017da:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80017dc:	9303      	str	r3, [sp, #12]
 80017de:	361c      	adds	r6, #28
 80017e0:	f108 0820 	add.w	r8, r8, #32
 80017e4:	e658      	b.n	8001498 <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 80017e6:	6d32      	ldr	r2, [r6, #80]	; 0x50
 80017e8:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d9f2      	bls.n	80017d4 <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x3b4>
 80017f2:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80017f4:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	429f      	cmp	r7, r3
 80017fa:	bf28      	it	cs
 80017fc:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80017fe:	7c23      	ldrb	r3, [r4, #16]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	465a      	mov	r2, fp
 8001804:	b2bb      	uxth	r3, r7
 8001806:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8001808:	f001 f88b 	bl	8002922 <USB_WritePacket>
    ep->xfer_buff  += len;
 800180c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800180e:	443b      	add	r3, r7
 8001810:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8001812:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8001814:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 8001818:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 800181a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 800181e:	6533      	str	r3, [r6, #80]	; 0x50
 8001820:	e7d3      	b.n	80017ca <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001822:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 8001824:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001826:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 800182a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 800182e:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001830:	ea23 0302 	bic.w	r3, r3, r2
 8001834:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8001838:	e7cd      	b.n	80017d6 <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183a:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 800183c:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183e:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8001840:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001844:	9002      	str	r0, [sp, #8]
 8001846:	3320      	adds	r3, #32
 8001848:	e661      	b.n	800150e <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 800184a:	6973      	ldr	r3, [r6, #20]
 800184c:	f043 030b 	orr.w	r3, r3, #11
 8001850:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001852:	6933      	ldr	r3, [r6, #16]
 8001854:	f043 030b 	orr.w	r3, r3, #11
 8001858:	6133      	str	r3, [r6, #16]
 800185a:	e671      	b.n	8001540 <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800185c:	2303      	movs	r3, #3
 800185e:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001860:	2340      	movs	r3, #64	; 0x40
 8001862:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8001864:	f000 fbf8 	bl	8002058 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8001868:	4b34      	ldr	r3, [pc, #208]	; (800193c <HAL_PCD_IRQHandler+0x51c>)
 800186a:	4a35      	ldr	r2, [pc, #212]	; (8001940 <HAL_PCD_IRQHandler+0x520>)
 800186c:	4403      	add	r3, r0
 800186e:	4293      	cmp	r3, r2
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	d804      	bhi.n	800187e <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	e68c      	b.n	8001598 <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 800187e:	4a31      	ldr	r2, [pc, #196]	; (8001944 <HAL_PCD_IRQHandler+0x524>)
 8001880:	4931      	ldr	r1, [pc, #196]	; (8001948 <HAL_PCD_IRQHandler+0x528>)
 8001882:	4402      	add	r2, r0
 8001884:	428a      	cmp	r2, r1
 8001886:	d803      	bhi.n	8001890 <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800188e:	e7f4      	b.n	800187a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8001890:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8001894:	492d      	ldr	r1, [pc, #180]	; (800194c <HAL_PCD_IRQHandler+0x52c>)
 8001896:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 800189a:	428a      	cmp	r2, r1
 800189c:	d803      	bhi.n	80018a6 <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80018a4:	e7e9      	b.n	800187a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 80018a6:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 80018aa:	4929      	ldr	r1, [pc, #164]	; (8001950 <HAL_PCD_IRQHandler+0x530>)
 80018ac:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 80018b0:	428a      	cmp	r2, r1
 80018b2:	d803      	bhi.n	80018bc <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80018ba:	e7de      	b.n	800187a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 80018bc:	4a25      	ldr	r2, [pc, #148]	; (8001954 <HAL_PCD_IRQHandler+0x534>)
 80018be:	4926      	ldr	r1, [pc, #152]	; (8001958 <HAL_PCD_IRQHandler+0x538>)
 80018c0:	4402      	add	r2, r0
 80018c2:	428a      	cmp	r2, r1
 80018c4:	d803      	bhi.n	80018ce <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80018cc:	e7d5      	b.n	800187a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 80018ce:	4a23      	ldr	r2, [pc, #140]	; (800195c <HAL_PCD_IRQHandler+0x53c>)
 80018d0:	4923      	ldr	r1, [pc, #140]	; (8001960 <HAL_PCD_IRQHandler+0x540>)
 80018d2:	4402      	add	r2, r0
 80018d4:	428a      	cmp	r2, r1
 80018d6:	d803      	bhi.n	80018e0 <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80018de:	e7cc      	b.n	800187a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 80018e0:	4a20      	ldr	r2, [pc, #128]	; (8001964 <HAL_PCD_IRQHandler+0x544>)
 80018e2:	4921      	ldr	r1, [pc, #132]	; (8001968 <HAL_PCD_IRQHandler+0x548>)
 80018e4:	4402      	add	r2, r0
 80018e6:	428a      	cmp	r2, r1
 80018e8:	d803      	bhi.n	80018f2 <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80018f0:	e7c3      	b.n	800187a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 80018f2:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80018f6:	491d      	ldr	r1, [pc, #116]	; (800196c <HAL_PCD_IRQHandler+0x54c>)
 80018f8:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80018fc:	428a      	cmp	r2, r1
 80018fe:	d803      	bhi.n	8001908 <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001906:	e7b8      	b.n	800187a <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <HAL_PCD_IRQHandler+0x550>)
 800190a:	491a      	ldr	r1, [pc, #104]	; (8001974 <HAL_PCD_IRQHandler+0x554>)
 800190c:	4402      	add	r2, r0
 800190e:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	bf94      	ite	ls
 8001914:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001918:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 800191c:	e7ad      	b.n	800187a <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 800191e:	2b06      	cmp	r3, #6
 8001920:	f47f ae6e 	bne.w	8001600 <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001924:	2208      	movs	r2, #8
 8001926:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 800192a:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800192c:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800192e:	f001 f80c 	bl	800294a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001932:	fb07 4708 	mla	r7, r7, r8, r4
 8001936:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800193a:	e65c      	b.n	80015f6 <HAL_PCD_IRQHandler+0x1d6>
 800193c:	ff275340 	.word	0xff275340
 8001940:	000c34ff 	.word	0x000c34ff
 8001944:	ff1b1e40 	.word	0xff1b1e40
 8001948:	000f423f 	.word	0x000f423f
 800194c:	00124f7f 	.word	0x00124f7f
 8001950:	0013d61f 	.word	0x0013d61f
 8001954:	fee5b660 	.word	0xfee5b660
 8001958:	0016e35f 	.word	0x0016e35f
 800195c:	feced300 	.word	0xfeced300
 8001960:	001b773f 	.word	0x001b773f
 8001964:	feb35bc0 	.word	0xfeb35bc0
 8001968:	002191bf 	.word	0x002191bf
 800196c:	0038751f 	.word	0x0038751f
 8001970:	fe5954e0 	.word	0xfe5954e0
 8001974:	00419cdf 	.word	0x00419cdf

08001978 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8001978:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 800197c:	2b01      	cmp	r3, #1
{
 800197e:	b510      	push	{r4, lr}
 8001980:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001982:	d009      	beq.n	8001998 <HAL_PCD_SetAddress+0x20>
 8001984:	2301      	movs	r3, #1
 8001986:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 800198a:	6800      	ldr	r0, [r0, #0]
 800198c:	f001 f823 	bl	80029d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8001990:	2000      	movs	r0, #0
 8001992:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001996:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001998:	2002      	movs	r0, #2
}
 800199a:	bd10      	pop	{r4, pc}

0800199c <HAL_PCD_EP_Open>:
{
 800199c:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 800199e:	b24e      	sxtb	r6, r1
 80019a0:	2e00      	cmp	r6, #0
{
 80019a2:	4604      	mov	r4, r0
 80019a4:	f04f 051c 	mov.w	r5, #28
 80019a8:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80019ac:	bfb5      	itete	lt
 80019ae:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80019b2:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80019b6:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80019b8:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 80019bc:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 80019be:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 80019c0:	bfb8      	it	lt
 80019c2:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 80019c4:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 80019c6:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 80019c8:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 80019cc:	bf04      	itt	eq
 80019ce:	2300      	moveq	r3, #0
 80019d0:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 80019d2:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80019d4:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 80019d6:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 80019da:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d009      	beq.n	80019f4 <HAL_PCD_EP_Open+0x58>
 80019e0:	2301      	movs	r3, #1
 80019e2:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80019e6:	6820      	ldr	r0, [r4, #0]
 80019e8:	f000 fdce 	bl	8002588 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80019ec:	2000      	movs	r0, #0
 80019ee:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 80019f2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 80019f4:	2002      	movs	r0, #2
}
 80019f6:	bd70      	pop	{r4, r5, r6, pc}

080019f8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 80019f8:	b24b      	sxtb	r3, r1
 80019fa:	2b00      	cmp	r3, #0
{  
 80019fc:	b510      	push	{r4, lr}
 80019fe:	f04f 021c 	mov.w	r2, #28
 8001a02:	4604      	mov	r4, r0
 8001a04:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a08:	bfb5      	itete	lt
 8001a0a:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001a0e:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a12:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001a14:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 8001a18:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8001a1a:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8001a1c:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001a1e:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d009      	beq.n	8001a3a <HAL_PCD_EP_Close+0x42>
 8001a26:	2301      	movs	r3, #1
 8001a28:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001a2c:	6820      	ldr	r0, [r4, #0]
 8001a2e:	f000 fdea 	bl	8002606 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001a32:	2000      	movs	r0, #0
 8001a34:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001a38:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001a3a:	2002      	movs	r0, #2
}
 8001a3c:	bd10      	pop	{r4, pc}

08001a3e <HAL_PCD_EP_Receive>:
{
 8001a3e:	b538      	push	{r3, r4, r5, lr}
 8001a40:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001a44:	241c      	movs	r4, #28
 8001a46:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8001a4a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001a4e:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 8001a52:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 8001a56:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 8001a58:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8001a5c:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8001a60:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8001a64:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 8001a68:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001a6a:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001a6c:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8001a6e:	bf08      	it	eq
 8001a70:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 8001a74:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8001a76:	b91d      	cbnz	r5, 8001a80 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001a78:	f000 fee6 	bl	8002848 <USB_EP0StartXfer>
}
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001a80:	f000 fe1c 	bl	80026bc <USB_EPStartXfer>
 8001a84:	e7fa      	b.n	8001a7c <HAL_PCD_EP_Receive+0x3e>

08001a86 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001a86:	231c      	movs	r3, #28
 8001a88:	f001 010f 	and.w	r1, r1, #15
 8001a8c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001a90:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 8001a94:	4770      	bx	lr

08001a96 <HAL_PCD_EP_Transmit>:
{
 8001a96:	b538      	push	{r3, r4, r5, lr}
 8001a98:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a9c:	241c      	movs	r4, #28
 8001a9e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8001aa2:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001aa6:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 8001aa8:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8001aae:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8001ab0:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001ab2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8001ab6:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 8001aba:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001abc:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001abe:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8001ac0:	bf08      	it	eq
 8001ac2:	64a2      	streq	r2, [r4, #72]	; 0x48
 8001ac4:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8001ac6:	b91d      	cbnz	r5, 8001ad0 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001ac8:	f000 febe 	bl	8002848 <USB_EP0StartXfer>
}
 8001acc:	2000      	movs	r0, #0
 8001ace:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001ad0:	f000 fdf4 	bl	80026bc <USB_EPStartXfer>
 8001ad4:	e7fa      	b.n	8001acc <HAL_PCD_EP_Transmit+0x36>

08001ad6 <HAL_PCD_EP_SetStall>:
{
 8001ad6:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001ad8:	b24b      	sxtb	r3, r1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8001ae0:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001ae4:	bfb5      	itete	lt
 8001ae6:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8001aea:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001aee:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8001af0:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 8001af4:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001af6:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8001af8:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8001afa:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001afc:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001afe:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001b00:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001b04:	4293      	cmp	r3, r2
{
 8001b06:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001b08:	d00f      	beq.n	8001b2a <HAL_PCD_EP_SetStall+0x54>
 8001b0a:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001b0e:	6800      	ldr	r0, [r0, #0]
 8001b10:	f000 ff29 	bl	8002966 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001b14:	b92d      	cbnz	r5, 8001b22 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b16:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001b1a:	7c21      	ldrb	r1, [r4, #16]
 8001b1c:	6820      	ldr	r0, [r4, #0]
 8001b1e:	f000 ffcf 	bl	8002ac0 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8001b22:	2000      	movs	r0, #0
 8001b24:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001b28:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001b2a:	2002      	movs	r0, #2
}
 8001b2c:	bd38      	pop	{r3, r4, r5, pc}

08001b2e <HAL_PCD_EP_ClrStall>:
{
 8001b2e:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001b30:	b24b      	sxtb	r3, r1
 8001b32:	2b00      	cmp	r3, #0
{
 8001b34:	4605      	mov	r5, r0
 8001b36:	f04f 021c 	mov.w	r2, #28
 8001b3a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001b3e:	bfb5      	itete	lt
 8001b40:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8001b44:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001b48:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8001b4a:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001b4e:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001b50:	2400      	movs	r4, #0
 8001b52:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001b54:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001b56:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001b58:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d009      	beq.n	8001b74 <HAL_PCD_EP_ClrStall+0x46>
 8001b60:	2301      	movs	r3, #1
 8001b62:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001b66:	6828      	ldr	r0, [r5, #0]
 8001b68:	f000 ff1c 	bl	80029a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001b6c:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 8001b70:	4620      	mov	r0, r4
 8001b72:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001b74:	2002      	movs	r0, #2
}
 8001b76:	bd38      	pop	{r3, r4, r5, pc}

08001b78 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001b78:	6800      	ldr	r0, [r0, #0]
{
 8001b7a:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001b7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 8001b7e:	b921      	cbnz	r1, 8001b8a <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001b80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b84:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 8001b86:	2000      	movs	r0, #0
 8001b88:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001b8a:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 8001b8c:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001b8e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 8001b92:	1e4e      	subs	r6, r1, #1
 8001b94:	b2ec      	uxtb	r4, r5
 8001b96:	42b4      	cmp	r4, r6
 8001b98:	f105 0501 	add.w	r5, r5, #1
 8001b9c:	db06      	blt.n	8001bac <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001b9e:	313f      	adds	r1, #63	; 0x3f
 8001ba0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001ba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ba8:	6043      	str	r3, [r0, #4]
 8001baa:	e7ec      	b.n	8001b86 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8001bac:	3440      	adds	r4, #64	; 0x40
 8001bae:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8001bb2:	6864      	ldr	r4, [r4, #4]
 8001bb4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8001bb8:	e7ec      	b.n	8001b94 <HAL_PCDEx_SetTxFiFo+0x1c>

08001bba <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001bba:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8001bbc:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001bbe:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001bc0:	4770      	bx	lr
	...

08001bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc8:	4604      	mov	r4, r0
 8001bca:	b918      	cbnz	r0, 8001bd4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001bcc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001bce:	b002      	add	sp, #8
 8001bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd4:	6803      	ldr	r3, [r0, #0]
 8001bd6:	07dd      	lsls	r5, r3, #31
 8001bd8:	d410      	bmi.n	8001bfc <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	0798      	lsls	r0, r3, #30
 8001bde:	d458      	bmi.n	8001c92 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	071a      	lsls	r2, r3, #28
 8001be4:	f100 809a 	bmi.w	8001d1c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	075b      	lsls	r3, r3, #29
 8001bec:	f100 80b8 	bmi.w	8001d60 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf0:	69a2      	ldr	r2, [r4, #24]
 8001bf2:	2a00      	cmp	r2, #0
 8001bf4:	f040 8119 	bne.w	8001e2a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	e7e8      	b.n	8001bce <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfc:	4ba6      	ldr	r3, [pc, #664]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	f002 020c 	and.w	r2, r2, #12
 8001c04:	2a04      	cmp	r2, #4
 8001c06:	d007      	beq.n	8001c18 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c0e:	2a08      	cmp	r2, #8
 8001c10:	d10a      	bne.n	8001c28 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	0259      	lsls	r1, r3, #9
 8001c16:	d507      	bpl.n	8001c28 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	4b9f      	ldr	r3, [pc, #636]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	039a      	lsls	r2, r3, #14
 8001c1e:	d5dc      	bpl.n	8001bda <HAL_RCC_OscConfig+0x16>
 8001c20:	6863      	ldr	r3, [r4, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1d9      	bne.n	8001bda <HAL_RCC_OscConfig+0x16>
 8001c26:	e7d1      	b.n	8001bcc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c28:	6863      	ldr	r3, [r4, #4]
 8001c2a:	4d9b      	ldr	r5, [pc, #620]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d111      	bne.n	8001c56 <HAL_RCC_OscConfig+0x92>
 8001c32:	682b      	ldr	r3, [r5, #0]
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c38:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c3a:	f7ff f9f3 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	4d96      	ldr	r5, [pc, #600]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001c40:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	682b      	ldr	r3, [r5, #0]
 8001c44:	039b      	lsls	r3, r3, #14
 8001c46:	d4c8      	bmi.n	8001bda <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff f9ec 	bl	8001024 <HAL_GetTick>
 8001c4c:	1b80      	subs	r0, r0, r6
 8001c4e:	2864      	cmp	r0, #100	; 0x64
 8001c50:	d9f7      	bls.n	8001c42 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001c52:	2003      	movs	r0, #3
 8001c54:	e7bb      	b.n	8001bce <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c5a:	d104      	bne.n	8001c66 <HAL_RCC_OscConfig+0xa2>
 8001c5c:	682b      	ldr	r3, [r5, #0]
 8001c5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c62:	602b      	str	r3, [r5, #0]
 8001c64:	e7e5      	b.n	8001c32 <HAL_RCC_OscConfig+0x6e>
 8001c66:	682a      	ldr	r2, [r5, #0]
 8001c68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c6c:	602a      	str	r2, [r5, #0]
 8001c6e:	682a      	ldr	r2, [r5, #0]
 8001c70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c74:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1df      	bne.n	8001c3a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001c7a:	f7ff f9d3 	bl	8001024 <HAL_GetTick>
 8001c7e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c80:	682b      	ldr	r3, [r5, #0]
 8001c82:	039f      	lsls	r7, r3, #14
 8001c84:	d5a9      	bpl.n	8001bda <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c86:	f7ff f9cd 	bl	8001024 <HAL_GetTick>
 8001c8a:	1b80      	subs	r0, r0, r6
 8001c8c:	2864      	cmp	r0, #100	; 0x64
 8001c8e:	d9f7      	bls.n	8001c80 <HAL_RCC_OscConfig+0xbc>
 8001c90:	e7df      	b.n	8001c52 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c92:	4b81      	ldr	r3, [pc, #516]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	f012 0f0c 	tst.w	r2, #12
 8001c9a:	d007      	beq.n	8001cac <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ca2:	2a08      	cmp	r2, #8
 8001ca4:	d111      	bne.n	8001cca <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	025e      	lsls	r6, r3, #9
 8001caa:	d40e      	bmi.n	8001cca <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cac:	4b7a      	ldr	r3, [pc, #488]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	0795      	lsls	r5, r2, #30
 8001cb2:	d502      	bpl.n	8001cba <HAL_RCC_OscConfig+0xf6>
 8001cb4:	68e2      	ldr	r2, [r4, #12]
 8001cb6:	2a01      	cmp	r2, #1
 8001cb8:	d188      	bne.n	8001bcc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	6921      	ldr	r1, [r4, #16]
 8001cbe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001cc2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001cc6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc8:	e78a      	b.n	8001be0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cca:	68e2      	ldr	r2, [r4, #12]
 8001ccc:	4b73      	ldr	r3, [pc, #460]	; (8001e9c <HAL_RCC_OscConfig+0x2d8>)
 8001cce:	b1b2      	cbz	r2, 8001cfe <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f9a6 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	4d6f      	ldr	r5, [pc, #444]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001cda:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	682b      	ldr	r3, [r5, #0]
 8001cde:	0798      	lsls	r0, r3, #30
 8001ce0:	d507      	bpl.n	8001cf2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce2:	682b      	ldr	r3, [r5, #0]
 8001ce4:	6922      	ldr	r2, [r4, #16]
 8001ce6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001cee:	602b      	str	r3, [r5, #0]
 8001cf0:	e776      	b.n	8001be0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7ff f997 	bl	8001024 <HAL_GetTick>
 8001cf6:	1b80      	subs	r0, r0, r6
 8001cf8:	2802      	cmp	r0, #2
 8001cfa:	d9ef      	bls.n	8001cdc <HAL_RCC_OscConfig+0x118>
 8001cfc:	e7a9      	b.n	8001c52 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001cfe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d00:	f7ff f990 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d04:	4d64      	ldr	r5, [pc, #400]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001d06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d08:	682b      	ldr	r3, [r5, #0]
 8001d0a:	0799      	lsls	r1, r3, #30
 8001d0c:	f57f af68 	bpl.w	8001be0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d10:	f7ff f988 	bl	8001024 <HAL_GetTick>
 8001d14:	1b80      	subs	r0, r0, r6
 8001d16:	2802      	cmp	r0, #2
 8001d18:	d9f6      	bls.n	8001d08 <HAL_RCC_OscConfig+0x144>
 8001d1a:	e79a      	b.n	8001c52 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d1c:	6962      	ldr	r2, [r4, #20]
 8001d1e:	4b60      	ldr	r3, [pc, #384]	; (8001ea0 <HAL_RCC_OscConfig+0x2dc>)
 8001d20:	b17a      	cbz	r2, 8001d42 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d26:	f7ff f97d 	bl	8001024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	4d5b      	ldr	r5, [pc, #364]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001d2c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d30:	079f      	lsls	r7, r3, #30
 8001d32:	f53f af59 	bmi.w	8001be8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d36:	f7ff f975 	bl	8001024 <HAL_GetTick>
 8001d3a:	1b80      	subs	r0, r0, r6
 8001d3c:	2802      	cmp	r0, #2
 8001d3e:	d9f6      	bls.n	8001d2e <HAL_RCC_OscConfig+0x16a>
 8001d40:	e787      	b.n	8001c52 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001d42:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d44:	f7ff f96e 	bl	8001024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	4d53      	ldr	r5, [pc, #332]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001d4a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d4e:	0798      	lsls	r0, r3, #30
 8001d50:	f57f af4a 	bpl.w	8001be8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d54:	f7ff f966 	bl	8001024 <HAL_GetTick>
 8001d58:	1b80      	subs	r0, r0, r6
 8001d5a:	2802      	cmp	r0, #2
 8001d5c:	d9f6      	bls.n	8001d4c <HAL_RCC_OscConfig+0x188>
 8001d5e:	e778      	b.n	8001c52 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d60:	4b4d      	ldr	r3, [pc, #308]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
 8001d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d64:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001d68:	d128      	bne.n	8001dbc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	9201      	str	r2, [sp, #4]
 8001d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d7e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	4d48      	ldr	r5, [pc, #288]	; (8001ea4 <HAL_RCC_OscConfig+0x2e0>)
 8001d82:	682b      	ldr	r3, [r5, #0]
 8001d84:	05d9      	lsls	r1, r3, #23
 8001d86:	d51b      	bpl.n	8001dc0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d88:	68a3      	ldr	r3, [r4, #8]
 8001d8a:	4d43      	ldr	r5, [pc, #268]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d127      	bne.n	8001de0 <HAL_RCC_OscConfig+0x21c>
 8001d90:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d98:	f7ff f944 	bl	8001024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9c:	4d3e      	ldr	r5, [pc, #248]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001d9e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001da6:	079b      	lsls	r3, r3, #30
 8001da8:	d539      	bpl.n	8001e1e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001daa:	2e00      	cmp	r6, #0
 8001dac:	f43f af20 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db0:	4a39      	ldr	r2, [pc, #228]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
 8001db2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	e719      	b.n	8001bf0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001dbc:	2600      	movs	r6, #0
 8001dbe:	e7df      	b.n	8001d80 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc0:	682b      	ldr	r3, [r5, #0]
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001dc8:	f7ff f92c 	bl	8001024 <HAL_GetTick>
 8001dcc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dce:	682b      	ldr	r3, [r5, #0]
 8001dd0:	05da      	lsls	r2, r3, #23
 8001dd2:	d4d9      	bmi.n	8001d88 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd4:	f7ff f926 	bl	8001024 <HAL_GetTick>
 8001dd8:	1bc0      	subs	r0, r0, r7
 8001dda:	2802      	cmp	r0, #2
 8001ddc:	d9f7      	bls.n	8001dce <HAL_RCC_OscConfig+0x20a>
 8001dde:	e738      	b.n	8001c52 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	d104      	bne.n	8001dee <HAL_RCC_OscConfig+0x22a>
 8001de4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	672b      	str	r3, [r5, #112]	; 0x70
 8001dec:	e7d0      	b.n	8001d90 <HAL_RCC_OscConfig+0x1cc>
 8001dee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	672a      	str	r2, [r5, #112]	; 0x70
 8001df6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001df8:	f022 0204 	bic.w	r2, r2, #4
 8001dfc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1ca      	bne.n	8001d98 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001e02:	f7ff f90f 	bl	8001024 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e0a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e0e:	0798      	lsls	r0, r3, #30
 8001e10:	d5cb      	bpl.n	8001daa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff f907 	bl	8001024 <HAL_GetTick>
 8001e16:	1bc0      	subs	r0, r0, r7
 8001e18:	4540      	cmp	r0, r8
 8001e1a:	d9f7      	bls.n	8001e0c <HAL_RCC_OscConfig+0x248>
 8001e1c:	e719      	b.n	8001c52 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff f901 	bl	8001024 <HAL_GetTick>
 8001e22:	1bc0      	subs	r0, r0, r7
 8001e24:	4540      	cmp	r0, r8
 8001e26:	d9bd      	bls.n	8001da4 <HAL_RCC_OscConfig+0x1e0>
 8001e28:	e713      	b.n	8001c52 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e2a:	4d1b      	ldr	r5, [pc, #108]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
 8001e2c:	68ab      	ldr	r3, [r5, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	f43f aeca 	beq.w	8001bcc <HAL_RCC_OscConfig+0x8>
 8001e38:	4e1b      	ldr	r6, [pc, #108]	; (8001ea8 <HAL_RCC_OscConfig+0x2e4>)
 8001e3a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e3c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e40:	d134      	bne.n	8001eac <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001e42:	f7ff f8ef 	bl	8001024 <HAL_GetTick>
 8001e46:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e48:	682b      	ldr	r3, [r5, #0]
 8001e4a:	0199      	lsls	r1, r3, #6
 8001e4c:	d41e      	bmi.n	8001e8c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e4e:	6a22      	ldr	r2, [r4, #32]
 8001e50:	69e3      	ldr	r3, [r4, #28]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e56:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e62:	4c0d      	ldr	r4, [pc, #52]	; (8001e98 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e64:	0852      	lsrs	r2, r2, #1
 8001e66:	3a01      	subs	r2, #1
 8001e68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e6c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e6e:	2301      	movs	r3, #1
 8001e70:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001e72:	f7ff f8d7 	bl	8001024 <HAL_GetTick>
 8001e76:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	019a      	lsls	r2, r3, #6
 8001e7c:	f53f aebc 	bmi.w	8001bf8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff f8d0 	bl	8001024 <HAL_GetTick>
 8001e84:	1b40      	subs	r0, r0, r5
 8001e86:	2802      	cmp	r0, #2
 8001e88:	d9f6      	bls.n	8001e78 <HAL_RCC_OscConfig+0x2b4>
 8001e8a:	e6e2      	b.n	8001c52 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff f8ca 	bl	8001024 <HAL_GetTick>
 8001e90:	1bc0      	subs	r0, r0, r7
 8001e92:	2802      	cmp	r0, #2
 8001e94:	d9d8      	bls.n	8001e48 <HAL_RCC_OscConfig+0x284>
 8001e96:	e6dc      	b.n	8001c52 <HAL_RCC_OscConfig+0x8e>
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	42470000 	.word	0x42470000
 8001ea0:	42470e80 	.word	0x42470e80
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001eac:	f7ff f8ba 	bl	8001024 <HAL_GetTick>
 8001eb0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	682b      	ldr	r3, [r5, #0]
 8001eb4:	019b      	lsls	r3, r3, #6
 8001eb6:	f57f ae9f 	bpl.w	8001bf8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eba:	f7ff f8b3 	bl	8001024 <HAL_GetTick>
 8001ebe:	1b00      	subs	r0, r0, r4
 8001ec0:	2802      	cmp	r0, #2
 8001ec2:	d9f6      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x2ee>
 8001ec4:	e6c5      	b.n	8001c52 <HAL_RCC_OscConfig+0x8e>
 8001ec6:	bf00      	nop

08001ec8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec8:	4913      	ldr	r1, [pc, #76]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001eca:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ecc:	688b      	ldr	r3, [r1, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d003      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0x16>
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d003      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eda:	4810      	ldr	r0, [pc, #64]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001edc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001ede:	4810      	ldr	r0, [pc, #64]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x58>)
 8001ee0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ee2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ee4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ee8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eec:	bf14      	ite	ne
 8001eee:	480c      	ldrne	r0, [pc, #48]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef0:	480a      	ldreq	r0, [pc, #40]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001ef6:	bf18      	it	ne
 8001ef8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001efa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efe:	fba1 0100 	umull	r0, r1, r1, r0
 8001f02:	f7fe febd 	bl	8000c80 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x50>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001f0e:	3301      	adds	r3, #1
 8001f10:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001f12:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f16:	bd08      	pop	{r3, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	00f42400 	.word	0x00f42400
 8001f20:	007a1200 	.word	0x007a1200

08001f24 <HAL_RCC_ClockConfig>:
{
 8001f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f28:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	b910      	cbnz	r0, 8001f34 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f2e:	2001      	movs	r0, #1
 8001f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b44      	ldr	r3, [pc, #272]	; (8002048 <HAL_RCC_ClockConfig+0x124>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	f002 020f 	and.w	r2, r2, #15
 8001f3c:	428a      	cmp	r2, r1
 8001f3e:	d328      	bcc.n	8001f92 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f40:	6821      	ldr	r1, [r4, #0]
 8001f42:	078f      	lsls	r7, r1, #30
 8001f44:	d42d      	bmi.n	8001fa2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	07c8      	lsls	r0, r1, #31
 8001f48:	d440      	bmi.n	8001fcc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4a:	4b3f      	ldr	r3, [pc, #252]	; (8002048 <HAL_RCC_ClockConfig+0x124>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	f002 020f 	and.w	r2, r2, #15
 8001f52:	4295      	cmp	r5, r2
 8001f54:	d366      	bcc.n	8002024 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f56:	6822      	ldr	r2, [r4, #0]
 8001f58:	0751      	lsls	r1, r2, #29
 8001f5a:	d46c      	bmi.n	8002036 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5c:	0713      	lsls	r3, r2, #28
 8001f5e:	d507      	bpl.n	8001f70 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f60:	4a3a      	ldr	r2, [pc, #232]	; (800204c <HAL_RCC_ClockConfig+0x128>)
 8001f62:	6921      	ldr	r1, [r4, #16]
 8001f64:	6893      	ldr	r3, [r2, #8]
 8001f66:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f6a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f6e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f70:	f7ff ffaa 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001f74:	4b35      	ldr	r3, [pc, #212]	; (800204c <HAL_RCC_ClockConfig+0x128>)
 8001f76:	4a36      	ldr	r2, [pc, #216]	; (8002050 <HAL_RCC_ClockConfig+0x12c>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	40d8      	lsrs	r0, r3
 8001f82:	4b34      	ldr	r3, [pc, #208]	; (8002054 <HAL_RCC_ClockConfig+0x130>)
 8001f84:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f86:	2000      	movs	r0, #0
 8001f88:	f7ff f802 	bl	8000f90 <HAL_InitTick>
  return HAL_OK;
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	b2ca      	uxtb	r2, r1
 8001f94:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	4299      	cmp	r1, r3
 8001f9e:	d1c6      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xa>
 8001fa0:	e7ce      	b.n	8001f40 <HAL_RCC_ClockConfig+0x1c>
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	; (800204c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa8:	bf1e      	ittt	ne
 8001faa:	689a      	ldrne	r2, [r3, #8]
 8001fac:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001fb0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb4:	bf42      	ittt	mi
 8001fb6:	689a      	ldrmi	r2, [r3, #8]
 8001fb8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001fbc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	68a0      	ldr	r0, [r4, #8]
 8001fc2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fc6:	4302      	orrs	r2, r0
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	e7bc      	b.n	8001f46 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fcc:	6862      	ldr	r2, [r4, #4]
 8001fce:	4b1f      	ldr	r3, [pc, #124]	; (800204c <HAL_RCC_ClockConfig+0x128>)
 8001fd0:	2a01      	cmp	r2, #1
 8001fd2:	d11d      	bne.n	8002010 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	d0a8      	beq.n	8001f2e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fdc:	4e1b      	ldr	r6, [pc, #108]	; (800204c <HAL_RCC_ClockConfig+0x128>)
 8001fde:	68b3      	ldr	r3, [r6, #8]
 8001fe0:	f023 0303 	bic.w	r3, r3, #3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001fe8:	f7ff f81c 	bl	8001024 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fec:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ff0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	68b3      	ldr	r3, [r6, #8]
 8001ff4:	6862      	ldr	r2, [r4, #4]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ffe:	d0a4      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002000:	f7ff f810 	bl	8001024 <HAL_GetTick>
 8002004:	1bc0      	subs	r0, r0, r7
 8002006:	4540      	cmp	r0, r8
 8002008:	d9f3      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800200a:	2003      	movs	r0, #3
}
 800200c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002010:	1e91      	subs	r1, r2, #2
 8002012:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002014:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002016:	d802      	bhi.n	800201e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002018:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800201c:	e7dd      	b.n	8001fda <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201e:	f013 0f02 	tst.w	r3, #2
 8002022:	e7da      	b.n	8001fda <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002024:	b2ea      	uxtb	r2, r5
 8002026:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	429d      	cmp	r5, r3
 8002030:	f47f af7d 	bne.w	8001f2e <HAL_RCC_ClockConfig+0xa>
 8002034:	e78f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002036:	4905      	ldr	r1, [pc, #20]	; (800204c <HAL_RCC_ClockConfig+0x128>)
 8002038:	68e0      	ldr	r0, [r4, #12]
 800203a:	688b      	ldr	r3, [r1, #8]
 800203c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002040:	4303      	orrs	r3, r0
 8002042:	608b      	str	r3, [r1, #8]
 8002044:	e78a      	b.n	8001f5c <HAL_RCC_ClockConfig+0x38>
 8002046:	bf00      	nop
 8002048:	40023c00 	.word	0x40023c00
 800204c:	40023800 	.word	0x40023800
 8002050:	08006538 	.word	0x08006538
 8002054:	20000120 	.word	0x20000120

08002058 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002058:	4b01      	ldr	r3, [pc, #4]	; (8002060 <HAL_RCC_GetHCLKFreq+0x8>)
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000120 	.word	0x20000120

08002064 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002064:	6803      	ldr	r3, [r0, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	f042 0201 	orr.w	r2, r2, #1
 800206c:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8002076:	2000      	movs	r0, #0
 8002078:	4770      	bx	lr

0800207a <HAL_TIM_OC_DelayElapsedCallback>:
 800207a:	4770      	bx	lr

0800207c <HAL_TIM_IC_CaptureCallback>:
 800207c:	4770      	bx	lr

0800207e <HAL_TIM_PWM_PulseFinishedCallback>:
 800207e:	4770      	bx	lr

08002080 <HAL_TIM_TriggerCallback>:
 8002080:	4770      	bx	lr

08002082 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002082:	6803      	ldr	r3, [r0, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	0791      	lsls	r1, r2, #30
{
 8002088:	b510      	push	{r4, lr}
 800208a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800208c:	d50e      	bpl.n	80020ac <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	0792      	lsls	r2, r2, #30
 8002092:	d50b      	bpl.n	80020ac <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002094:	f06f 0202 	mvn.w	r2, #2
 8002098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800209a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800209c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800209e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020a0:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a2:	d077      	beq.n	8002194 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80020a4:	f7ff ffea 	bl	800207c <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a8:	2300      	movs	r3, #0
 80020aa:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	0750      	lsls	r0, r2, #29
 80020b2:	d510      	bpl.n	80020d6 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	0751      	lsls	r1, r2, #29
 80020b8:	d50d      	bpl.n	80020d6 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020ba:	f06f 0204 	mvn.w	r2, #4
 80020be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c2:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c8:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020cc:	d068      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	f7ff ffd5 	bl	800207c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d2:	2300      	movs	r3, #0
 80020d4:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	0712      	lsls	r2, r2, #28
 80020dc:	d50f      	bpl.n	80020fe <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	0710      	lsls	r0, r2, #28
 80020e2:	d50c      	bpl.n	80020fe <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020e4:	f06f 0208 	mvn.w	r2, #8
 80020e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ea:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ec:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ee:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020f0:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f4:	d05a      	beq.n	80021ac <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80020f6:	f7ff ffc1 	bl	800207c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	2300      	movs	r3, #0
 80020fc:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	06d2      	lsls	r2, r2, #27
 8002104:	d510      	bpl.n	8002128 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	06d0      	lsls	r0, r2, #27
 800210a:	d50d      	bpl.n	8002128 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800210c:	f06f 0210 	mvn.w	r2, #16
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002112:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002114:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002116:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800211a:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800211c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800211e:	d04b      	beq.n	80021b8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002120:	f7ff ffac 	bl	800207c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002124:	2300      	movs	r3, #0
 8002126:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	07d1      	lsls	r1, r2, #31
 800212e:	d508      	bpl.n	8002142 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	07d2      	lsls	r2, r2, #31
 8002134:	d505      	bpl.n	8002142 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002136:	f06f 0201 	mvn.w	r2, #1
 800213a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800213c:	4620      	mov	r0, r4
 800213e:	f001 fb39 	bl	80037b4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	0610      	lsls	r0, r2, #24
 8002148:	d508      	bpl.n	800215c <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	0611      	lsls	r1, r2, #24
 800214e:	d505      	bpl.n	800215c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002154:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002156:	4620      	mov	r0, r4
 8002158:	f000 f8d7 	bl	800230a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	0652      	lsls	r2, r2, #25
 8002162:	d508      	bpl.n	8002176 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	0650      	lsls	r0, r2, #25
 8002168:	d505      	bpl.n	8002176 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800216a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800216e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002170:	4620      	mov	r0, r4
 8002172:	f7ff ff85 	bl	8002080 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	0691      	lsls	r1, r2, #26
 800217c:	d522      	bpl.n	80021c4 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	0692      	lsls	r2, r2, #26
 8002182:	d51f      	bpl.n	80021c4 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002184:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002188:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800218a:	611a      	str	r2, [r3, #16]
    }
  }
}
 800218c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002190:	f000 b8ba 	b.w	8002308 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002194:	f7ff ff71 	bl	800207a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	4620      	mov	r0, r4
 800219a:	f7ff ff70 	bl	800207e <HAL_TIM_PWM_PulseFinishedCallback>
 800219e:	e783      	b.n	80020a8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a0:	f7ff ff6b 	bl	800207a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a4:	4620      	mov	r0, r4
 80021a6:	f7ff ff6a 	bl	800207e <HAL_TIM_PWM_PulseFinishedCallback>
 80021aa:	e792      	b.n	80020d2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ac:	f7ff ff65 	bl	800207a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80021b0:	4620      	mov	r0, r4
 80021b2:	f7ff ff64 	bl	800207e <HAL_TIM_PWM_PulseFinishedCallback>
 80021b6:	e7a0      	b.n	80020fa <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b8:	f7ff ff5f 	bl	800207a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	4620      	mov	r0, r4
 80021be:	f7ff ff5e 	bl	800207e <HAL_TIM_PWM_PulseFinishedCallback>
 80021c2:	e7af      	b.n	8002124 <HAL_TIM_IRQHandler+0xa2>
 80021c4:	bd10      	pop	{r4, pc}
	...

080021c8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021c8:	4a2e      	ldr	r2, [pc, #184]	; (8002284 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80021ca:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021cc:	4290      	cmp	r0, r2
 80021ce:	d012      	beq.n	80021f6 <TIM_Base_SetConfig+0x2e>
 80021d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021d4:	d00f      	beq.n	80021f6 <TIM_Base_SetConfig+0x2e>
 80021d6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80021da:	4290      	cmp	r0, r2
 80021dc:	d00b      	beq.n	80021f6 <TIM_Base_SetConfig+0x2e>
 80021de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021e2:	4290      	cmp	r0, r2
 80021e4:	d007      	beq.n	80021f6 <TIM_Base_SetConfig+0x2e>
 80021e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ea:	4290      	cmp	r0, r2
 80021ec:	d003      	beq.n	80021f6 <TIM_Base_SetConfig+0x2e>
 80021ee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80021f2:	4290      	cmp	r0, r2
 80021f4:	d11d      	bne.n	8002232 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80021f6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021fc:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80021fe:	4a21      	ldr	r2, [pc, #132]	; (8002284 <TIM_Base_SetConfig+0xbc>)
 8002200:	4290      	cmp	r0, r2
 8002202:	d104      	bne.n	800220e <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002204:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220a:	4313      	orrs	r3, r2
 800220c:	e028      	b.n	8002260 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800220e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002212:	d0f7      	beq.n	8002204 <TIM_Base_SetConfig+0x3c>
 8002214:	4a1c      	ldr	r2, [pc, #112]	; (8002288 <TIM_Base_SetConfig+0xc0>)
 8002216:	4290      	cmp	r0, r2
 8002218:	d0f4      	beq.n	8002204 <TIM_Base_SetConfig+0x3c>
 800221a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800221e:	4290      	cmp	r0, r2
 8002220:	d0f0      	beq.n	8002204 <TIM_Base_SetConfig+0x3c>
 8002222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002226:	4290      	cmp	r0, r2
 8002228:	d0ec      	beq.n	8002204 <TIM_Base_SetConfig+0x3c>
 800222a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800222e:	4290      	cmp	r0, r2
 8002230:	d0e8      	beq.n	8002204 <TIM_Base_SetConfig+0x3c>
 8002232:	4a16      	ldr	r2, [pc, #88]	; (800228c <TIM_Base_SetConfig+0xc4>)
 8002234:	4290      	cmp	r0, r2
 8002236:	d0e5      	beq.n	8002204 <TIM_Base_SetConfig+0x3c>
 8002238:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800223c:	4290      	cmp	r0, r2
 800223e:	d0e1      	beq.n	8002204 <TIM_Base_SetConfig+0x3c>
 8002240:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002244:	4290      	cmp	r0, r2
 8002246:	d0dd      	beq.n	8002204 <TIM_Base_SetConfig+0x3c>
 8002248:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800224c:	4290      	cmp	r0, r2
 800224e:	d0d9      	beq.n	8002204 <TIM_Base_SetConfig+0x3c>
 8002250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002254:	4290      	cmp	r0, r2
 8002256:	d0d5      	beq.n	8002204 <TIM_Base_SetConfig+0x3c>
 8002258:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800225c:	4290      	cmp	r0, r2
 800225e:	d0d1      	beq.n	8002204 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8002260:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002262:	688b      	ldr	r3, [r1, #8]
 8002264:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002266:	680b      	ldr	r3, [r1, #0]
 8002268:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <TIM_Base_SetConfig+0xbc>)
 800226c:	4298      	cmp	r0, r3
 800226e:	d006      	beq.n	800227e <TIM_Base_SetConfig+0xb6>
 8002270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002274:	4298      	cmp	r0, r3
 8002276:	d002      	beq.n	800227e <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002278:	2301      	movs	r3, #1
 800227a:	6143      	str	r3, [r0, #20]
}
 800227c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800227e:	690b      	ldr	r3, [r1, #16]
 8002280:	6303      	str	r3, [r0, #48]	; 0x30
 8002282:	e7f9      	b.n	8002278 <TIM_Base_SetConfig+0xb0>
 8002284:	40010000 	.word	0x40010000
 8002288:	40000400 	.word	0x40000400
 800228c:	40014000 	.word	0x40014000

08002290 <HAL_TIM_Base_Init>:
{ 
 8002290:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002292:	4604      	mov	r4, r0
 8002294:	b1a0      	cbz	r0, 80022c0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002296:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800229a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800229e:	b91b      	cbnz	r3, 80022a8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022a0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80022a4:	f001 fb82 	bl	80039ac <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80022a8:	2302      	movs	r3, #2
 80022aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022ae:	6820      	ldr	r0, [r4, #0]
 80022b0:	1d21      	adds	r1, r4, #4
 80022b2:	f7ff ff89 	bl	80021c8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80022bc:	2000      	movs	r0, #0
 80022be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022c0:	2001      	movs	r0, #1
}
 80022c2:	bd10      	pop	{r4, pc}

080022c4 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80022c4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022c8:	2b01      	cmp	r3, #1
{
 80022ca:	b510      	push	{r4, lr}
 80022cc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80022d0:	d018      	beq.n	8002304 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80022d2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80022d6:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80022d8:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80022da:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80022dc:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80022de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022e2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	4322      	orrs	r2, r4
 80022e8:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80022f8:	2301      	movs	r3, #1
 80022fa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80022fe:	2300      	movs	r3, #0
 8002300:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002304:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8002306:	bd10      	pop	{r4, pc}

08002308 <HAL_TIMEx_CommutationCallback>:
 8002308:	4770      	bx	lr

0800230a <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800230a:	4770      	bx	lr

0800230c <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800230c:	b084      	sub	sp, #16
 800230e:	b538      	push	{r3, r4, r5, lr}
 8002310:	ad05      	add	r5, sp, #20
 8002312:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002318:	2b01      	cmp	r3, #1
{
 800231a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800231c:	d126      	bne.n	800236c <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800231e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002324:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002326:	68c3      	ldr	r3, [r0, #12]
 8002328:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800232c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002330:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002332:	68c3      	ldr	r3, [r0, #12]
 8002334:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002338:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 800233a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800233c:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800233e:	bf02      	ittt	eq
 8002340:	68c3      	ldreq	r3, [r0, #12]
 8002342:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002346:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002348:	f000 fbde 	bl	8002b08 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 800234c:	9b08      	ldr	r3, [sp, #32]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d107      	bne.n	8002362 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002352:	68a3      	ldr	r3, [r4, #8]
 8002354:	f043 0306 	orr.w	r3, r3, #6
 8002358:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800235a:	68a3      	ldr	r3, [r4, #8]
 800235c:	f043 0320 	orr.w	r3, r3, #32
 8002360:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8002362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002366:	2000      	movs	r0, #0
 8002368:	b004      	add	sp, #16
 800236a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800236c:	68c3      	ldr	r3, [r0, #12]
 800236e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002372:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8002374:	f000 fbc8 	bl	8002b08 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237c:	63a3      	str	r3, [r4, #56]	; 0x38
 800237e:	e7e5      	b.n	800234c <USB_CoreInit+0x40>

08002380 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002380:	6883      	ldr	r3, [r0, #8]
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002388:	2000      	movs	r0, #0
 800238a:	4770      	bx	lr

0800238c <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800238c:	6883      	ldr	r3, [r0, #8]
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002394:	2000      	movs	r0, #0
 8002396:	4770      	bx	lr

08002398 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002398:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800239a:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 800239c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800239e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80023a2:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80023a4:	d108      	bne.n	80023b8 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80023a6:	68c3      	ldr	r3, [r0, #12]
 80023a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023ac:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 80023ae:	2032      	movs	r0, #50	; 0x32
 80023b0:	f7fe fe3e 	bl	8001030 <HAL_Delay>
  
  return HAL_OK;
}
 80023b4:	2000      	movs	r0, #0
 80023b6:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 80023b8:	2900      	cmp	r1, #0
 80023ba:	d1f8      	bne.n	80023ae <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80023bc:	68c3      	ldr	r3, [r0, #12]
 80023be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023c2:	60c3      	str	r3, [r0, #12]
 80023c4:	e7f3      	b.n	80023ae <USB_SetCurrentMode+0x16>
	...

080023c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80023c8:	b084      	sub	sp, #16
 80023ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023ce:	4604      	mov	r4, r0
 80023d0:	a807      	add	r0, sp, #28
 80023d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80023d6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80023d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80023da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023dc:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 80023de:	b9a6      	cbnz	r6, 800240a <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80023e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023e4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80023ec:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80023f0:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80023f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80023f6:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80023f8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80023fc:	d15e      	bne.n	80024bc <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80023fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002400:	b939      	cbnz	r1, 8002412 <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002402:	4620      	mov	r0, r4
 8002404:	f000 f89e 	bl	8002544 <USB_SetDevSpeed>
 8002408:	e007      	b.n	800241a <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800240a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800240e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002410:	e7e9      	b.n	80023e6 <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002412:	4619      	mov	r1, r3
 8002414:	4620      	mov	r0, r4
 8002416:	f000 f895 	bl	8002544 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 800241a:	2110      	movs	r1, #16
 800241c:	4620      	mov	r0, r4
 800241e:	f000 f86f 	bl	8002500 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002422:	4620      	mov	r0, r4
 8002424:	f000 f87e 	bl	8002524 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002428:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 800242a:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 800242e:	612b      	str	r3, [r5, #16]
 8002430:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 8002432:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002438:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 800243a:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 800243e:	61eb      	str	r3, [r5, #28]
 8002440:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002444:	4543      	cmp	r3, r8
 8002446:	d13b      	bne.n	80024c0 <USB_DevInit+0xf8>
 8002448:	2100      	movs	r1, #0
 800244a:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 800244e:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002450:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002454:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002458:	428b      	cmp	r3, r1
 800245a:	d13e      	bne.n	80024da <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800245c:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 800245e:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002464:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8002466:	d108      	bne.n	800247a <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002468:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <USB_DevInit+0x130>)
 800246a:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800246c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800246e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002472:	f043 0303 	orr.w	r3, r3, #3
 8002476:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002478:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800247e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002482:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002484:	b91f      	cbnz	r7, 800248e <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002486:	69a3      	ldr	r3, [r4, #24]
 8002488:	f043 0310 	orr.w	r3, r3, #16
 800248c:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800248e:	69a2      	ldr	r2, [r4, #24]
 8002490:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <USB_DevInit+0x134>)
 8002492:	4313      	orrs	r3, r2
 8002494:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8002496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002498:	b11b      	cbz	r3, 80024a2 <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800249a:	69a3      	ldr	r3, [r4, #24]
 800249c:	f043 0308 	orr.w	r3, r3, #8
 80024a0:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80024a2:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80024a4:	bf01      	itttt	eq
 80024a6:	69a3      	ldreq	r3, [r4, #24]
 80024a8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80024ac:	f043 0304 	orreq.w	r3, r3, #4
 80024b0:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 80024b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024b6:	2000      	movs	r0, #0
 80024b8:	b004      	add	sp, #16
 80024ba:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80024bc:	2103      	movs	r1, #3
 80024be:	e7a0      	b.n	8002402 <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80024c0:	f8d2 c000 	ldr.w	ip, [r2]
 80024c4:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80024c8:	bfb4      	ite	lt
 80024ca:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 80024cc:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80024ce:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80024d0:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80024d2:	f8c2 e008 	str.w	lr, [r2, #8]
 80024d6:	3220      	adds	r2, #32
 80024d8:	e7b4      	b.n	8002444 <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80024da:	f8d2 8000 	ldr.w	r8, [r2]
 80024de:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80024e2:	bfb4      	ite	lt
 80024e4:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80024e8:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80024ea:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80024ec:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80024ee:	f8c2 c008 	str.w	ip, [r2, #8]
 80024f2:	3220      	adds	r2, #32
 80024f4:	e7b0      	b.n	8002458 <USB_DevInit+0x90>
 80024f6:	bf00      	nop
 80024f8:	00800100 	.word	0x00800100
 80024fc:	803c3800 	.word	0x803c3800

08002500 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002500:	0189      	lsls	r1, r1, #6
 8002502:	f041 0120 	orr.w	r1, r1, #32
 8002506:	4a06      	ldr	r2, [pc, #24]	; (8002520 <USB_FlushTxFifo+0x20>)
 8002508:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 800250a:	3a01      	subs	r2, #1
 800250c:	d005      	beq.n	800251a <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800250e:	6903      	ldr	r3, [r0, #16]
 8002510:	f013 0320 	ands.w	r3, r3, #32
 8002514:	d1f9      	bne.n	800250a <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8002516:	4618      	mov	r0, r3
 8002518:	4770      	bx	lr
      return HAL_TIMEOUT;
 800251a:	2003      	movs	r0, #3
}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	00030d41 	.word	0x00030d41

08002524 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002524:	2310      	movs	r3, #16
 8002526:	4a06      	ldr	r2, [pc, #24]	; (8002540 <USB_FlushRxFifo+0x1c>)
 8002528:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 800252a:	3a01      	subs	r2, #1
 800252c:	d005      	beq.n	800253a <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800252e:	6903      	ldr	r3, [r0, #16]
 8002530:	f013 0310 	ands.w	r3, r3, #16
 8002534:	d1f9      	bne.n	800252a <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8002536:	4618      	mov	r0, r3
 8002538:	4770      	bx	lr
      return HAL_TIMEOUT;
 800253a:	2003      	movs	r0, #3
}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	00030d41 	.word	0x00030d41

08002544 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8002544:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002548:	4319      	orrs	r1, r3
 800254a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 800254e:	2000      	movs	r0, #0
 8002550:	4770      	bx	lr

08002552 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002552:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8002556:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 800255a:	f010 0006 	ands.w	r0, r0, #6
 800255e:	d012      	beq.n	8002586 <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002560:	6893      	ldr	r3, [r2, #8]
 8002562:	f003 0306 	and.w	r3, r3, #6
 8002566:	2b02      	cmp	r3, #2
 8002568:	d00c      	beq.n	8002584 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800256a:	6893      	ldr	r3, [r2, #8]
 800256c:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002570:	2b06      	cmp	r3, #6
 8002572:	d007      	beq.n	8002584 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002574:	6893      	ldr	r3, [r2, #8]
 8002576:	f003 0306 	and.w	r3, r3, #6
 800257a:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 800257c:	bf14      	ite	ne
 800257e:	2000      	movne	r0, #0
 8002580:	2002      	moveq	r0, #2
 8002582:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8002584:	2003      	movs	r0, #3
  }
  
  return speed;
}
 8002586:	4770      	bx	lr

08002588 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002588:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 800258a:	784b      	ldrb	r3, [r1, #1]
 800258c:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800258e:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8002592:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8002596:	2b01      	cmp	r3, #1
 8002598:	d11b      	bne.n	80025d2 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800259a:	40a3      	lsls	r3, r4
 800259c:	b29b      	uxth	r3, r3
 800259e:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80025a0:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80025a4:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80025a6:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	0412      	lsls	r2, r2, #16
 80025ae:	d40e      	bmi.n	80025ce <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80025b0:	688a      	ldr	r2, [r1, #8]
 80025b2:	78c8      	ldrb	r0, [r1, #3]
 80025b4:	681d      	ldr	r5, [r3, #0]
 80025b6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80025ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025c2:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 80025c6:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 80025ca:	4328      	orrs	r0, r5
 80025cc:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 80025ce:	2000      	movs	r0, #0
 80025d0:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80025d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d6:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80025d8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80025dc:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80025de:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80025e2:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80025e4:	6803      	ldr	r3, [r0, #0]
 80025e6:	041b      	lsls	r3, r3, #16
 80025e8:	d4f1      	bmi.n	80025ce <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80025ea:	688b      	ldr	r3, [r1, #8]
 80025ec:	78c9      	ldrb	r1, [r1, #3]
 80025ee:	6802      	ldr	r2, [r0, #0]
 80025f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002600:	4313      	orrs	r3, r2
 8002602:	6003      	str	r3, [r0, #0]
 8002604:	e7e3      	b.n	80025ce <USB_ActivateEndpoint+0x46>

08002606 <USB_DeactivateEndpoint>:
 8002606:	f000 b801 	b.w	800260c <USB_DeactivateDedicatedEndpoint>
	...

0800260c <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800260c:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 800260e:	784b      	ldrb	r3, [r1, #1]
 8002610:	2b01      	cmp	r3, #1
{
 8002612:	460e      	mov	r6, r1
 8002614:	4605      	mov	r5, r0
 8002616:	7809      	ldrb	r1, [r1, #0]
 8002618:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 800261c:	d126      	bne.n	800266c <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 800261e:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 8002622:	fb13 2301 	smlabb	r3, r3, r1, r2
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800262c:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800262e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002632:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8002634:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 800263c:	3a01      	subs	r2, #1
 800263e:	d101      	bne.n	8002644 <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 8002640:	2003      	movs	r0, #3
 8002642:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8002644:	689c      	ldr	r4, [r3, #8]
 8002646:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 800264a:	d1f7      	bne.n	800263c <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 800264c:	2110      	movs	r1, #16
 800264e:	4628      	mov	r0, r5
 8002650:	f7ff ff56 	bl	8002500 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8002654:	7831      	ldrb	r1, [r6, #0]
 8002656:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 800265a:	2301      	movs	r3, #1
 800265c:	408b      	lsls	r3, r1
 800265e:	b29b      	uxth	r3, r3
 8002660:	ea22 0303 	bic.w	r3, r2, r3
 8002664:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8002668:	4620      	mov	r0, r4
 800266a:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 800266c:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8002670:	fb13 2301 	smlabb	r3, r3, r1, r2
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800267a:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800267c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002680:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8002682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 800268a:	3a01      	subs	r2, #1
 800268c:	d0d8      	beq.n	8002640 <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 800268e:	6898      	ldr	r0, [r3, #8]
 8002690:	f010 0010 	ands.w	r0, r0, #16
 8002694:	d1f9      	bne.n	800268a <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002696:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800269a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800269e:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 80026a2:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 80026a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026aa:	408a      	lsls	r2, r1
 80026ac:	ea23 0302 	bic.w	r3, r3, r2
 80026b0:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 80026b4:	bd70      	pop	{r4, r5, r6, pc}
 80026b6:	bf00      	nop
 80026b8:	00030d41 	.word	0x00030d41

080026bc <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80026bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 80026be:	784b      	ldrb	r3, [r1, #1]
 80026c0:	780c      	ldrb	r4, [r1, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	694b      	ldr	r3, [r1, #20]
 80026c6:	d177      	bne.n	80027b8 <USB_EPStartXfer+0xfc>
 80026c8:	2620      	movs	r6, #32
 80026ca:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80026ce:	fb16 5404 	smlabb	r4, r6, r4, r5
 80026d2:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d138      	bne.n	800274a <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80026d8:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 80026dc:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 80026e0:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80026e2:	6926      	ldr	r6, [r4, #16]
 80026e4:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80026e8:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80026ea:	6926      	ldr	r6, [r4, #16]
 80026ec:	0cf6      	lsrs	r6, r6, #19
 80026ee:	04f6      	lsls	r6, r6, #19
 80026f0:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 80026f2:	2a01      	cmp	r2, #1
 80026f4:	d150      	bne.n	8002798 <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80026f6:	780c      	ldrb	r4, [r1, #0]
 80026f8:	690e      	ldr	r6, [r1, #16]
 80026fa:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80026fe:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8002700:	78ce      	ldrb	r6, [r1, #3]
 8002702:	2e01      	cmp	r6, #1
 8002704:	d10f      	bne.n	8002726 <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8002706:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800270a:	780f      	ldrb	r7, [r1, #0]
 800270c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002710:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002714:	fb14 5407 	smlabb	r4, r4, r7, r5
 8002718:	6827      	ldr	r7, [r4, #0]
 800271a:	bf0c      	ite	eq
 800271c:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002720:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 8002724:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002726:	780f      	ldrb	r7, [r1, #0]
 8002728:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 800272c:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800272e:	682c      	ldr	r4, [r5, #0]
 8002730:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8002734:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 8002736:	d105      	bne.n	8002744 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8002738:	9200      	str	r2, [sp, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	463a      	mov	r2, r7
 800273e:	68c9      	ldr	r1, [r1, #12]
 8002740:	f000 f8ef 	bl	8002922 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8002744:	2000      	movs	r0, #0
 8002746:	b003      	add	sp, #12
 8002748:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800274a:	0cf6      	lsrs	r6, r6, #19
 800274c:	04f6      	lsls	r6, r6, #19
 800274e:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002750:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8002752:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002754:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8002758:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 800275c:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800275e:	19de      	adds	r6, r3, r7
 8002760:	3e01      	subs	r6, #1
 8002762:	fbb6 f7f7 	udiv	r7, r6, r7
 8002766:	4e37      	ldr	r6, [pc, #220]	; (8002844 <USB_EPStartXfer+0x188>)
 8002768:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800276c:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 8002770:	ea46 060e 	orr.w	r6, r6, lr
 8002774:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8002776:	6927      	ldr	r7, [r4, #16]
 8002778:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800277c:	433e      	orrs	r6, r7
 800277e:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8002780:	78ce      	ldrb	r6, [r1, #3]
 8002782:	2e01      	cmp	r6, #1
 8002784:	d15a      	bne.n	800283c <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8002786:	6926      	ldr	r6, [r4, #16]
 8002788:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 800278c:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 800278e:	6926      	ldr	r6, [r4, #16]
 8002790:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8002794:	6126      	str	r6, [r4, #16]
 8002796:	e7ac      	b.n	80026f2 <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 8002798:	78ce      	ldrb	r6, [r1, #3]
 800279a:	2e01      	cmp	r6, #1
 800279c:	d0b3      	beq.n	8002706 <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0ae      	beq.n	8002700 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 80027a2:	f891 e000 	ldrb.w	lr, [r1]
 80027a6:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 80027aa:	2401      	movs	r4, #1
 80027ac:	fa04 f40e 	lsl.w	r4, r4, lr
 80027b0:	433c      	orrs	r4, r7
 80027b2:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 80027b6:	e7a3      	b.n	8002700 <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80027b8:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 80027bc:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80027c0:	6925      	ldr	r5, [r4, #16]
 80027c2:	0ced      	lsrs	r5, r5, #19
 80027c4:	04ed      	lsls	r5, r5, #19
 80027c6:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80027c8:	6925      	ldr	r5, [r4, #16]
 80027ca:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80027ce:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80027d2:	6125      	str	r5, [r4, #16]
 80027d4:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 80027d6:	b9fb      	cbnz	r3, 8002818 <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80027d8:	6923      	ldr	r3, [r4, #16]
 80027da:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80027de:	431d      	orrs	r5, r3
 80027e0:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80027e2:	6923      	ldr	r3, [r4, #16]
 80027e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027e8:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 80027ea:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80027ec:	bf04      	itt	eq
 80027ee:	68cb      	ldreq	r3, [r1, #12]
 80027f0:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 80027f2:	78cb      	ldrb	r3, [r1, #3]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d10a      	bne.n	800280e <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80027f8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80027fc:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	bf0c      	ite	eq
 8002804:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002808:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800280c:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002814:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8002816:	e795      	b.n	8002744 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8002818:	4e0a      	ldr	r6, [pc, #40]	; (8002844 <USB_EPStartXfer+0x188>)
 800281a:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 800281c:	442b      	add	r3, r5
 800281e:	3b01      	subs	r3, #1
 8002820:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8002824:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8002828:	433e      	orrs	r6, r7
 800282a:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 800282c:	b29b      	uxth	r3, r3
 800282e:	6926      	ldr	r6, [r4, #16]
 8002830:	435d      	muls	r5, r3
 8002832:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002836:	4335      	orrs	r5, r6
 8002838:	6125      	str	r5, [r4, #16]
 800283a:	e7d6      	b.n	80027ea <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 800283c:	2a01      	cmp	r2, #1
 800283e:	d1ae      	bne.n	800279e <USB_EPStartXfer+0xe2>
 8002840:	e759      	b.n	80026f6 <USB_EPStartXfer+0x3a>
 8002842:	bf00      	nop
 8002844:	1ff80000 	.word	0x1ff80000

08002848 <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 8002848:	784b      	ldrb	r3, [r1, #1]
 800284a:	2b01      	cmp	r3, #1
{
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	780b      	ldrb	r3, [r1, #0]
 8002850:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8002852:	d143      	bne.n	80028dc <USB_EP0StartXfer+0x94>
 8002854:	2420      	movs	r4, #32
 8002856:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800285a:	fb14 6303 	smlabb	r3, r4, r3, r6
 800285e:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8002860:	b9cd      	cbnz	r5, 8002896 <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002862:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002866:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800286a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800286c:	691c      	ldr	r4, [r3, #16]
 800286e:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002872:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8002874:	691c      	ldr	r4, [r3, #16]
 8002876:	0ce4      	lsrs	r4, r4, #19
 8002878:	04e4      	lsls	r4, r4, #19
 800287a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 800287c:	780d      	ldrb	r5, [r1, #0]
 800287e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8002882:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8002884:	681c      	ldr	r4, [r3, #0]
 8002886:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800288a:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 800288c:	d11b      	bne.n	80028c6 <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800288e:	690a      	ldr	r2, [r1, #16]
 8002890:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8002892:	2000      	movs	r0, #0
 8002894:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002896:	0ce4      	lsrs	r4, r4, #19
 8002898:	04e4      	lsls	r4, r4, #19
 800289a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800289c:	691c      	ldr	r4, [r3, #16]
 800289e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80028a2:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80028a6:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 80028a8:	688c      	ldr	r4, [r1, #8]
 80028aa:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 80028ac:	bf88      	it	hi
 80028ae:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80028b0:	691c      	ldr	r4, [r3, #16]
 80028b2:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80028b6:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80028b8:	694c      	ldr	r4, [r1, #20]
 80028ba:	691d      	ldr	r5, [r3, #16]
 80028bc:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80028c0:	432c      	orrs	r4, r5
 80028c2:	611c      	str	r4, [r3, #16]
 80028c4:	e7da      	b.n	800287c <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 80028c6:	694b      	ldr	r3, [r1, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0e2      	beq.n	8002892 <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80028cc:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80028d0:	2301      	movs	r3, #1
 80028d2:	40ab      	lsls	r3, r5
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80028da:	e7da      	b.n	8002892 <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80028dc:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80028e0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80028e4:	6903      	ldr	r3, [r0, #16]
 80028e6:	0cdb      	lsrs	r3, r3, #19
 80028e8:	04db      	lsls	r3, r3, #19
 80028ea:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80028ec:	6903      	ldr	r3, [r0, #16]
 80028ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80028f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80028f6:	6103      	str	r3, [r0, #16]
 80028f8:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 80028fa:	b105      	cbz	r5, 80028fe <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 80028fc:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80028fe:	6904      	ldr	r4, [r0, #16]
 8002900:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002904:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8002906:	6904      	ldr	r4, [r0, #16]
 8002908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290c:	4323      	orrs	r3, r4
    if (dma == 1U)
 800290e:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8002910:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002912:	bf04      	itt	eq
 8002914:	68cb      	ldreq	r3, [r1, #12]
 8002916:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8002918:	6803      	ldr	r3, [r0, #0]
 800291a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800291e:	6003      	str	r3, [r0, #0]
 8002920:	e7b7      	b.n	8002892 <USB_EP0StartXfer+0x4a>

08002922 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002922:	b510      	push	{r4, lr}
 8002924:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8002928:	b94c      	cbnz	r4, 800293e <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 800292a:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800292c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002930:	f023 0303 	bic.w	r3, r3, #3
 8002934:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8002938:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 800293a:	4299      	cmp	r1, r3
 800293c:	d101      	bne.n	8002942 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 800293e:	2000      	movs	r0, #0
 8002940:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002942:	f851 0b04 	ldr.w	r0, [r1], #4
 8002946:	6010      	str	r0, [r2, #0]
 8002948:	e7f7      	b.n	800293a <USB_WritePacket+0x18>

0800294a <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 800294a:	3203      	adds	r2, #3
 800294c:	f022 0203 	bic.w	r2, r2, #3
 8002950:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002952:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8002956:	4291      	cmp	r1, r2
 8002958:	d101      	bne.n	800295e <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 800295a:	4608      	mov	r0, r1
 800295c:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 800295e:	6803      	ldr	r3, [r0, #0]
 8002960:	f841 3b04 	str.w	r3, [r1], #4
 8002964:	e7f7      	b.n	8002956 <USB_ReadPacket+0xc>

08002966 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8002966:	784b      	ldrb	r3, [r1, #1]
 8002968:	780a      	ldrb	r2, [r1, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	f04f 0320 	mov.w	r3, #32
 8002970:	d10b      	bne.n	800298a <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8002972:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8002976:	fb13 0002 	smlabb	r0, r3, r2, r0
 800297a:	6803      	ldr	r3, [r0, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0b      	blt.n	8002998 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8002980:	6803      	ldr	r3, [r0, #0]
 8002982:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002986:	6003      	str	r3, [r0, #0]
 8002988:	e006      	b.n	8002998 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 800298a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800298e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8002992:	6803      	ldr	r3, [r0, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	daf3      	bge.n	8002980 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002998:	6803      	ldr	r3, [r0, #0]
 800299a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800299e:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 80029a0:	2000      	movs	r0, #0
 80029a2:	4770      	bx	lr

080029a4 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 80029a4:	784b      	ldrb	r3, [r1, #1]
 80029a6:	780a      	ldrb	r2, [r1, #0]
 80029a8:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029aa:	bf0c      	ite	eq
 80029ac:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029b0:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 80029b4:	2320      	movs	r3, #32
 80029b6:	fb13 0002 	smlabb	r0, r3, r2, r0
 80029ba:	6803      	ldr	r3, [r0, #0]
 80029bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029c0:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80029c2:	78cb      	ldrb	r3, [r1, #3]
 80029c4:	3b02      	subs	r3, #2
 80029c6:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80029c8:	bf9e      	ittt	ls
 80029ca:	6803      	ldrls	r3, [r0, #0]
 80029cc:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 80029d0:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 80029d2:	2000      	movs	r0, #0
 80029d4:	4770      	bx	lr

080029d6 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80029d6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80029da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029de:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 80029e2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80029e6:	0109      	lsls	r1, r1, #4
 80029e8:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80029ec:	4319      	orrs	r1, r3
 80029ee:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 80029f2:	2000      	movs	r0, #0
 80029f4:	4770      	bx	lr

080029f6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80029f6:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80029f8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80029fc:	f023 0302 	bic.w	r3, r3, #2
 8002a00:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002a04:	2003      	movs	r0, #3
 8002a06:	f7fe fb13 	bl	8001030 <HAL_Delay>
  
  return HAL_OK;  
}
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	bd08      	pop	{r3, pc}

08002a0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8002a0e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8002a10:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002a1c:	2003      	movs	r0, #3
 8002a1e:	f7fe fb07 	bl	8001030 <HAL_Delay>
  
  return HAL_OK;  
}
 8002a22:	2000      	movs	r0, #0
 8002a24:	bd08      	pop	{r3, pc}

08002a26 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8002a26:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8002a28:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8002a2a:	4010      	ands	r0, r2
 8002a2c:	4770      	bx	lr

08002a2e <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8002a2e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002a32:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8002a36:	69c0      	ldr	r0, [r0, #28]
 8002a38:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8002a3a:	0c00      	lsrs	r0, r0, #16
 8002a3c:	4770      	bx	lr

08002a3e <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8002a3e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002a42:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8002a46:	69c0      	ldr	r0, [r0, #28]
 8002a48:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8002a4a:	b280      	uxth	r0, r0
 8002a4c:	4770      	bx	lr

08002a4e <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8002a4e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002a52:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8002a56:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8002a5a:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8002a5c:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8002a5e:	4010      	ands	r0, r2
 8002a60:	4770      	bx	lr

08002a62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8002a62:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8002a64:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002a68:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002a6c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002a70:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002a72:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002a76:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002a78:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	4323      	orrs	r3, r4
  return v;
}
 8002a7e:	4018      	ands	r0, r3
 8002a80:	bd10      	pop	{r4, pc}

08002a82 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8002a82:	6940      	ldr	r0, [r0, #20]
}
 8002a84:	f000 0001 	and.w	r0, r0, #1
 8002a88:	4770      	bx	lr

08002a8a <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002a8a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002a8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a92:	f023 0307 	bic.w	r3, r3, #7
 8002a96:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002a9a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	f002 0206 	and.w	r2, r2, #6
 8002aa4:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8002aa6:	bf02      	ittt	eq
 8002aa8:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8002aac:	f042 0203 	orreq.w	r2, r2, #3
 8002ab0:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aba:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8002abc:	2000      	movs	r0, #0
 8002abe:	4770      	bx	lr

08002ac0 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8002ac0:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002ac2:	2400      	movs	r4, #0
 8002ac4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002ac8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002acc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002ad0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002ad4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002ad8:	f044 0418 	orr.w	r4, r4, #24
 8002adc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002ae0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8002ae4:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002ae6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002aea:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8002aee:	bf08      	it	eq
 8002af0:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002af4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002af8:	bf04      	itt	eq
 8002afa:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8002afe:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8002b02:	2000      	movs	r0, #0
 8002b04:	bd10      	pop	{r4, pc}
	...

08002b08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002b0e:	2003      	movs	r0, #3
 8002b10:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002b12:	6902      	ldr	r2, [r0, #16]
 8002b14:	2a00      	cmp	r2, #0
 8002b16:	daf8      	bge.n	8002b0a <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002b18:	6903      	ldr	r3, [r0, #16]
 8002b1a:	4a06      	ldr	r2, [pc, #24]	; (8002b34 <USB_CoreReset+0x2c>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002b22:	3a01      	subs	r2, #1
 8002b24:	d0f3      	beq.n	8002b0e <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002b26:	6903      	ldr	r3, [r0, #16]
 8002b28:	f013 0301 	ands.w	r3, r3, #1
 8002b2c:	d1f9      	bne.n	8002b22 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8002b2e:	4618      	mov	r0, r3
}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	00030d41 	.word	0x00030d41

08002b38 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002b38:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8002b3c:	b11b      	cbz	r3, 8002b46 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8002b44:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002b46:	2002      	movs	r0, #2
  }
}
 8002b48:	4770      	bx	lr

08002b4a <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002b4a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8002b4e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002b50:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002b54:	b15b      	cbz	r3, 8002b6e <USBD_CDC_EP0_RxReady+0x24>
 8002b56:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002b5a:	28ff      	cmp	r0, #255	; 0xff
 8002b5c:	d007      	beq.n	8002b6e <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002b64:	4621      	mov	r1, r4
 8002b66:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002b68:	23ff      	movs	r3, #255	; 0xff
 8002b6a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8002b6e:	2000      	movs	r0, #0
 8002b70:	bd10      	pop	{r4, pc}
	...

08002b74 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002b74:	2343      	movs	r3, #67	; 0x43
 8002b76:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002b78:	4800      	ldr	r0, [pc, #0]	; (8002b7c <USBD_CDC_GetFSCfgDesc+0x8>)
 8002b7a:	4770      	bx	lr
 8002b7c:	20000040 	.word	0x20000040

08002b80 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002b80:	2343      	movs	r3, #67	; 0x43
 8002b82:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002b84:	4800      	ldr	r0, [pc, #0]	; (8002b88 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002b86:	4770      	bx	lr
 8002b88:	20000084 	.word	0x20000084

08002b8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002b8c:	2343      	movs	r3, #67	; 0x43
 8002b8e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002b90:	4800      	ldr	r0, [pc, #0]	; (8002b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002b92:	4770      	bx	lr
 8002b94:	200000d4 	.word	0x200000d4

08002b98 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002b98:	230a      	movs	r3, #10
 8002b9a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002b9c:	4800      	ldr	r0, [pc, #0]	; (8002ba0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002b9e:	4770      	bx	lr
 8002ba0:	200000c8 	.word	0x200000c8

08002ba4 <USBD_CDC_DataOut>:
{      
 8002ba4:	b538      	push	{r3, r4, r5, lr}
 8002ba6:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002ba8:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002bac:	f001 f92a 	bl	8003e04 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002bb0:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002bb4:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002bb8:	b14b      	cbz	r3, 8002bce <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002bba:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002bbe:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002bc8:	4798      	blx	r3
    return USBD_OK;
 8002bca:	2000      	movs	r0, #0
 8002bcc:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002bce:	2002      	movs	r0, #2
}
 8002bd0:	bd38      	pop	{r3, r4, r5, pc}
	...

08002bd4 <USBD_CDC_Setup>:
{
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002bd6:	780f      	ldrb	r7, [r1, #0]
 8002bd8:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8002bdc:	4606      	mov	r6, r0
 8002bde:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002be0:	d023      	beq.n	8002c2a <USBD_CDC_Setup+0x56>
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d119      	bne.n	8002c1a <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8002be6:	88ca      	ldrh	r2, [r1, #6]
 8002be8:	784b      	ldrb	r3, [r1, #1]
 8002bea:	b1c2      	cbz	r2, 8002c1e <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8002bec:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002bee:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8002bf2:	d50b      	bpl.n	8002c0c <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002bf4:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	688f      	ldr	r7, [r1, #8]
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8002c00:	88e2      	ldrh	r2, [r4, #6]
 8002c02:	4629      	mov	r1, r5
 8002c04:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8002c06:	f000 fb9a 	bl	800333e <USBD_CtlSendData>
      break;
 8002c0a:	e006      	b.n	8002c1a <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8002c0c:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002c10:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8002c14:	4629      	mov	r1, r5
 8002c16:	f000 fba7 	bl	8003368 <USBD_CtlPrepareRx>
}
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002c1e:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8002c22:	6884      	ldr	r4, [r0, #8]
 8002c24:	4618      	mov	r0, r3
 8002c26:	47a0      	blx	r4
 8002c28:	e7f7      	b.n	8002c1a <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8002c2a:	784b      	ldrb	r3, [r1, #1]
 8002c2c:	2b0a      	cmp	r3, #10
 8002c2e:	d1f4      	bne.n	8002c1a <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8002c30:	2201      	movs	r2, #1
 8002c32:	4901      	ldr	r1, [pc, #4]	; (8002c38 <USBD_CDC_Setup+0x64>)
 8002c34:	e7e7      	b.n	8002c06 <USBD_CDC_Setup+0x32>
 8002c36:	bf00      	nop
 8002c38:	20000354 	.word	0x20000354

08002c3c <USBD_CDC_DeInit>:
{
 8002c3c:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8002c3e:	2181      	movs	r1, #129	; 0x81
{
 8002c40:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002c42:	f001 f877 	bl	8003d34 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002c46:	2101      	movs	r1, #1
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f001 f873 	bl	8003d34 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002c4e:	2182      	movs	r1, #130	; 0x82
 8002c50:	4620      	mov	r0, r4
 8002c52:	f001 f86f 	bl	8003d34 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002c56:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002c5a:	b153      	cbz	r3, 8002c72 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002c5c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002c64:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002c68:	f001 f97a 	bl	8003f60 <free>
    pdev->pClassData = NULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002c72:	2000      	movs	r0, #0
 8002c74:	bd10      	pop	{r4, pc}

08002c76 <USBD_CDC_Init>:
{
 8002c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002c78:	7c03      	ldrb	r3, [r0, #16]
{
 8002c7a:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002c7c:	bb7b      	cbnz	r3, 8002cde <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8002c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c82:	2202      	movs	r2, #2
 8002c84:	2181      	movs	r1, #129	; 0x81
 8002c86:	f001 f845 	bl	8003d14 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002c8e:	2202      	movs	r2, #2
 8002c90:	2101      	movs	r1, #1
 8002c92:	4620      	mov	r0, r4
 8002c94:	f001 f83e 	bl	8003d14 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002c98:	2308      	movs	r3, #8
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	2182      	movs	r1, #130	; 0x82
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f001 f838 	bl	8003d14 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002ca4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002ca8:	f001 f952 	bl	8003f50 <malloc>
 8002cac:	4606      	mov	r6, r0
 8002cae:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002cb2:	b320      	cbz	r0, 8002cfe <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002cb4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002cbc:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8002cbe:	2500      	movs	r5, #0
 8002cc0:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002cc4:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002cc8:	b987      	cbnz	r7, 8002cec <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8002cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cce:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f001 f887 	bl	8003de8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002cda:	4638      	mov	r0, r7
 8002cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8002cde:	2340      	movs	r3, #64	; 0x40
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	2181      	movs	r1, #129	; 0x81
 8002ce4:	f001 f816 	bl	8003d14 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002ce8:	2340      	movs	r3, #64	; 0x40
 8002cea:	e7d0      	b.n	8002c8e <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8002cec:	2340      	movs	r3, #64	; 0x40
 8002cee:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f001 f877 	bl	8003de8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8002cfe:	2001      	movs	r0, #1
}
 8002d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d02 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002d02:	b119      	cbz	r1, 8002d0c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002d04:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002d08:	2000      	movs	r0, #0
 8002d0a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002d0c:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8002d0e:	4770      	bx	lr

08002d10 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002d10:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002d14:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002d16:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002d1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002d1e:	4770      	bx	lr

08002d20 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002d20:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002d24:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002d26:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002d2a:	4770      	bx	lr

08002d2c <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002d2c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002d30:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 8002d32:	b172      	cbz	r2, 8002d52 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8002d34:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002d38:	2301      	movs	r3, #1
 8002d3a:	b964      	cbnz	r4, 8002d56 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8002d3c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8002d40:	2181      	movs	r1, #129	; 0x81
 8002d42:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8002d46:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8002d4a:	f001 f83f 	bl	8003dcc <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8002d4e:	4620      	mov	r0, r4
 8002d50:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8002d52:	2002      	movs	r0, #2
 8002d54:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8002d56:	4618      	mov	r0, r3
  }
}
 8002d58:	bd10      	pop	{r4, pc}

08002d5a <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002d5a:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002d5e:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002d60:	b162      	cbz	r2, 8002d7c <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002d62:	7c04      	ldrb	r4, [r0, #16]
 8002d64:	b944      	cbnz	r4, 8002d78 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002d66:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002d6a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002d6e:	2101      	movs	r1, #1
 8002d70:	f001 f83a 	bl	8003de8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002d74:	2000      	movs	r0, #0
 8002d76:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002d78:	2340      	movs	r3, #64	; 0x40
 8002d7a:	e7f6      	b.n	8002d6a <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002d7c:	2002      	movs	r0, #2
  }
}
 8002d7e:	bd10      	pop	{r4, pc}

08002d80 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002d80:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002d82:	b180      	cbz	r0, 8002da6 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002d84:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d88:	b113      	cbz	r3, 8002d90 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002d90:	b109      	cbz	r1, 8002d96 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002d92:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002d96:	2301      	movs	r3, #1
 8002d98:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8002d9c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002d9e:	f000 ff75 	bl	8003c8c <USBD_LL_Init>
  
  return USBD_OK; 
 8002da2:	2000      	movs	r0, #0
 8002da4:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002da6:	2002      	movs	r0, #2
}
 8002da8:	bd08      	pop	{r3, pc}

08002daa <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002daa:	b119      	cbz	r1, 8002db4 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002dac:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002db0:	2000      	movs	r0, #0
 8002db2:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002db4:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002db6:	4770      	bx	lr

08002db8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002db8:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002dba:	f000 ff9d 	bl	8003cf8 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	bd08      	pop	{r3, pc}

08002dc2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002dc2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002dc4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002dc8:	b90b      	cbnz	r3, 8002dce <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002dca:	2002      	movs	r0, #2
 8002dcc:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4798      	blx	r3
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d1f9      	bne.n	8002dca <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002dd6:	bd08      	pop	{r3, pc}

08002dd8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002dd8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002dda:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4798      	blx	r3
  return USBD_OK;
}
 8002de2:	2000      	movs	r0, #0
 8002de4:	bd08      	pop	{r3, pc}

08002de6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002de6:	b538      	push	{r3, r4, r5, lr}
 8002de8:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002dea:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8002dee:	4628      	mov	r0, r5
 8002df0:	f000 fa75 	bl	80032de <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002df4:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002df6:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002dfa:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002dfe:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002e02:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002e06:	f001 031f 	and.w	r3, r1, #31
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d00e      	beq.n	8002e2c <USBD_LL_SetupStage+0x46>
 8002e0e:	d307      	bcc.n	8002e20 <USBD_LL_SetupStage+0x3a>
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d010      	beq.n	8002e36 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002e14:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f000 ff99 	bl	8003d50 <USBD_LL_StallEP>
    break;
 8002e1e:	e003      	b.n	8002e28 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002e20:	4629      	mov	r1, r5
 8002e22:	4620      	mov	r0, r4
 8002e24:	f000 f8e6 	bl	8002ff4 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002e28:	2000      	movs	r0, #0
 8002e2a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f000 f9da 	bl	80031e8 <USBD_StdItfReq>
    break;
 8002e34:	e7f8      	b.n	8002e28 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002e36:	4629      	mov	r1, r5
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f000 f9ed 	bl	8003218 <USBD_StdEPReq>
    break;
 8002e3e:	e7f3      	b.n	8002e28 <USBD_LL_SetupStage+0x42>

08002e40 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	4604      	mov	r4, r0
 8002e44:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002e46:	bb11      	cbnz	r1, 8002e8e <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002e48:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d10f      	bne.n	8002e70 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8002e50:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002e54:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d90b      	bls.n	8002e74 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002e5c:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	bf28      	it	cs
 8002e62:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002e64:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002e68:	b292      	uxth	r2, r2
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	f000 fa8b 	bl	8003386 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002e70:	2000      	movs	r0, #0
 8002e72:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002e74:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	b123      	cbz	r3, 8002e86 <USBD_LL_DataOutStage+0x46>
 8002e7c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002e80:	2a03      	cmp	r2, #3
 8002e82:	d100      	bne.n	8002e86 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8002e84:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002e86:	4620      	mov	r0, r4
 8002e88:	f000 fa85 	bl	8003396 <USBD_CtlSendStatus>
 8002e8c:	e7f0      	b.n	8002e70 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002e8e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0eb      	beq.n	8002e70 <USBD_LL_DataOutStage+0x30>
 8002e98:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002e9c:	2a03      	cmp	r2, #3
 8002e9e:	d1e7      	bne.n	8002e70 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002ea0:	4798      	blx	r3
 8002ea2:	e7e5      	b.n	8002e70 <USBD_LL_DataOutStage+0x30>

08002ea4 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002eaa:	460e      	mov	r6, r1
 8002eac:	2900      	cmp	r1, #0
 8002eae:	d13d      	bne.n	8002f2c <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002eb0:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002eb4:	2a02      	cmp	r2, #2
 8002eb6:	d10f      	bne.n	8002ed8 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002eb8:	69c5      	ldr	r5, [r0, #28]
 8002eba:	6a02      	ldr	r2, [r0, #32]
 8002ebc:	4295      	cmp	r5, r2
 8002ebe:	d914      	bls.n	8002eea <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002ec0:	1aaa      	subs	r2, r5, r2
 8002ec2:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	b292      	uxth	r2, r2
 8002ec8:	f000 fa46 	bl	8003358 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002ecc:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f000 ff88 	bl	8003de8 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002ed8:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d102      	bne.n	8002ee6 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002eea:	6983      	ldr	r3, [r0, #24]
 8002eec:	fbb3 f5f2 	udiv	r5, r3, r2
 8002ef0:	fb02 3515 	mls	r5, r2, r5, r3
 8002ef4:	b965      	cbnz	r5, 8002f10 <USBD_LL_DataInStage+0x6c>
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d80a      	bhi.n	8002f10 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002efa:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d206      	bcs.n	8002f10 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002f02:	462a      	mov	r2, r5
 8002f04:	f000 fa28 	bl	8003358 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002f08:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002f0c:	462b      	mov	r3, r5
 8002f0e:	e7de      	b.n	8002ece <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002f10:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	b12b      	cbz	r3, 8002f24 <USBD_LL_DataInStage+0x80>
 8002f18:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002f1c:	2a03      	cmp	r2, #3
 8002f1e:	d101      	bne.n	8002f24 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002f20:	4620      	mov	r0, r4
 8002f22:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002f24:	4620      	mov	r0, r4
 8002f26:	f000 fa41 	bl	80033ac <USBD_CtlReceiveStatus>
 8002f2a:	e7d5      	b.n	8002ed8 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002f2c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0d7      	beq.n	8002ee6 <USBD_LL_DataInStage+0x42>
 8002f36:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002f3a:	2a03      	cmp	r2, #3
 8002f3c:	d1d3      	bne.n	8002ee6 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002f3e:	4798      	blx	r3
 8002f40:	e7d1      	b.n	8002ee6 <USBD_LL_DataInStage+0x42>

08002f42 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002f42:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002f44:	2200      	movs	r2, #0
{
 8002f46:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8002f48:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002f4a:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002f4c:	2340      	movs	r3, #64	; 0x40
 8002f4e:	f000 fee1 	bl	8003d14 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002f52:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002f54:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2180      	movs	r1, #128	; 0x80
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f000 fed9 	bl	8003d14 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002f68:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002f6c:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002f6e:	b12b      	cbz	r3, 8002f7c <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002f70:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002f74:	7921      	ldrb	r1, [r4, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4620      	mov	r0, r4
 8002f7a:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	bd38      	pop	{r3, r4, r5, pc}

08002f80 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002f80:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002f82:	2000      	movs	r0, #0
 8002f84:	4770      	bx	lr

08002f86 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002f86:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002f8a:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002f8e:	2304      	movs	r3, #4
 8002f90:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002f94:	2000      	movs	r0, #0
 8002f96:	4770      	bx	lr

08002f98 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002f98:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002f9c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	4770      	bx	lr

08002fa4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002fa4:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002fa6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002faa:	2a03      	cmp	r2, #3
 8002fac:	d104      	bne.n	8002fb8 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002fae:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	b103      	cbz	r3, 8002fb8 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002fb6:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002fb8:	2000      	movs	r0, #0
 8002fba:	bd08      	pop	{r3, pc}

08002fbc <USBD_LL_IsoINIncomplete>:
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	4770      	bx	lr

08002fc0 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	4770      	bx	lr

08002fc4 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	4770      	bx	lr

08002fc8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8002fc8:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002fd0:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8002fd4:	7901      	ldrb	r1, [r0, #4]
 8002fd6:	6852      	ldr	r2, [r2, #4]
 8002fd8:	4790      	blx	r2
   
  return USBD_OK;
}
 8002fda:	2000      	movs	r0, #0
 8002fdc:	bd08      	pop	{r3, pc}

08002fde <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002fde:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002fe0:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002fe2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8002fe4:	f000 feb4 	bl	8003d50 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002fe8:	4620      	mov	r0, r4
 8002fea:	2100      	movs	r1, #0
}
 8002fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002ff0:	f000 beae 	b.w	8003d50 <USBD_LL_StallEP>

08002ff4 <USBD_StdDevReq>:
{
 8002ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002ff6:	784b      	ldrb	r3, [r1, #1]
{
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002ffc:	2b09      	cmp	r3, #9
 8002ffe:	d879      	bhi.n	80030f4 <USBD_StdDevReq+0x100>
 8003000:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003004:	00e500c9 	.word	0x00e500c9
 8003008:	00d90078 	.word	0x00d90078
 800300c:	006d0078 	.word	0x006d0078
 8003010:	0078000a 	.word	0x0078000a
 8003014:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8003018:	884b      	ldrh	r3, [r1, #2]
 800301a:	0a1a      	lsrs	r2, r3, #8
 800301c:	3a01      	subs	r2, #1
 800301e:	2a06      	cmp	r2, #6
 8003020:	d868      	bhi.n	80030f4 <USBD_StdDevReq+0x100>
 8003022:	e8df f002 	tbb	[pc, r2]
 8003026:	1c04      	.short	0x1c04
 8003028:	49676729 	.word	0x49676729
 800302c:	52          	.byte	0x52
 800302d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800302e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003032:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003034:	7c20      	ldrb	r0, [r4, #16]
 8003036:	f10d 0106 	add.w	r1, sp, #6
 800303a:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800303c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003040:	2a00      	cmp	r2, #0
 8003042:	d067      	beq.n	8003114 <USBD_StdDevReq+0x120>
 8003044:	88eb      	ldrh	r3, [r5, #6]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d064      	beq.n	8003114 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800304a:	429a      	cmp	r2, r3
 800304c:	bf28      	it	cs
 800304e:	461a      	movcs	r2, r3
 8003050:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8003054:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8003056:	4620      	mov	r0, r4
 8003058:	f000 f971 	bl	800333e <USBD_CtlSendData>
 800305c:	e05a      	b.n	8003114 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800305e:	7c02      	ldrb	r2, [r0, #16]
 8003060:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003064:	b932      	cbnz	r2, 8003074 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003068:	f10d 0006 	add.w	r0, sp, #6
 800306c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800306e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003070:	7043      	strb	r3, [r0, #1]
 8003072:	e7e3      	b.n	800303c <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	e7f7      	b.n	8003068 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b05      	cmp	r3, #5
 800307c:	d83a      	bhi.n	80030f4 <USBD_StdDevReq+0x100>
 800307e:	e8df f003 	tbb	[pc, r3]
 8003082:	0703      	.short	0x0703
 8003084:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003088:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	e7d1      	b.n	8003034 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003090:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	e7cd      	b.n	8003034 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003098:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	e7c9      	b.n	8003034 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80030a0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	e7c5      	b.n	8003034 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80030a8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	e7c1      	b.n	8003034 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80030b0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	e7bd      	b.n	8003034 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80030b8:	7c03      	ldrb	r3, [r0, #16]
 80030ba:	b9db      	cbnz	r3, 80030f4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80030bc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030c0:	f10d 0006 	add.w	r0, sp, #6
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	4798      	blx	r3
 80030c8:	e7b8      	b.n	800303c <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80030ca:	7c03      	ldrb	r3, [r0, #16]
 80030cc:	b993      	cbnz	r3, 80030f4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80030ce:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030d2:	f10d 0006 	add.w	r0, sp, #6
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80030da:	2307      	movs	r3, #7
 80030dc:	e7c8      	b.n	8003070 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80030de:	888b      	ldrh	r3, [r1, #4]
 80030e0:	b943      	cbnz	r3, 80030f4 <USBD_StdDevReq+0x100>
 80030e2:	88cb      	ldrh	r3, [r1, #6]
 80030e4:	b933      	cbnz	r3, 80030f4 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80030e6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80030ea:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80030ec:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80030ee:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80030f2:	d103      	bne.n	80030fc <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80030f4:	4620      	mov	r0, r4
 80030f6:	f7ff ff72 	bl	8002fde <USBD_CtlError.constprop.0>
    break;
 80030fa:	e00b      	b.n	8003114 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80030fc:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003100:	4629      	mov	r1, r5
 8003102:	f000 fe55 	bl	8003db0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003106:	4620      	mov	r0, r4
 8003108:	f000 f945 	bl	8003396 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800310c:	b12d      	cbz	r5, 800311a <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800310e:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003110:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8003114:	2000      	movs	r0, #0
 8003116:	b003      	add	sp, #12
 8003118:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800311a:	2301      	movs	r3, #1
 800311c:	e7f8      	b.n	8003110 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800311e:	7889      	ldrb	r1, [r1, #2]
 8003120:	4d30      	ldr	r5, [pc, #192]	; (80031e4 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003122:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8003124:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003126:	d8e5      	bhi.n	80030f4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8003128:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800312c:	2b02      	cmp	r3, #2
 800312e:	d00c      	beq.n	800314a <USBD_StdDevReq+0x156>
 8003130:	2b03      	cmp	r3, #3
 8003132:	d1df      	bne.n	80030f4 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8003134:	b9b1      	cbnz	r1, 8003164 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003136:	2302      	movs	r3, #2
 8003138:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800313c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800313e:	f7ff fe4b 	bl	8002dd8 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8003142:	4620      	mov	r0, r4
 8003144:	f000 f927 	bl	8003396 <USBD_CtlSendStatus>
 8003148:	e7e4      	b.n	8003114 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800314a:	2900      	cmp	r1, #0
 800314c:	d0f9      	beq.n	8003142 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800314e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003150:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003152:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003154:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003158:	4620      	mov	r0, r4
 800315a:	f7ff fe32 	bl	8002dc2 <USBD_SetClassConfig>
 800315e:	2802      	cmp	r0, #2
 8003160:	d1ef      	bne.n	8003142 <USBD_StdDevReq+0x14e>
 8003162:	e7c7      	b.n	80030f4 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8003164:	6841      	ldr	r1, [r0, #4]
 8003166:	2901      	cmp	r1, #1
 8003168:	d0eb      	beq.n	8003142 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800316a:	b2c9      	uxtb	r1, r1
 800316c:	f7ff fe34 	bl	8002dd8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003170:	7829      	ldrb	r1, [r5, #0]
 8003172:	6061      	str	r1, [r4, #4]
 8003174:	e7f0      	b.n	8003158 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8003176:	88ca      	ldrh	r2, [r1, #6]
 8003178:	2a01      	cmp	r2, #1
 800317a:	d1bb      	bne.n	80030f4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 800317c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003180:	2b02      	cmp	r3, #2
 8003182:	d003      	beq.n	800318c <USBD_StdDevReq+0x198>
 8003184:	2b03      	cmp	r3, #3
 8003186:	d1b5      	bne.n	80030f4 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8003188:	1d01      	adds	r1, r0, #4
 800318a:	e764      	b.n	8003056 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 800318c:	4601      	mov	r1, r0
 800318e:	2300      	movs	r3, #0
 8003190:	f841 3f08 	str.w	r3, [r1, #8]!
 8003194:	e75f      	b.n	8003056 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8003196:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800319a:	3b02      	subs	r3, #2
 800319c:	2b01      	cmp	r3, #1
 800319e:	d8a9      	bhi.n	80030f4 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80031a0:	2301      	movs	r3, #1
 80031a2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80031a4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80031a8:	b10b      	cbz	r3, 80031ae <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80031aa:	2303      	movs	r3, #3
 80031ac:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80031ae:	2202      	movs	r2, #2
 80031b0:	f104 010c 	add.w	r1, r4, #12
 80031b4:	e74f      	b.n	8003056 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80031b6:	884b      	ldrh	r3, [r1, #2]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d1ab      	bne.n	8003114 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80031bc:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80031c0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80031c4:	4629      	mov	r1, r5
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4620      	mov	r0, r4
 80031ca:	4798      	blx	r3
 80031cc:	e7b9      	b.n	8003142 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80031ce:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80031d2:	3b02      	subs	r3, #2
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d88d      	bhi.n	80030f4 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80031d8:	884b      	ldrh	r3, [r1, #2]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d19a      	bne.n	8003114 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80031de:	2300      	movs	r3, #0
 80031e0:	e7ec      	b.n	80031bc <USBD_StdDevReq+0x1c8>
 80031e2:	bf00      	nop
 80031e4:	20000355 	.word	0x20000355

080031e8 <USBD_StdItfReq>:
{
 80031e8:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80031ea:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80031ee:	2b03      	cmp	r3, #3
{
 80031f0:	4604      	mov	r4, r0
 80031f2:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80031f4:	d10d      	bne.n	8003212 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80031f6:	790b      	ldrb	r3, [r1, #4]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d80a      	bhi.n	8003212 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80031fc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003204:	88eb      	ldrh	r3, [r5, #6]
 8003206:	b913      	cbnz	r3, 800320e <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8003208:	4620      	mov	r0, r4
 800320a:	f000 f8c4 	bl	8003396 <USBD_CtlSendStatus>
}
 800320e:	2000      	movs	r0, #0
 8003210:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8003212:	f7ff fee4 	bl	8002fde <USBD_CtlError.constprop.0>
    break;
 8003216:	e7fa      	b.n	800320e <USBD_StdItfReq+0x26>

08003218 <USBD_StdEPReq>:
{
 8003218:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800321a:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 800321c:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800321e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003222:	2a20      	cmp	r2, #32
{
 8003224:	4604      	mov	r4, r0
 8003226:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003228:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800322a:	d105      	bne.n	8003238 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 800322c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4798      	blx	r3
}
 8003234:	2000      	movs	r0, #0
 8003236:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003238:	784a      	ldrb	r2, [r1, #1]
 800323a:	2a01      	cmp	r2, #1
 800323c:	d01c      	beq.n	8003278 <USBD_StdEPReq+0x60>
 800323e:	d32a      	bcc.n	8003296 <USBD_StdEPReq+0x7e>
 8003240:	2a03      	cmp	r2, #3
 8003242:	d1f7      	bne.n	8003234 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003244:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003248:	2a02      	cmp	r2, #2
 800324a:	d040      	beq.n	80032ce <USBD_StdEPReq+0xb6>
 800324c:	2a03      	cmp	r2, #3
 800324e:	d002      	beq.n	8003256 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8003250:	f7ff fec5 	bl	8002fde <USBD_CtlError.constprop.0>
      break;
 8003254:	e7ee      	b.n	8003234 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003256:	884a      	ldrh	r2, [r1, #2]
 8003258:	b922      	cbnz	r2, 8003264 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800325a:	065e      	lsls	r6, r3, #25
 800325c:	d002      	beq.n	8003264 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800325e:	4619      	mov	r1, r3
 8003260:	f000 fd76 	bl	8003d50 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003264:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003268:	4629      	mov	r1, r5
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4620      	mov	r0, r4
 800326e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003270:	4620      	mov	r0, r4
 8003272:	f000 f890 	bl	8003396 <USBD_CtlSendStatus>
 8003276:	e7dd      	b.n	8003234 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003278:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800327c:	2a02      	cmp	r2, #2
 800327e:	d026      	beq.n	80032ce <USBD_StdEPReq+0xb6>
 8003280:	2a03      	cmp	r2, #3
 8003282:	d1e5      	bne.n	8003250 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003284:	884a      	ldrh	r2, [r1, #2]
 8003286:	2a00      	cmp	r2, #0
 8003288:	d1d4      	bne.n	8003234 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800328a:	0659      	lsls	r1, r3, #25
 800328c:	d0f0      	beq.n	8003270 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800328e:	4619      	mov	r1, r3
 8003290:	f000 fd6c 	bl	8003d6c <USBD_LL_ClearStallEP>
 8003294:	e7e6      	b.n	8003264 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8003296:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800329a:	2a02      	cmp	r2, #2
 800329c:	d017      	beq.n	80032ce <USBD_StdEPReq+0xb6>
 800329e:	2a03      	cmp	r2, #3
 80032a0:	d1d6      	bne.n	8003250 <USBD_StdEPReq+0x38>
 80032a2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80032a6:	f016 0f80 	tst.w	r6, #128	; 0x80
 80032aa:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80032ae:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80032b0:	bf14      	ite	ne
 80032b2:	3514      	addne	r5, #20
 80032b4:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80032b8:	f000 fd66 	bl	8003d88 <USBD_LL_IsStallEP>
 80032bc:	b168      	cbz	r0, 80032da <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80032be:	2301      	movs	r3, #1
 80032c0:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80032c2:	2202      	movs	r2, #2
 80032c4:	4629      	mov	r1, r5
 80032c6:	4620      	mov	r0, r4
 80032c8:	f000 f839 	bl	800333e <USBD_CtlSendData>
      break;
 80032cc:	e7b2      	b.n	8003234 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80032ce:	065a      	lsls	r2, r3, #25
 80032d0:	d0b0      	beq.n	8003234 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80032d2:	4619      	mov	r1, r3
 80032d4:	f000 fd3c 	bl	8003d50 <USBD_LL_StallEP>
 80032d8:	e7ac      	b.n	8003234 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80032da:	6028      	str	r0, [r5, #0]
 80032dc:	e7f1      	b.n	80032c2 <USBD_StdEPReq+0xaa>

080032de <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80032de:	780b      	ldrb	r3, [r1, #0]
 80032e0:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80032e2:	784b      	ldrb	r3, [r1, #1]
 80032e4:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80032e6:	78ca      	ldrb	r2, [r1, #3]
 80032e8:	788b      	ldrb	r3, [r1, #2]
 80032ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80032ee:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80032f0:	794a      	ldrb	r2, [r1, #5]
 80032f2:	790b      	ldrb	r3, [r1, #4]
 80032f4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80032f8:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80032fa:	79ca      	ldrb	r2, [r1, #7]
 80032fc:	798b      	ldrb	r3, [r1, #6]
 80032fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003302:	80c3      	strh	r3, [r0, #6]
 8003304:	4770      	bx	lr

08003306 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003306:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003308:	b188      	cbz	r0, 800332e <USBD_GetString+0x28>
 800330a:	4605      	mov	r5, r0
 800330c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800330e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2c00      	cmp	r4, #0
 8003316:	d1f9      	bne.n	800330c <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	3302      	adds	r3, #2
 800331c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800331e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003320:	2303      	movs	r3, #3
 8003322:	704b      	strb	r3, [r1, #1]
 8003324:	3801      	subs	r0, #1
 8003326:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8003328:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800332c:	b905      	cbnz	r5, 8003330 <USBD_GetString+0x2a>
 800332e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8003336:	3302      	adds	r3, #2
 8003338:	b2db      	uxtb	r3, r3
 800333a:	548c      	strb	r4, [r1, r2]
 800333c:	e7f4      	b.n	8003328 <USBD_GetString+0x22>

0800333e <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800333e:	b510      	push	{r4, lr}
 8003340:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003342:	2202      	movs	r2, #2
 8003344:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003348:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800334a:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800334c:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800334e:	2100      	movs	r1, #0
 8003350:	f000 fd3c 	bl	8003dcc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003354:	2000      	movs	r0, #0
 8003356:	bd10      	pop	{r4, pc}

08003358 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003358:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800335a:	4613      	mov	r3, r2
 800335c:	460a      	mov	r2, r1
 800335e:	2100      	movs	r1, #0
 8003360:	f000 fd34 	bl	8003dcc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003364:	2000      	movs	r0, #0
 8003366:	bd08      	pop	{r3, pc}

08003368 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003368:	b510      	push	{r4, lr}
 800336a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800336c:	2203      	movs	r2, #3
 800336e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003372:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003376:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8003378:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800337c:	2100      	movs	r1, #0
 800337e:	f000 fd33 	bl	8003de8 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003382:	2000      	movs	r0, #0
 8003384:	bd10      	pop	{r4, pc}

08003386 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003386:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003388:	4613      	mov	r3, r2
 800338a:	460a      	mov	r2, r1
 800338c:	2100      	movs	r1, #0
 800338e:	f000 fd2b 	bl	8003de8 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003392:	2000      	movs	r0, #0
 8003394:	bd08      	pop	{r3, pc}

08003396 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003396:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003398:	2304      	movs	r3, #4
 800339a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800339e:	2300      	movs	r3, #0
 80033a0:	461a      	mov	r2, r3
 80033a2:	4619      	mov	r1, r3
 80033a4:	f000 fd12 	bl	8003dcc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80033a8:	2000      	movs	r0, #0
 80033aa:	bd08      	pop	{r3, pc}

080033ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80033ac:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80033ae:	2305      	movs	r3, #5
 80033b0:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80033b4:	2300      	movs	r3, #0
 80033b6:	461a      	mov	r2, r3
 80033b8:	4619      	mov	r1, r3
 80033ba:	f000 fd15 	bl	8003de8 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80033be:	2000      	movs	r0, #0
 80033c0:	bd08      	pop	{r3, pc}
	...

080033c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033c4:	b510      	push	{r4, lr}
 80033c6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c8:	4b28      	ldr	r3, [pc, #160]	; (800346c <SystemClock_Config+0xa8>)
 80033ca:	2100      	movs	r1, #0
 80033cc:	9101      	str	r1, [sp, #4]
 80033ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033e0:	4b23      	ldr	r3, [pc, #140]	; (8003470 <SystemClock_Config+0xac>)
 80033e2:	9102      	str	r1, [sp, #8]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f2:	9302      	str	r3, [sp, #8]
 80033f4:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033f6:	2301      	movs	r3, #1
 80033f8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033fe:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003400:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003404:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003406:	2308      	movs	r3, #8
 8003408:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800340a:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800340e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003410:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003412:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003414:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003416:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003418:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800341a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800341c:	f7fe fbd2 	bl	8001bc4 <HAL_RCC_OscConfig>
 8003420:	b100      	cbz	r0, 8003424 <SystemClock_Config+0x60>
 8003422:	e7fe      	b.n	8003422 <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003424:	230f      	movs	r3, #15
 8003426:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003428:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800342c:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800342e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003430:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003436:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003438:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800343a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800343c:	f7fe fd72 	bl	8001f24 <HAL_RCC_ClockConfig>
 8003440:	4604      	mov	r4, r0
 8003442:	b100      	cbz	r0, 8003446 <SystemClock_Config+0x82>
 8003444:	e7fe      	b.n	8003444 <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003446:	f7fe fe07 	bl	8002058 <HAL_RCC_GetHCLKFreq>
 800344a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800344e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003452:	f7fd fe53 	bl	80010fc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003456:	2004      	movs	r0, #4
 8003458:	f7fd fe66 	bl	8001128 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800345c:	4622      	mov	r2, r4
 800345e:	4621      	mov	r1, r4
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	f7fd fe0a 	bl	800107c <HAL_NVIC_SetPriority>
}
 8003468:	b014      	add	sp, #80	; 0x50
 800346a:	bd10      	pop	{r4, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	40007000 	.word	0x40007000

08003474 <main>:
	motors[0].dirPin = Mot_1_Dir_Pin;
 8003474:	4aab      	ldr	r2, [pc, #684]	; (8003724 <main+0x2b0>)
	motors[2].dirPinPort = Mot_3_Dir_GPIO_Port;
 8003476:	4eac      	ldr	r6, [pc, #688]	; (8003728 <main+0x2b4>)
	motors[0].dirPinPort = Mot_1_Dir_GPIO_Port;
 8003478:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8003744 <main+0x2d0>
	motors[1].dirPinPort = Mot_2_Dir_GPIO_Port;
 800347c:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8003748 <main+0x2d4>
{
 8003480:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	motors[3].stepPin = Mot_4_Step_Pin;
 8003484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003488:	f8a2 1044 	strh.w	r1, [r2, #68]	; 0x44
	motors[4].dirPin = Mot_5_Dir_Pin;
 800348c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003490:	f8a2 1050 	strh.w	r1, [r2, #80]	; 0x50
	motors[2].dirPin = Mot_3_Dir_Pin;
 8003494:	f44f 7380 	mov.w	r3, #256	; 0x100
	motors[4].stepPin = Mot_5_Step_Pin;
 8003498:	f44f 6100 	mov.w	r1, #2048	; 0x800
	motors[2].dirPin = Mot_3_Dir_Pin;
 800349c:	8513      	strh	r3, [r2, #40]	; 0x28
	motors[4].stepPin = Mot_5_Step_Pin;
 800349e:	f8a2 1058 	strh.w	r1, [r2, #88]	; 0x58
	motors[2].stepPin = Mot_3_Step_Pin;
 80034a2:	2380      	movs	r3, #128	; 0x80
	motors[5].dirPin = Mot_6_Dir_Pin;
 80034a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	motors[0].pos = 0;
 80034a8:	2400      	movs	r4, #0
	motors[1].stepPin = Mot_2_Step_Pin;
 80034aa:	2501      	movs	r5, #1
	motors[1].dirPin = Mot_2_Dir_Pin;
 80034ac:	2702      	movs	r7, #2
	motors[0].dirPin = Mot_1_Dir_Pin;
 80034ae:	f04f 0b08 	mov.w	fp, #8
	motors[0].stepPin = Mot_1_Step_Pin;
 80034b2:	f04f 0a04 	mov.w	sl, #4
	motors[2].stepPin = Mot_3_Step_Pin;
 80034b6:	8613      	strh	r3, [r2, #48]	; 0x30
	motors[5].dirPin = Mot_6_Dir_Pin;
 80034b8:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
	motors[3].dirPin = Mot_4_Dir_Pin;
 80034bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
	motors[5].stepPin = Mot_6_Step_Pin;
 80034c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{
 80034c4:	b08f      	sub	sp, #60	; 0x3c
	motors[3].dirPin = Mot_4_Dir_Pin;
 80034c6:	8793      	strh	r3, [r2, #60]	; 0x3c
	motors[5].stepPin = Mot_6_Step_Pin;
 80034c8:	f8a2 106c 	strh.w	r1, [r2, #108]	; 0x6c
	motors[0].dirPin = Mot_1_Dir_Pin;
 80034cc:	f8a2 b000 	strh.w	fp, [r2]
	motors[1].stepPin = Mot_2_Step_Pin;
 80034d0:	8395      	strh	r5, [r2, #28]
	motors[0].dirPinPort = Mot_1_Dir_GPIO_Port;
 80034d2:	f8c2 9004 	str.w	r9, [r2, #4]
	motors[0].stepPin = Mot_1_Step_Pin;
 80034d6:	f8a2 a008 	strh.w	sl, [r2, #8]
	motors[0].stepPinPort = Mot_1_Step_GPIO_Port;
 80034da:	f8c2 900c 	str.w	r9, [r2, #12]
	motors[0].pos = 0;
 80034de:	6114      	str	r4, [r2, #16]
	motors[1].dirPin = Mot_2_Dir_Pin;
 80034e0:	8297      	strh	r7, [r2, #20]
	motors[1].dirPinPort = Mot_2_Dir_GPIO_Port;
 80034e2:	f8c2 8018 	str.w	r8, [r2, #24]
	motors[1].stepPinPort = Mot_2_Step_GPIO_Port;
 80034e6:	f8c2 8020 	str.w	r8, [r2, #32]
	motors[1].pos = 0;
 80034ea:	6254      	str	r4, [r2, #36]	; 0x24
	motors[2].dirPinPort = Mot_3_Dir_GPIO_Port;
 80034ec:	62d6      	str	r6, [r2, #44]	; 0x2c
	motors[2].stepPinPort = Mot_3_Step_GPIO_Port;
 80034ee:	6356      	str	r6, [r2, #52]	; 0x34
	motors[2].pos = 0;
 80034f0:	6394      	str	r4, [r2, #56]	; 0x38
	motors[3].dirPinPort = Mot_4_Dir_GPIO_Port;
 80034f2:	6416      	str	r6, [r2, #64]	; 0x40
	motors[3].stepPinPort = Mot_4_Step_GPIO_Port;
 80034f4:	6496      	str	r6, [r2, #72]	; 0x48
	motors[3].pos = 0;
 80034f6:	64d4      	str	r4, [r2, #76]	; 0x4c
	motors[4].dirPinPort = Mot_5_Dir_GPIO_Port;
 80034f8:	6556      	str	r6, [r2, #84]	; 0x54
	motors[4].stepPinPort = Mot_5_Step_GPIO_Port;
 80034fa:	65d6      	str	r6, [r2, #92]	; 0x5c
	motors[4].pos = 0;
 80034fc:	6614      	str	r4, [r2, #96]	; 0x60
	motors[5].dirPinPort = Mot_6_Dir_GPIO_Port;
 80034fe:	6696      	str	r6, [r2, #104]	; 0x68
	motors[5].stepPinPort = Mot_6_Step_GPIO_Port;
 8003500:	6716      	str	r6, [r2, #112]	; 0x70
	motors[5].pos = 0;
 8003502:	6754      	str	r4, [r2, #116]	; 0x74
	controllers[0].accErr = 0;
 8003504:	4a89      	ldr	r2, [pc, #548]	; (800372c <main+0x2b8>)
	motors[3].dirPin = Mot_4_Dir_Pin;
 8003506:	9301      	str	r3, [sp, #4]
	controllers[0].accErr = 0;
 8003508:	6094      	str	r4, [r2, #8]
	controllers[0].direction = MOT_DIR_POS;
 800350a:	7115      	strb	r5, [r2, #4]
	controllers[2].direction = MOT_DIR_POS;
 800350c:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
	controllers[4].direction = MOT_DIR_POS;
 8003510:	f882 5044 	strb.w	r5, [r2, #68]	; 0x44
	controllers[0].deltaPos = 0;
 8003514:	6014      	str	r4, [r2, #0]
	controllers[0].targetPos = 0;
 8003516:	60d4      	str	r4, [r2, #12]
	controllers[1].accErr = 0;
 8003518:	6194      	str	r4, [r2, #24]
	controllers[1].deltaPos = 0;
 800351a:	6114      	str	r4, [r2, #16]
	controllers[1].direction = MOT_DIR_NEG;
 800351c:	7514      	strb	r4, [r2, #20]
	controllers[1].targetPos = 0;
 800351e:	61d4      	str	r4, [r2, #28]
	controllers[2].accErr = 0;
 8003520:	6294      	str	r4, [r2, #40]	; 0x28
	controllers[2].deltaPos = 0;
 8003522:	6214      	str	r4, [r2, #32]
	controllers[2].targetPos = 0;
 8003524:	62d4      	str	r4, [r2, #44]	; 0x2c
	controllers[3].accErr = 0;
 8003526:	6394      	str	r4, [r2, #56]	; 0x38
	controllers[3].deltaPos = 0;
 8003528:	6314      	str	r4, [r2, #48]	; 0x30
	controllers[3].direction = MOT_DIR_NEG;
 800352a:	f882 4034 	strb.w	r4, [r2, #52]	; 0x34
	controllers[3].targetPos = 0;
 800352e:	63d4      	str	r4, [r2, #60]	; 0x3c
	controllers[4].accErr = 0;
 8003530:	6494      	str	r4, [r2, #72]	; 0x48
	controllers[4].deltaPos = 0;
 8003532:	6414      	str	r4, [r2, #64]	; 0x40
	controllers[4].targetPos = 0;
 8003534:	64d4      	str	r4, [r2, #76]	; 0x4c
	controllers[5].accErr = 0;
 8003536:	6594      	str	r4, [r2, #88]	; 0x58
	controllers[5].deltaPos = 0;
 8003538:	6514      	str	r4, [r2, #80]	; 0x50
	controllers[5].direction = MOT_DIR_NEG;
 800353a:	f882 4054 	strb.w	r4, [r2, #84]	; 0x54
	controllers[5].targetPos = 0;
 800353e:	65d4      	str	r4, [r2, #92]	; 0x5c
  HAL_Init();
 8003540:	f7fd fd4a 	bl	8000fd8 <HAL_Init>
  SystemClock_Config();
 8003544:	f7ff ff3e 	bl	80033c4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003548:	4a79      	ldr	r2, [pc, #484]	; (8003730 <main+0x2bc>)
 800354a:	9403      	str	r4, [sp, #12]
 800354c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800354e:	f041 0110 	orr.w	r1, r1, #16
 8003552:	6311      	str	r1, [r2, #48]	; 0x30
 8003554:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003556:	f001 0110 	and.w	r1, r1, #16
 800355a:	9103      	str	r1, [sp, #12]
 800355c:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800355e:	9404      	str	r4, [sp, #16]
 8003560:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003562:	ea41 010a 	orr.w	r1, r1, sl
 8003566:	6311      	str	r1, [r2, #48]	; 0x30
 8003568:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800356a:	ea01 010a 	and.w	r1, r1, sl
 800356e:	9104      	str	r1, [sp, #16]
 8003570:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003572:	9405      	str	r4, [sp, #20]
 8003574:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003576:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800357a:	6311      	str	r1, [r2, #48]	; 0x30
 800357c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800357e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003582:	9105      	str	r1, [sp, #20]
 8003584:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003586:	9406      	str	r4, [sp, #24]
 8003588:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800358a:	4329      	orrs	r1, r5
 800358c:	6311      	str	r1, [r2, #48]	; 0x30
 800358e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003590:	4029      	ands	r1, r5
 8003592:	9106      	str	r1, [sp, #24]
 8003594:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003596:	9407      	str	r4, [sp, #28]
 8003598:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800359a:	4339      	orrs	r1, r7
 800359c:	6311      	str	r1, [r2, #48]	; 0x30
 800359e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80035a0:	4039      	ands	r1, r7
 80035a2:	9107      	str	r1, [sp, #28]
 80035a4:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035a6:	9408      	str	r4, [sp, #32]
 80035a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80035aa:	ea41 010b 	orr.w	r1, r1, fp
 80035ae:	6311      	str	r1, [r2, #48]	; 0x30
 80035b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035b2:	ea02 020b 	and.w	r2, r2, fp
 80035b6:	9208      	str	r2, [sp, #32]
 80035b8:	9a08      	ldr	r2, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|Mot_3_Step_Pin|Mot_3_Dir_Pin|Mot_4_Step_Pin 
 80035ba:	f647 7188 	movw	r1, #32648	; 0x7f88
 80035be:	4622      	mov	r2, r4
 80035c0:	4630      	mov	r0, r6
 80035c2:	f7fd fea3 	bl	800130c <HAL_GPIO_WritePin>
                          |Mot_4_Dir_Pin|Mot_5_Step_Pin|Mot_5_Dir_Pin|Mot_6_Step_Pin 
                          |Mot_6_Dir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80035c6:	462a      	mov	r2, r5
 80035c8:	4629      	mov	r1, r5
 80035ca:	485a      	ldr	r0, [pc, #360]	; (8003734 <main+0x2c0>)
 80035cc:	f7fd fe9e 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Mot_1_Step_Pin|Mot_1_Dir_Pin, GPIO_PIN_RESET);
 80035d0:	4622      	mov	r2, r4
 80035d2:	210c      	movs	r1, #12
 80035d4:	4648      	mov	r0, r9
 80035d6:	f7fd fe99 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_2_Step_Pin|Mot_2_Dir_Pin, GPIO_PIN_RESET);
 80035da:	4622      	mov	r2, r4
 80035dc:	2103      	movs	r1, #3
 80035de:	4640      	mov	r0, r8
 80035e0:	f7fd fe94 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80035e4:	4622      	mov	r2, r4
 80035e6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80035ea:	4853      	ldr	r0, [pc, #332]	; (8003738 <main+0x2c4>)
 80035ec:	f7fd fe8e 	bl	800130c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin Mot_3_Step_Pin Mot_3_Dir_Pin Mot_4_Step_Pin 
                           Mot_4_Dir_Pin Mot_5_Step_Pin Mot_5_Dir_Pin Mot_6_Step_Pin 
                           Mot_6_Dir_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|Mot_3_Step_Pin|Mot_3_Dir_Pin|Mot_4_Step_Pin 
 80035f0:	f647 7288 	movw	r2, #32648	; 0x7f88
                          |Mot_4_Dir_Pin|Mot_5_Step_Pin|Mot_5_Dir_Pin|Mot_6_Step_Pin 
                          |Mot_6_Dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035f4:	a909      	add	r1, sp, #36	; 0x24
 80035f6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|Mot_3_Step_Pin|Mot_3_Dir_Pin|Mot_4_Step_Pin 
 80035f8:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035fa:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fe:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003600:	f7fd fda4 	bl	800114c <HAL_GPIO_Init>
  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003604:	a909      	add	r1, sp, #36	; 0x24
 8003606:	484b      	ldr	r0, [pc, #300]	; (8003734 <main+0x2c0>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003608:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003610:	f7fd fd9c 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003614:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003618:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800361a:	f04f 0b05 	mov.w	fp, #5
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800361e:	4845      	ldr	r0, [pc, #276]	; (8003734 <main+0x2c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003620:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003624:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003626:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800362a:	f7fd fd8f 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800362e:	4b43      	ldr	r3, [pc, #268]	; (800373c <main+0x2c8>)
 8003630:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003632:	a909      	add	r1, sp, #36	; 0x24
 8003634:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = B1_Pin;
 8003636:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800363a:	f7fd fd87 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_1_Step_Pin Mot_1_Dir_Pin */
  GPIO_InitStruct.Pin = Mot_1_Step_Pin|Mot_1_Dir_Pin;
 800363e:	220c      	movs	r2, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003640:	a909      	add	r1, sp, #36	; 0x24
 8003642:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = Mot_1_Step_Pin|Mot_1_Dir_Pin;
 8003644:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003646:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364c:	f7fd fd7e 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003650:	2210      	movs	r2, #16
 8003652:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003654:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003656:	2206      	movs	r2, #6
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003658:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800365a:	920d      	str	r2, [sp, #52]	; 0x34
 800365c:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365e:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003664:	f7fd fd72 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003668:	21e0      	movs	r1, #224	; 0xe0
 800366a:	9109      	str	r1, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366c:	4648      	mov	r0, r9
 800366e:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003674:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003676:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367a:	f7fd fd67 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_2_Step_Pin Mot_2_Dir_Pin */
  GPIO_InitStruct.Pin = Mot_2_Step_Pin|Mot_2_Dir_Pin;
 800367e:	2103      	movs	r1, #3
 8003680:	9109      	str	r1, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003682:	4640      	mov	r0, r8
 8003684:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003686:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368c:	f7fd fd5e 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003690:	a909      	add	r1, sp, #36	; 0x24
 8003692:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003694:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003698:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800369c:	f7fd fd56 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80036a0:	9b01      	ldr	r3, [sp, #4]
 80036a2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80036a4:	a909      	add	r1, sp, #36	; 0x24
 80036a6:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a8:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ac:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036ae:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80036b2:	f7fd fd4b 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80036b6:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036ba:	a909      	add	r1, sp, #36	; 0x24
 80036bc:	481e      	ldr	r0, [pc, #120]	; (8003738 <main+0x2c4>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80036be:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036c6:	f7fd fd41 	bl	800114c <HAL_GPIO_Init>
  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036ca:	9a00      	ldr	r2, [sp, #0]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036cc:	4819      	ldr	r0, [pc, #100]	; (8003734 <main+0x2c0>)
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036ce:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80036d0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d4:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80036d6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036dc:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036de:	f7fd fd35 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80036e2:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80036e4:	a909      	add	r1, sp, #36	; 0x24
 80036e6:	4814      	ldr	r0, [pc, #80]	; (8003738 <main+0x2c4>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80036e8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036ea:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80036ee:	f7fd fd2d 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80036f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80036f6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f8:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036fa:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fc:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036fe:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003700:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003702:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003704:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003708:	f7fd fd20 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <main+0x2c8>)
  htim6.Instance = TIM6;
 800370e:	4d0c      	ldr	r5, [pc, #48]	; (8003740 <main+0x2cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003710:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003712:	4630      	mov	r0, r6
 8003714:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003716:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800371a:	f7fd fd17 	bl	800114c <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 800371e:	f000 f99f 	bl	8003a60 <MX_USB_DEVICE_Init>
 8003722:	e013      	b.n	800374c <main+0x2d8>
 8003724:	200003c8 	.word	0x200003c8
 8003728:	40021000 	.word	0x40021000
 800372c:	20000368 	.word	0x20000368
 8003730:	40023800 	.word	0x40023800
 8003734:	40020800 	.word	0x40020800
 8003738:	40020c00 	.word	0x40020c00
 800373c:	10120000 	.word	0x10120000
 8003740:	20000440 	.word	0x20000440
 8003744:	40020000 	.word	0x40020000
 8003748:	40020400 	.word	0x40020400
  htim6.Init.Prescaler = 84-1;
 800374c:	4a0b      	ldr	r2, [pc, #44]	; (800377c <main+0x308>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800374e:	60ac      	str	r4, [r5, #8]
  htim6.Init.Prescaler = 84-1;
 8003750:	2353      	movs	r3, #83	; 0x53
 8003752:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003756:	4628      	mov	r0, r5
  htim6.Init.Period = 10;
 8003758:	230a      	movs	r3, #10
 800375a:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800375c:	f7fe fd98 	bl	8002290 <HAL_TIM_Base_Init>
 8003760:	b100      	cbz	r0, 8003764 <main+0x2f0>
 8003762:	e7fe      	b.n	8003762 <main+0x2ee>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003764:	9009      	str	r0, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003766:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003768:	a909      	add	r1, sp, #36	; 0x24
 800376a:	4628      	mov	r0, r5
 800376c:	f7fe fdaa 	bl	80022c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003770:	b100      	cbz	r0, 8003774 <main+0x300>
 8003772:	e7fe      	b.n	8003772 <main+0x2fe>
	HAL_TIM_Base_Start_IT(&htim6); //start the interrupts
 8003774:	4628      	mov	r0, r5
 8003776:	f7fe fc75 	bl	8002064 <HAL_TIM_Base_Start_IT>
 800377a:	e7fe      	b.n	800377a <main+0x306>
 800377c:	40001000 	.word	0x40001000

08003780 <Step>:

}

/* USER CODE BEGIN 4 */

void Step(uint8_t mot, GPIO_PinState dir) {
 8003780:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(motors[mot].dirPinPort, motors[mot].dirPin, dir); //set direction
 8003782:	2314      	movs	r3, #20
void Step(uint8_t mot, GPIO_PinState dir) {
 8003784:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(motors[mot].dirPinPort, motors[mot].dirPin, dir); //set direction
 8003786:	490a      	ldr	r1, [pc, #40]	; (80037b0 <Step+0x30>)
 8003788:	4358      	muls	r0, r3
 800378a:	180c      	adds	r4, r1, r0
 800378c:	462a      	mov	r2, r5
 800378e:	5a09      	ldrh	r1, [r1, r0]
 8003790:	6860      	ldr	r0, [r4, #4]
 8003792:	f7fd fdbb 	bl	800130c <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(motors[mot].stepPinPort, motors[mot].stepPin);
 8003796:	8921      	ldrh	r1, [r4, #8]
 8003798:	68e0      	ldr	r0, [r4, #12]
 800379a:	f7fd fdbc 	bl	8001316 <HAL_GPIO_TogglePin>
 800379e:	6923      	ldr	r3, [r4, #16]
	if (dir == MOT_DIR_POS) {
 80037a0:	2d01      	cmp	r5, #1
		motors[mot].pos++;
 80037a2:	bf0c      	ite	eq
 80037a4:	3301      	addeq	r3, #1
	} else {
		motors[mot].pos--;
 80037a6:	f103 33ff 	addne.w	r3, r3, #4294967295
 80037aa:	6123      	str	r3, [r4, #16]
 80037ac:	bd38      	pop	{r3, r4, r5, pc}
 80037ae:	bf00      	nop
 80037b0:	200003c8 	.word	0x200003c8

080037b4 <HAL_TIM_PeriodElapsedCallback>:
	}
}

/* Timer Interrupt Callback Handler */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM6) {
 80037b6:	6802      	ldr	r2, [r0, #0]
 80037b8:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d120      	bne.n	8003800 <HAL_TIM_PeriodElapsedCallback+0x4c>
		if (currMov < movPeriod) {
 80037be:	4d12      	ldr	r5, [pc, #72]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80037c0:	4f12      	ldr	r7, [pc, #72]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80037c2:	6829      	ldr	r1, [r5, #0]
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	4291      	cmp	r1, r2
 80037c8:	d21a      	bcs.n	8003800 <HAL_TIM_PeriodElapsedCallback+0x4c>
 80037ca:	4c11      	ldr	r4, [pc, #68]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80037cc:	2600      	movs	r6, #0
			for (uint8_t mot = 0; mot < 6; ++mot) {
				if (controllers[mot].accErr > 0) {
 80037ce:	68a3      	ldr	r3, [r4, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	b2f0      	uxtb	r0, r6
 80037d4:	dd07      	ble.n	80037e6 <HAL_TIM_PeriodElapsedCallback+0x32>
					Step(mot, controllers[mot].direction);
 80037d6:	7921      	ldrb	r1, [r4, #4]
 80037d8:	f7ff ffd2 	bl	8003780 <Step>
					controllers[mot].accErr -= 2 * movPeriod;
 80037dc:	68a3      	ldr	r3, [r4, #8]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80037e4:	60a3      	str	r3, [r4, #8]
				}
				controllers[mot].accErr += 2 * controllers[mot].deltaPos;
 80037e6:	68a3      	ldr	r3, [r4, #8]
 80037e8:	6822      	ldr	r2, [r4, #0]
 80037ea:	3601      	adds	r6, #1
 80037ec:	eb03 0342 	add.w	r3, r3, r2, lsl #1
			for (uint8_t mot = 0; mot < 6; ++mot) {
 80037f0:	2e06      	cmp	r6, #6
				controllers[mot].accErr += 2 * controllers[mot].deltaPos;
 80037f2:	60a3      	str	r3, [r4, #8]
 80037f4:	f104 0410 	add.w	r4, r4, #16
			for (uint8_t mot = 0; mot < 6; ++mot) {
 80037f8:	d1e9      	bne.n	80037ce <HAL_TIM_PeriodElapsedCallback+0x1a>
			}
			currMov++;
 80037fa:	682b      	ldr	r3, [r5, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	602b      	str	r3, [r5, #0]
 8003800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003802:	bf00      	nop
 8003804:	40001000 	.word	0x40001000
 8003808:	20000118 	.word	0x20000118
 800380c:	2000011c 	.word	0x2000011c
 8003810:	20000368 	.word	0x20000368

08003814 <CDC_ReceiveCallback>:
	}

}

/* Receive USB Virtual COM Port Message */
void CDC_ReceiveCallback(uint8_t *Buf, uint32_t Len) {
 8003814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}


	char *ptr;
	/* Move - extracts a movement command defining the position for
	 * motors to move to and the time taken to reach this position */
	if (strncmp((char*) Buf, "m", 1) == 0) {
 8003818:	7803      	ldrb	r3, [r0, #0]
 800381a:	2b6d      	cmp	r3, #109	; 0x6d
void CDC_ReceiveCallback(uint8_t *Buf, uint32_t Len) {
 800381c:	b09f      	sub	sp, #124	; 0x7c
	if (strncmp((char*) Buf, "m", 1) == 0) {
 800381e:	d144      	bne.n	80038aa <CDC_ReceiveCallback+0x96>
		//Extract Move Command Info
		ptr = (char*) Buf + 1;
 8003820:	af1e      	add	r7, sp, #120	; 0x78
 8003822:	3001      	adds	r0, #1
 8003824:	f847 0d64 	str.w	r0, [r7, #-100]!
		movPeriod = round(100000 * strtof(ptr, &ptr));
 8003828:	4639      	mov	r1, r7
 800382a:	f001 fa89 	bl	8004d40 <strtof>
 800382e:	eddf 7a34 	vldr	s15, [pc, #208]	; 8003900 <CDC_ReceiveCallback+0xec>
 8003832:	4e34      	ldr	r6, [pc, #208]	; (8003904 <CDC_ReceiveCallback+0xf0>)
 8003834:	4c34      	ldr	r4, [pc, #208]	; (8003908 <CDC_ReceiveCallback+0xf4>)
		for (uint8_t mot = 0; mot < 6; ++mot) {
			controllers[mot].targetPos = 2 * strtoul(ptr, &ptr, 10);
			int16_t delta = controllers[mot].targetPos - motors[mot].pos;
 8003836:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8003910 <CDC_ReceiveCallback+0xfc>
		movPeriod = round(100000 * strtof(ptr, &ptr));
 800383a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800383e:	2500      	movs	r5, #0
 8003840:	ee17 0a90 	vmov	r0, s15
 8003844:	f7fc fe80 	bl	8000548 <__aeabi_f2d>
 8003848:	ec41 0b10 	vmov	d0, r0, r1
 800384c:	f002 fdf8 	bl	8006440 <round>
 8003850:	ec51 0b10 	vmov	r0, r1, d0
 8003854:	f7fd f9a4 	bl	8000ba0 <__aeabi_d2uiz>
			controllers[mot].deltaPos = abs(delta);
			if (delta >= 0) {
				controllers[mot].direction = MOT_DIR_POS;
			} else {
				controllers[mot].direction = MOT_DIR_NEG;
 8003858:	46a9      	mov	r9, r5
		movPeriod = round(100000 * strtof(ptr, &ptr));
 800385a:	6030      	str	r0, [r6, #0]
			controllers[mot].targetPos = 2 * strtoul(ptr, &ptr, 10);
 800385c:	220a      	movs	r2, #10
 800385e:	4639      	mov	r1, r7
 8003860:	9805      	ldr	r0, [sp, #20]
 8003862:	f001 fb3f 	bl	8004ee4 <strtoul>
			int16_t delta = controllers[mot].targetPos - motors[mot].pos;
 8003866:	eb05 0308 	add.w	r3, r5, r8
			controllers[mot].targetPos = 2 * strtoul(ptr, &ptr, 10);
 800386a:	0040      	lsls	r0, r0, #1
			int16_t delta = controllers[mot].targetPos - motors[mot].pos;
 800386c:	691b      	ldr	r3, [r3, #16]
			controllers[mot].targetPos = 2 * strtoul(ptr, &ptr, 10);
 800386e:	60e0      	str	r0, [r4, #12]
			int16_t delta = controllers[mot].targetPos - motors[mot].pos;
 8003870:	1ac0      	subs	r0, r0, r3
 8003872:	b200      	sxth	r0, r0
			if (delta >= 0) {
 8003874:	2800      	cmp	r0, #0
				controllers[mot].direction = MOT_DIR_POS;
 8003876:	bfa4      	itt	ge
 8003878:	2301      	movge	r3, #1
 800387a:	7123      	strbge	r3, [r4, #4]
			controllers[mot].deltaPos = abs(delta);
 800387c:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
			}
			controllers[mot].accErr = 2 * controllers[mot].deltaPos - movPeriod;
 8003880:	6833      	ldr	r3, [r6, #0]
				controllers[mot].direction = MOT_DIR_NEG;
 8003882:	bfb8      	it	lt
 8003884:	f884 9004 	strblt.w	r9, [r4, #4]
			controllers[mot].deltaPos = abs(delta);
 8003888:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 800388c:	3514      	adds	r5, #20
			controllers[mot].accErr = 2 * controllers[mot].deltaPos - movPeriod;
 800388e:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
		for (uint8_t mot = 0; mot < 6; ++mot) {
 8003892:	2d78      	cmp	r5, #120	; 0x78
			controllers[mot].deltaPos = abs(delta);
 8003894:	6022      	str	r2, [r4, #0]
			controllers[mot].accErr = 2 * controllers[mot].deltaPos - movPeriod;
 8003896:	60a3      	str	r3, [r4, #8]
 8003898:	f104 0410 	add.w	r4, r4, #16
		for (uint8_t mot = 0; mot < 6; ++mot) {
 800389c:	d1de      	bne.n	800385c <CDC_ReceiveCallback+0x48>
		}
		currMov = 0;
 800389e:	4b1b      	ldr	r3, [pc, #108]	; (800390c <CDC_ReceiveCallback+0xf8>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
		uint16_t statLen;
		statLen = (uint16_t) sprintf(statStr, "M1: %ld, M2: %ld, M3: %ld, M4: %ld, M5: %ld, M6: %ld \r\n", motors[0].pos,
				motors[1].pos, motors[2].pos, motors[3].pos, motors[4].pos, motors[5].pos);
		CDC_Transmit_FS((uint8_t *)statStr, statLen);
	}
}
 80038a4:	b01f      	add	sp, #124	; 0x7c
 80038a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if (strncmp((char*) Buf, "r", 1) == 0) {
 80038aa:	2b72      	cmp	r3, #114	; 0x72
 80038ac:	d112      	bne.n	80038d4 <CDC_ReceiveCallback+0xc0>
		movPeriod = 0;
 80038ae:	4a15      	ldr	r2, [pc, #84]	; (8003904 <CDC_ReceiveCallback+0xf0>)
			motors[mot].pos = 0;
 80038b0:	4c17      	ldr	r4, [pc, #92]	; (8003910 <CDC_ReceiveCallback+0xfc>)
		movPeriod = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4a14      	ldr	r2, [pc, #80]	; (8003908 <CDC_ReceiveCallback+0xf4>)
			controllers[mot].targetPos = 0;
 80038b8:	4619      	mov	r1, r3
			controllers[mot].direction = MOT_DIR_POS;
 80038ba:	2501      	movs	r5, #1
			motors[mot].pos = 0;
 80038bc:	1918      	adds	r0, r3, r4
 80038be:	3314      	adds	r3, #20
		for (uint8_t mot = 0; mot < 6; ++mot) {
 80038c0:	2b78      	cmp	r3, #120	; 0x78
			controllers[mot].targetPos = 0;
 80038c2:	60d1      	str	r1, [r2, #12]
			controllers[mot].deltaPos = 0;
 80038c4:	6011      	str	r1, [r2, #0]
			controllers[mot].direction = MOT_DIR_POS;
 80038c6:	7115      	strb	r5, [r2, #4]
			controllers[mot].accErr = 0;
 80038c8:	6091      	str	r1, [r2, #8]
			motors[mot].pos = 0;
 80038ca:	6101      	str	r1, [r0, #16]
 80038cc:	f102 0210 	add.w	r2, r2, #16
		for (uint8_t mot = 0; mot < 6; ++mot) {
 80038d0:	d1f4      	bne.n	80038bc <CDC_ReceiveCallback+0xa8>
 80038d2:	e7e4      	b.n	800389e <CDC_ReceiveCallback+0x8a>
	else if (strncmp((char*) Buf, "s", 1) == 0){
 80038d4:	2b73      	cmp	r3, #115	; 0x73
 80038d6:	d1e5      	bne.n	80038a4 <CDC_ReceiveCallback+0x90>
		statLen = (uint16_t) sprintf(statStr, "M1: %ld, M2: %ld, M3: %ld, M4: %ld, M5: %ld, M6: %ld \r\n", motors[0].pos,
 80038d8:	4a0d      	ldr	r2, [pc, #52]	; (8003910 <CDC_ReceiveCallback+0xfc>)
 80038da:	490e      	ldr	r1, [pc, #56]	; (8003914 <CDC_ReceiveCallback+0x100>)
 80038dc:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80038de:	9303      	str	r3, [sp, #12]
 80038e0:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80038e2:	9302      	str	r3, [sp, #8]
 80038e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80038ee:	6912      	ldr	r2, [r2, #16]
 80038f0:	a805      	add	r0, sp, #20
 80038f2:	f000 fbf9 	bl	80040e8 <siprintf>
		CDC_Transmit_FS((uint8_t *)statStr, statLen);
 80038f6:	b281      	uxth	r1, r0
 80038f8:	a805      	add	r0, sp, #20
 80038fa:	f000 f91f 	bl	8003b3c <CDC_Transmit_FS>
}
 80038fe:	e7d1      	b.n	80038a4 <CDC_ReceiveCallback+0x90>
 8003900:	47c35000 	.word	0x47c35000
 8003904:	2000011c 	.word	0x2000011c
 8003908:	20000368 	.word	0x20000368
 800390c:	20000118 	.word	0x20000118
 8003910:	200003c8 	.word	0x200003c8
 8003914:	08006500 	.word	0x08006500

08003918 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003918:	e7fe      	b.n	8003918 <_Error_Handler>
	...

0800391c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800391c:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <HAL_MspInit+0x8c>)
 8003920:	2400      	movs	r4, #0
 8003922:	9400      	str	r4, [sp, #0]
 8003924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800392a:	645a      	str	r2, [r3, #68]	; 0x44
 800392c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003932:	9200      	str	r2, [sp, #0]
 8003934:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	9401      	str	r4, [sp, #4]
 8003938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800393e:	641a      	str	r2, [r3, #64]	; 0x40
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003948:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800394c:	f7fd fb84 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003950:	4622      	mov	r2, r4
 8003952:	4621      	mov	r1, r4
 8003954:	f06f 000b 	mvn.w	r0, #11
 8003958:	f7fd fb90 	bl	800107c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800395c:	4622      	mov	r2, r4
 800395e:	4621      	mov	r1, r4
 8003960:	f06f 000a 	mvn.w	r0, #10
 8003964:	f7fd fb8a 	bl	800107c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003968:	4622      	mov	r2, r4
 800396a:	4621      	mov	r1, r4
 800396c:	f06f 0009 	mvn.w	r0, #9
 8003970:	f7fd fb84 	bl	800107c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003974:	4622      	mov	r2, r4
 8003976:	4621      	mov	r1, r4
 8003978:	f06f 0004 	mvn.w	r0, #4
 800397c:	f7fd fb7e 	bl	800107c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003980:	4622      	mov	r2, r4
 8003982:	4621      	mov	r1, r4
 8003984:	f06f 0003 	mvn.w	r0, #3
 8003988:	f7fd fb78 	bl	800107c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800398c:	4622      	mov	r2, r4
 800398e:	4621      	mov	r1, r4
 8003990:	f06f 0001 	mvn.w	r0, #1
 8003994:	f7fd fb72 	bl	800107c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003998:	4622      	mov	r2, r4
 800399a:	4621      	mov	r1, r4
 800399c:	f04f 30ff 	mov.w	r0, #4294967295
 80039a0:	f7fd fb6c 	bl	800107c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039a4:	b002      	add	sp, #8
 80039a6:	bd10      	pop	{r4, pc}
 80039a8:	40023800 	.word	0x40023800

080039ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039ac:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <HAL_TIM_Base_MspInit+0x38>)
 80039b0:	6802      	ldr	r2, [r0, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d113      	bne.n	80039de <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039b6:	2200      	movs	r2, #0
 80039b8:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 80039bc:	9201      	str	r2, [sp, #4]
 80039be:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80039c0:	f041 0110 	orr.w	r1, r1, #16
 80039c4:	6419      	str	r1, [r3, #64]	; 0x40
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	9301      	str	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80039ce:	2036      	movs	r0, #54	; 0x36
 80039d0:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039d2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80039d4:	f7fd fb52 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039d8:	2036      	movs	r0, #54	; 0x36
 80039da:	f7fd fb83 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80039de:	b003      	add	sp, #12
 80039e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80039e4:	40001000 	.word	0x40001000

080039e8 <SVC_Handler>:
 80039e8:	4770      	bx	lr

080039ea <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80039ea:	4770      	bx	lr

080039ec <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80039ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ee:	f7fd fb0d 	bl	800100c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80039f6:	f7fd bba4 	b.w	8001142 <HAL_SYSTICK_IRQHandler>
	...

080039fc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039fc:	4801      	ldr	r0, [pc, #4]	; (8003a04 <TIM6_DAC_IRQHandler+0x8>)
 80039fe:	f7fe bb40 	b.w	8002082 <HAL_TIM_IRQHandler>
 8003a02:	bf00      	nop
 8003a04:	20000440 	.word	0x20000440

08003a08 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a08:	4801      	ldr	r0, [pc, #4]	; (8003a10 <OTG_FS_IRQHandler+0x8>)
 8003a0a:	f7fd bd09 	b.w	8001420 <HAL_PCD_IRQHandler>
 8003a0e:	bf00      	nop
 8003a10:	200016a8 	.word	0x200016a8

08003a14 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a14:	490f      	ldr	r1, [pc, #60]	; (8003a54 <SystemInit+0x40>)
 8003a16:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003a1a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <SystemInit+0x44>)
 8003a24:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a26:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003a2e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003a36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003a3c:	4a07      	ldr	r2, [pc, #28]	; (8003a5c <SystemInit+0x48>)
 8003a3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a46:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003a48:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a4e:	608b      	str	r3, [r1, #8]
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	e000ed00 	.word	0xe000ed00
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	24003010 	.word	0x24003010

08003a60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003a60:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003a62:	4c09      	ldr	r4, [pc, #36]	; (8003a88 <MX_USB_DEVICE_Init+0x28>)
 8003a64:	4909      	ldr	r1, [pc, #36]	; (8003a8c <MX_USB_DEVICE_Init+0x2c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f7ff f989 	bl	8002d80 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8003a6e:	4908      	ldr	r1, [pc, #32]	; (8003a90 <MX_USB_DEVICE_Init+0x30>)
 8003a70:	4620      	mov	r0, r4
 8003a72:	f7ff f99a 	bl	8002daa <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8003a76:	4620      	mov	r0, r4
 8003a78:	4906      	ldr	r1, [pc, #24]	; (8003a94 <MX_USB_DEVICE_Init+0x34>)
 8003a7a:	f7ff f942 	bl	8002d02 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8003a7e:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8003a84:	f7ff b998 	b.w	8002db8 <USBD_Start>
 8003a88:	2000047c 	.word	0x2000047c
 8003a8c:	20000134 	.word	0x20000134
 8003a90:	20000008 	.word	0x20000008
 8003a94:	20000124 	.word	0x20000124

08003a98 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003a98:	2000      	movs	r0, #0
 8003a9a:	4770      	bx	lr

08003a9c <CDC_Init_FS>:
{
 8003a9c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003a9e:	4c06      	ldr	r4, [pc, #24]	; (8003ab8 <CDC_Init_FS+0x1c>)
 8003aa0:	4906      	ldr	r1, [pc, #24]	; (8003abc <CDC_Init_FS+0x20>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f7ff f933 	bl	8002d10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003aaa:	4905      	ldr	r1, [pc, #20]	; (8003ac0 <CDC_Init_FS+0x24>)
 8003aac:	4620      	mov	r0, r4
 8003aae:	f7ff f937 	bl	8002d20 <USBD_CDC_SetRxBuffer>
}
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	bd10      	pop	{r4, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000047c 	.word	0x2000047c
 8003abc:	20000ea0 	.word	0x20000ea0
 8003ac0:	200006a0 	.word	0x200006a0

08003ac4 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8003ac4:	2820      	cmp	r0, #32
 8003ac6:	d003      	beq.n	8003ad0 <CDC_Control_FS+0xc>
 8003ac8:	2821      	cmp	r0, #33	; 0x21
 8003aca:	d011      	beq.n	8003af0 <CDC_Control_FS+0x2c>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003acc:	2000      	movs	r0, #0
 8003ace:	4770      	bx	lr
	  tempbuf[0]=pbuf[0];
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <CDC_Control_FS+0x4c>)
 8003ad2:	780a      	ldrb	r2, [r1, #0]
 8003ad4:	701a      	strb	r2, [r3, #0]
	  tempbuf[1]=pbuf[1];
 8003ad6:	784a      	ldrb	r2, [r1, #1]
 8003ad8:	705a      	strb	r2, [r3, #1]
	  tempbuf[2]=pbuf[2];
 8003ada:	788a      	ldrb	r2, [r1, #2]
 8003adc:	709a      	strb	r2, [r3, #2]
	  tempbuf[3]=pbuf[3];
 8003ade:	78ca      	ldrb	r2, [r1, #3]
 8003ae0:	70da      	strb	r2, [r3, #3]
	  tempbuf[4]=pbuf[4];
 8003ae2:	790a      	ldrb	r2, [r1, #4]
 8003ae4:	711a      	strb	r2, [r3, #4]
	  tempbuf[5]=pbuf[5];
 8003ae6:	794a      	ldrb	r2, [r1, #5]
 8003ae8:	715a      	strb	r2, [r3, #5]
	  tempbuf[6]=pbuf[6];
 8003aea:	798a      	ldrb	r2, [r1, #6]
 8003aec:	719a      	strb	r2, [r3, #6]
 8003aee:	e7ed      	b.n	8003acc <CDC_Control_FS+0x8>
	  pbuf[0]=tempbuf[0];
 8003af0:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <CDC_Control_FS+0x4c>)
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	700a      	strb	r2, [r1, #0]
	  pbuf[1]=tempbuf[1];
 8003af6:	785a      	ldrb	r2, [r3, #1]
 8003af8:	704a      	strb	r2, [r1, #1]
	  pbuf[2]=tempbuf[2];
 8003afa:	789a      	ldrb	r2, [r3, #2]
 8003afc:	708a      	strb	r2, [r1, #2]
	  pbuf[3]=tempbuf[3];
 8003afe:	78da      	ldrb	r2, [r3, #3]
 8003b00:	70ca      	strb	r2, [r1, #3]
	  pbuf[4]=tempbuf[4];
 8003b02:	791a      	ldrb	r2, [r3, #4]
 8003b04:	710a      	strb	r2, [r1, #4]
	  pbuf[5]=tempbuf[5];
 8003b06:	795a      	ldrb	r2, [r3, #5]
 8003b08:	714a      	strb	r2, [r1, #5]
	  pbuf[6]=tempbuf[6];
 8003b0a:	799b      	ldrb	r3, [r3, #6]
 8003b0c:	718b      	strb	r3, [r1, #6]
    break;
 8003b0e:	e7dd      	b.n	8003acc <CDC_Control_FS+0x8>
 8003b10:	200016a0 	.word	0x200016a0

08003b14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003b14:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003b16:	4d08      	ldr	r5, [pc, #32]	; (8003b38 <CDC_Receive_FS+0x24>)
{
 8003b18:	4604      	mov	r4, r0
 8003b1a:	460e      	mov	r6, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003b1c:	4601      	mov	r1, r0
 8003b1e:	4628      	mov	r0, r5
 8003b20:	f7ff f8fe 	bl	8002d20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003b24:	4628      	mov	r0, r5
 8003b26:	f7ff f918 	bl	8002d5a <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, *Len);
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	6831      	ldr	r1, [r6, #0]
 8003b2e:	f7ff fe71 	bl	8003814 <CDC_ReceiveCallback>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8003b32:	2000      	movs	r0, #0
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
 8003b36:	bf00      	nop
 8003b38:	2000047c 	.word	0x2000047c

08003b3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8003b3c:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003b3e:	4c09      	ldr	r4, [pc, #36]	; (8003b64 <CDC_Transmit_FS+0x28>)
 8003b40:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8003b44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 8003b48:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8003b4a:	b943      	cbnz	r3, 8003b5e <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003b4c:	4601      	mov	r1, r0
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f7ff f8de 	bl	8002d10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003b54:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8003b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003b5a:	f7ff b8e7 	b.w	8002d2c <USBD_CDC_TransmitPacket>
}
 8003b5e:	2001      	movs	r0, #1
 8003b60:	bd10      	pop	{r4, pc}
 8003b62:	bf00      	nop
 8003b64:	2000047c 	.word	0x2000047c

08003b68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003b68:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8003b6a:	6803      	ldr	r3, [r0, #0]
 8003b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003b70:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 8003b72:	d12d      	bne.n	8003bd0 <HAL_PCD_MspInit+0x68>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b74:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003b76:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003b7a:	a901      	add	r1, sp, #4
 8003b7c:	4815      	ldr	r0, [pc, #84]	; (8003bd4 <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003b7e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b80:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003b84:	f7fd fae2 	bl	800114c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003b88:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003b8c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b92:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003b94:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b96:	480f      	ldr	r0, [pc, #60]	; (8003bd4 <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003b98:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9e:	f7fd fad5 	bl	800114c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <HAL_PCD_MspInit+0x70>)
 8003ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003baa:	635a      	str	r2, [r3, #52]	; 0x34
 8003bac:	9400      	str	r4, [sp, #0]
 8003bae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bb4:	645a      	str	r2, [r3, #68]	; 0x44
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbc:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003bbe:	2043      	movs	r0, #67	; 0x43
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003bc4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003bc6:	f7fd fa59 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003bca:	2043      	movs	r0, #67	; 0x43
 8003bcc:	f7fd fa8a 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003bd0:	b006      	add	sp, #24
 8003bd2:	bd10      	pop	{r4, pc}
 8003bd4:	40020000 	.word	0x40020000
 8003bd8:	40023800 	.word	0x40023800

08003bdc <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003bdc:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8003be0:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003be4:	f7ff b8ff 	b.w	8002de6 <USBD_LL_SetupStage>

08003be8 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003be8:	231c      	movs	r3, #28
 8003bea:	fb03 0301 	mla	r3, r3, r1, r0
 8003bee:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003bf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003bf6:	f7ff b923 	b.w	8002e40 <USBD_LL_DataOutStage>

08003bfa <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003bfa:	231c      	movs	r3, #28
 8003bfc:	fb03 0301 	mla	r3, r3, r1, r0
 8003c00:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c06:	f7ff b94d 	b.w	8002ea4 <USBD_LL_DataInStage>

08003c0a <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003c0a:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003c0e:	f7ff b9c9 	b.w	8002fa4 <USBD_LL_SOF>

08003c12 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003c12:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8003c14:	68c1      	ldr	r1, [r0, #12]
{ 
 8003c16:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003c18:	3100      	adds	r1, #0
 8003c1a:	bf18      	it	ne
 8003c1c:	2101      	movne	r1, #1
 8003c1e:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003c22:	f7ff f9ad 	bl	8002f80 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c26:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 8003c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c2e:	f7ff b988 	b.w	8002f42 <USBD_LL_Reset>
	...

08003c34 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003c34:	b510      	push	{r4, lr}
 8003c36:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003c38:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003c3c:	f7ff f9a3 	bl	8002f86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003c40:	6822      	ldr	r2, [r4, #0]
 8003c42:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003c4e:	6a23      	ldr	r3, [r4, #32]
 8003c50:	b123      	cbz	r3, 8003c5c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003c52:	4a03      	ldr	r2, [pc, #12]	; (8003c60 <HAL_PCD_SuspendCallback+0x2c>)
 8003c54:	6913      	ldr	r3, [r2, #16]
 8003c56:	f043 0306 	orr.w	r3, r3, #6
 8003c5a:	6113      	str	r3, [r2, #16]
 8003c5c:	bd10      	pop	{r4, pc}
 8003c5e:	bf00      	nop
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003c64:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003c68:	f7ff b996 	b.w	8002f98 <USBD_LL_Resume>

08003c6c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003c6c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003c70:	f7ff b9a6 	b.w	8002fc0 <USBD_LL_IsoOUTIncomplete>

08003c74 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003c74:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003c78:	f7ff b9a0 	b.w	8002fbc <USBD_LL_IsoINIncomplete>

08003c7c <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003c7c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003c80:	f7ff b9a0 	b.w	8002fc4 <USBD_LL_DevConnected>

08003c84 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003c84:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003c88:	f7ff b99e 	b.w	8002fc8 <USBD_LL_DevDisconnected>

08003c8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003c8c:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003c8e:	7802      	ldrb	r2, [r0, #0]
 8003c90:	bb5a      	cbnz	r2, 8003cea <USBD_LL_Init+0x5e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8003c92:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <USBD_LL_Init+0x64>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003c94:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 8003c96:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 8003c9a:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003c9e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ca2:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003caa:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003cac:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003cae:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003cb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003cb2:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003cb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003cb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003cba:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003cbe:	f7fd fb2e 	bl	800131e <HAL_PCD_Init>
 8003cc2:	b120      	cbz	r0, 8003cce <USBD_LL_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003cc4:	f240 1153 	movw	r1, #339	; 0x153
 8003cc8:	480a      	ldr	r0, [pc, #40]	; (8003cf4 <USBD_LL_Init+0x68>)
 8003cca:	f7ff fe25 	bl	8003918 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003cce:	2180      	movs	r1, #128	; 0x80
 8003cd0:	4807      	ldr	r0, [pc, #28]	; (8003cf0 <USBD_LL_Init+0x64>)
 8003cd2:	f7fd ff72 	bl	8001bba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003cd6:	2240      	movs	r2, #64	; 0x40
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4805      	ldr	r0, [pc, #20]	; (8003cf0 <USBD_LL_Init+0x64>)
 8003cdc:	f7fd ff4c 	bl	8001b78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003ce0:	2280      	movs	r2, #128	; 0x80
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <USBD_LL_Init+0x64>)
 8003ce6:	f7fd ff47 	bl	8001b78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8003cea:	2000      	movs	r0, #0
 8003cec:	bd08      	pop	{r3, pc}
 8003cee:	bf00      	nop
 8003cf0:	200016a8 	.word	0x200016a8
 8003cf4:	0800654c 	.word	0x0800654c

08003cf8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003cf8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003cfa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003cfe:	f7fd fb7a 	bl	80013f6 <HAL_PCD_Start>
 8003d02:	2803      	cmp	r0, #3
 8003d04:	bf9a      	itte	ls
 8003d06:	4b02      	ldrls	r3, [pc, #8]	; (8003d10 <USBD_LL_Start+0x18>)
 8003d08:	5c18      	ldrbls	r0, [r3, r0]
 8003d0a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003d0c:	bd08      	pop	{r3, pc}
 8003d0e:	bf00      	nop
 8003d10:	08006548 	.word	0x08006548

08003d14 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003d14:	b510      	push	{r4, lr}
 8003d16:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003d18:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	4622      	mov	r2, r4
 8003d20:	f7fd fe3c 	bl	800199c <HAL_PCD_EP_Open>
 8003d24:	2803      	cmp	r0, #3
 8003d26:	bf9a      	itte	ls
 8003d28:	4b01      	ldrls	r3, [pc, #4]	; (8003d30 <USBD_LL_OpenEP+0x1c>)
 8003d2a:	5c18      	ldrbls	r0, [r3, r0]
 8003d2c:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003d2e:	bd10      	pop	{r4, pc}
 8003d30:	08006548 	.word	0x08006548

08003d34 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003d34:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003d36:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d3a:	f7fd fe5d 	bl	80019f8 <HAL_PCD_EP_Close>
 8003d3e:	2803      	cmp	r0, #3
 8003d40:	bf9a      	itte	ls
 8003d42:	4b02      	ldrls	r3, [pc, #8]	; (8003d4c <USBD_LL_CloseEP+0x18>)
 8003d44:	5c18      	ldrbls	r0, [r3, r0]
 8003d46:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003d48:	bd08      	pop	{r3, pc}
 8003d4a:	bf00      	nop
 8003d4c:	08006548 	.word	0x08006548

08003d50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003d50:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003d52:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d56:	f7fd febe 	bl	8001ad6 <HAL_PCD_EP_SetStall>
 8003d5a:	2803      	cmp	r0, #3
 8003d5c:	bf9a      	itte	ls
 8003d5e:	4b02      	ldrls	r3, [pc, #8]	; (8003d68 <USBD_LL_StallEP+0x18>)
 8003d60:	5c18      	ldrbls	r0, [r3, r0]
 8003d62:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003d64:	bd08      	pop	{r3, pc}
 8003d66:	bf00      	nop
 8003d68:	08006548 	.word	0x08006548

08003d6c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003d6c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003d6e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d72:	f7fd fedc 	bl	8001b2e <HAL_PCD_EP_ClrStall>
 8003d76:	2803      	cmp	r0, #3
 8003d78:	bf9a      	itte	ls
 8003d7a:	4b02      	ldrls	r3, [pc, #8]	; (8003d84 <USBD_LL_ClearStallEP+0x18>)
 8003d7c:	5c18      	ldrbls	r0, [r3, r0]
 8003d7e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003d80:	bd08      	pop	{r3, pc}
 8003d82:	bf00      	nop
 8003d84:	08006548 	.word	0x08006548

08003d88 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003d88:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003d8c:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8003d90:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003d94:	bf1b      	ittet	ne
 8003d96:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003d9a:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003d9e:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003da2:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003da6:	bf08      	it	eq
 8003da8:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8003dac:	4770      	bx	lr
	...

08003db0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003db0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003db2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003db6:	f7fd fddf 	bl	8001978 <HAL_PCD_SetAddress>
 8003dba:	2803      	cmp	r0, #3
 8003dbc:	bf9a      	itte	ls
 8003dbe:	4b02      	ldrls	r3, [pc, #8]	; (8003dc8 <USBD_LL_SetUSBAddress+0x18>)
 8003dc0:	5c18      	ldrbls	r0, [r3, r0]
 8003dc2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003dc4:	bd08      	pop	{r3, pc}
 8003dc6:	bf00      	nop
 8003dc8:	08006548 	.word	0x08006548

08003dcc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003dcc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003dce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003dd2:	f7fd fe60 	bl	8001a96 <HAL_PCD_EP_Transmit>
 8003dd6:	2803      	cmp	r0, #3
 8003dd8:	bf9a      	itte	ls
 8003dda:	4b02      	ldrls	r3, [pc, #8]	; (8003de4 <USBD_LL_Transmit+0x18>)
 8003ddc:	5c18      	ldrbls	r0, [r3, r0]
 8003dde:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8003de0:	bd08      	pop	{r3, pc}
 8003de2:	bf00      	nop
 8003de4:	08006548 	.word	0x08006548

08003de8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003de8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003dea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003dee:	f7fd fe26 	bl	8001a3e <HAL_PCD_EP_Receive>
 8003df2:	2803      	cmp	r0, #3
 8003df4:	bf9a      	itte	ls
 8003df6:	4b02      	ldrls	r3, [pc, #8]	; (8003e00 <USBD_LL_PrepareReceive+0x18>)
 8003df8:	5c18      	ldrbls	r0, [r3, r0]
 8003dfa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003dfc:	bd08      	pop	{r3, pc}
 8003dfe:	bf00      	nop
 8003e00:	08006548 	.word	0x08006548

08003e04 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003e04:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003e06:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e0a:	f7fd fe3c 	bl	8001a86 <HAL_PCD_EP_GetRxCount>
}
 8003e0e:	bd08      	pop	{r3, pc}

08003e10 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003e10:	2312      	movs	r3, #18
 8003e12:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003e14:	4800      	ldr	r0, [pc, #0]	; (8003e18 <USBD_FS_DeviceDescriptor+0x8>)
 8003e16:	4770      	bx	lr
 8003e18:	20000150 	.word	0x20000150

08003e1c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003e20:	4800      	ldr	r0, [pc, #0]	; (8003e24 <USBD_FS_LangIDStrDescriptor+0x8>)
 8003e22:	4770      	bx	lr
 8003e24:	20000164 	.word	0x20000164

08003e28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003e28:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003e2a:	4c04      	ldr	r4, [pc, #16]	; (8003e3c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003e2c:	4804      	ldr	r0, [pc, #16]	; (8003e40 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003e2e:	460a      	mov	r2, r1
 8003e30:	4621      	mov	r1, r4
 8003e32:	f7ff fa68 	bl	8003306 <USBD_GetString>
  return USBD_StrDesc;
}
 8003e36:	4620      	mov	r0, r4
 8003e38:	bd10      	pop	{r4, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20001a98 	.word	0x20001a98
 8003e40:	08006578 	.word	0x08006578

08003e44 <USBD_FS_ProductStrDescriptor>:
{
 8003e44:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003e46:	4c04      	ldr	r4, [pc, #16]	; (8003e58 <USBD_FS_ProductStrDescriptor+0x14>)
 8003e48:	4804      	ldr	r0, [pc, #16]	; (8003e5c <USBD_FS_ProductStrDescriptor+0x18>)
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	f7ff fa5a 	bl	8003306 <USBD_GetString>
}
 8003e52:	4620      	mov	r0, r4
 8003e54:	bd10      	pop	{r4, pc}
 8003e56:	bf00      	nop
 8003e58:	20001a98 	.word	0x20001a98
 8003e5c:	0800658b 	.word	0x0800658b

08003e60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003e60:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003e62:	4c04      	ldr	r4, [pc, #16]	; (8003e74 <USBD_FS_SerialStrDescriptor+0x14>)
 8003e64:	4804      	ldr	r0, [pc, #16]	; (8003e78 <USBD_FS_SerialStrDescriptor+0x18>)
 8003e66:	460a      	mov	r2, r1
 8003e68:	4621      	mov	r1, r4
 8003e6a:	f7ff fa4c 	bl	8003306 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003e6e:	4620      	mov	r0, r4
 8003e70:	bd10      	pop	{r4, pc}
 8003e72:	bf00      	nop
 8003e74:	20001a98 	.word	0x20001a98
 8003e78:	080065a1 	.word	0x080065a1

08003e7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003e7c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003e7e:	4c04      	ldr	r4, [pc, #16]	; (8003e90 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003e80:	4804      	ldr	r0, [pc, #16]	; (8003e94 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003e82:	460a      	mov	r2, r1
 8003e84:	4621      	mov	r1, r4
 8003e86:	f7ff fa3e 	bl	8003306 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	bd10      	pop	{r4, pc}
 8003e8e:	bf00      	nop
 8003e90:	20001a98 	.word	0x20001a98
 8003e94:	0800655f 	.word	0x0800655f

08003e98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003e98:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003e9a:	4c04      	ldr	r4, [pc, #16]	; (8003eac <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003e9c:	4804      	ldr	r0, [pc, #16]	; (8003eb0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003e9e:	460a      	mov	r2, r1
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	f7ff fa30 	bl	8003306 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	bd10      	pop	{r4, pc}
 8003eaa:	bf00      	nop
 8003eac:	20001a98 	.word	0x20001a98
 8003eb0:	0800656a 	.word	0x0800656a

08003eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003eec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003eb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003eba:	e003      	b.n	8003ec4 <LoopCopyDataInit>

08003ebc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ebe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ec0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ec2:	3104      	adds	r1, #4

08003ec4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ec4:	480b      	ldr	r0, [pc, #44]	; (8003ef4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ec8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003eca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ecc:	d3f6      	bcc.n	8003ebc <CopyDataInit>
  ldr  r2, =_sbss
 8003ece:	4a0b      	ldr	r2, [pc, #44]	; (8003efc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ed0:	e002      	b.n	8003ed8 <LoopFillZerobss>

08003ed2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ed2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ed4:	f842 3b04 	str.w	r3, [r2], #4

08003ed8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003eda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003edc:	d3f9      	bcc.n	8003ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ede:	f7ff fd99 	bl	8003a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ee2:	f000 f811 	bl	8003f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ee6:	f7ff fac5 	bl	8003474 <main>
  bx  lr    
 8003eea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003eec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003ef0:	08006860 	.word	0x08006860
  ldr  r0, =_sdata
 8003ef4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ef8:	20000338 	.word	0x20000338
  ldr  r2, =_sbss
 8003efc:	20000338 	.word	0x20000338
  ldr  r3, = _ebss
 8003f00:	20001c9c 	.word	0x20001c9c

08003f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f04:	e7fe      	b.n	8003f04 <ADC_IRQHandler>
	...

08003f08 <__libc_init_array>:
 8003f08:	b570      	push	{r4, r5, r6, lr}
 8003f0a:	4e0d      	ldr	r6, [pc, #52]	; (8003f40 <__libc_init_array+0x38>)
 8003f0c:	4c0d      	ldr	r4, [pc, #52]	; (8003f44 <__libc_init_array+0x3c>)
 8003f0e:	1ba4      	subs	r4, r4, r6
 8003f10:	10a4      	asrs	r4, r4, #2
 8003f12:	2500      	movs	r5, #0
 8003f14:	42a5      	cmp	r5, r4
 8003f16:	d109      	bne.n	8003f2c <__libc_init_array+0x24>
 8003f18:	4e0b      	ldr	r6, [pc, #44]	; (8003f48 <__libc_init_array+0x40>)
 8003f1a:	4c0c      	ldr	r4, [pc, #48]	; (8003f4c <__libc_init_array+0x44>)
 8003f1c:	f002 fae4 	bl	80064e8 <_init>
 8003f20:	1ba4      	subs	r4, r4, r6
 8003f22:	10a4      	asrs	r4, r4, #2
 8003f24:	2500      	movs	r5, #0
 8003f26:	42a5      	cmp	r5, r4
 8003f28:	d105      	bne.n	8003f36 <__libc_init_array+0x2e>
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f30:	4798      	blx	r3
 8003f32:	3501      	adds	r5, #1
 8003f34:	e7ee      	b.n	8003f14 <__libc_init_array+0xc>
 8003f36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f3a:	4798      	blx	r3
 8003f3c:	3501      	adds	r5, #1
 8003f3e:	e7f2      	b.n	8003f26 <__libc_init_array+0x1e>
 8003f40:	08006858 	.word	0x08006858
 8003f44:	08006858 	.word	0x08006858
 8003f48:	08006858 	.word	0x08006858
 8003f4c:	0800685c 	.word	0x0800685c

08003f50 <malloc>:
 8003f50:	4b02      	ldr	r3, [pc, #8]	; (8003f5c <malloc+0xc>)
 8003f52:	4601      	mov	r1, r0
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	f000 b859 	b.w	800400c <_malloc_r>
 8003f5a:	bf00      	nop
 8003f5c:	20000168 	.word	0x20000168

08003f60 <free>:
 8003f60:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <free+0xc>)
 8003f62:	4601      	mov	r1, r0
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	f000 b803 	b.w	8003f70 <_free_r>
 8003f6a:	bf00      	nop
 8003f6c:	20000168 	.word	0x20000168

08003f70 <_free_r>:
 8003f70:	b538      	push	{r3, r4, r5, lr}
 8003f72:	4605      	mov	r5, r0
 8003f74:	2900      	cmp	r1, #0
 8003f76:	d045      	beq.n	8004004 <_free_r+0x94>
 8003f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f7c:	1f0c      	subs	r4, r1, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bfb8      	it	lt
 8003f82:	18e4      	addlt	r4, r4, r3
 8003f84:	f001 fb03 	bl	800558e <__malloc_lock>
 8003f88:	4a1f      	ldr	r2, [pc, #124]	; (8004008 <_free_r+0x98>)
 8003f8a:	6813      	ldr	r3, [r2, #0]
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	b933      	cbnz	r3, 8003f9e <_free_r+0x2e>
 8003f90:	6063      	str	r3, [r4, #4]
 8003f92:	6014      	str	r4, [r2, #0]
 8003f94:	4628      	mov	r0, r5
 8003f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f9a:	f001 baf9 	b.w	8005590 <__malloc_unlock>
 8003f9e:	42a3      	cmp	r3, r4
 8003fa0:	d90c      	bls.n	8003fbc <_free_r+0x4c>
 8003fa2:	6821      	ldr	r1, [r4, #0]
 8003fa4:	1862      	adds	r2, r4, r1
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	bf04      	itt	eq
 8003faa:	681a      	ldreq	r2, [r3, #0]
 8003fac:	685b      	ldreq	r3, [r3, #4]
 8003fae:	6063      	str	r3, [r4, #4]
 8003fb0:	bf04      	itt	eq
 8003fb2:	1852      	addeq	r2, r2, r1
 8003fb4:	6022      	streq	r2, [r4, #0]
 8003fb6:	6004      	str	r4, [r0, #0]
 8003fb8:	e7ec      	b.n	8003f94 <_free_r+0x24>
 8003fba:	4613      	mov	r3, r2
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	b10a      	cbz	r2, 8003fc4 <_free_r+0x54>
 8003fc0:	42a2      	cmp	r2, r4
 8003fc2:	d9fa      	bls.n	8003fba <_free_r+0x4a>
 8003fc4:	6819      	ldr	r1, [r3, #0]
 8003fc6:	1858      	adds	r0, r3, r1
 8003fc8:	42a0      	cmp	r0, r4
 8003fca:	d10b      	bne.n	8003fe4 <_free_r+0x74>
 8003fcc:	6820      	ldr	r0, [r4, #0]
 8003fce:	4401      	add	r1, r0
 8003fd0:	1858      	adds	r0, r3, r1
 8003fd2:	4282      	cmp	r2, r0
 8003fd4:	6019      	str	r1, [r3, #0]
 8003fd6:	d1dd      	bne.n	8003f94 <_free_r+0x24>
 8003fd8:	6810      	ldr	r0, [r2, #0]
 8003fda:	6852      	ldr	r2, [r2, #4]
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	4401      	add	r1, r0
 8003fe0:	6019      	str	r1, [r3, #0]
 8003fe2:	e7d7      	b.n	8003f94 <_free_r+0x24>
 8003fe4:	d902      	bls.n	8003fec <_free_r+0x7c>
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	602b      	str	r3, [r5, #0]
 8003fea:	e7d3      	b.n	8003f94 <_free_r+0x24>
 8003fec:	6820      	ldr	r0, [r4, #0]
 8003fee:	1821      	adds	r1, r4, r0
 8003ff0:	428a      	cmp	r2, r1
 8003ff2:	bf04      	itt	eq
 8003ff4:	6811      	ldreq	r1, [r2, #0]
 8003ff6:	6852      	ldreq	r2, [r2, #4]
 8003ff8:	6062      	str	r2, [r4, #4]
 8003ffa:	bf04      	itt	eq
 8003ffc:	1809      	addeq	r1, r1, r0
 8003ffe:	6021      	streq	r1, [r4, #0]
 8004000:	605c      	str	r4, [r3, #4]
 8004002:	e7c7      	b.n	8003f94 <_free_r+0x24>
 8004004:	bd38      	pop	{r3, r4, r5, pc}
 8004006:	bf00      	nop
 8004008:	20000358 	.word	0x20000358

0800400c <_malloc_r>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	1ccd      	adds	r5, r1, #3
 8004010:	f025 0503 	bic.w	r5, r5, #3
 8004014:	3508      	adds	r5, #8
 8004016:	2d0c      	cmp	r5, #12
 8004018:	bf38      	it	cc
 800401a:	250c      	movcc	r5, #12
 800401c:	2d00      	cmp	r5, #0
 800401e:	4606      	mov	r6, r0
 8004020:	db01      	blt.n	8004026 <_malloc_r+0x1a>
 8004022:	42a9      	cmp	r1, r5
 8004024:	d903      	bls.n	800402e <_malloc_r+0x22>
 8004026:	230c      	movs	r3, #12
 8004028:	6033      	str	r3, [r6, #0]
 800402a:	2000      	movs	r0, #0
 800402c:	bd70      	pop	{r4, r5, r6, pc}
 800402e:	f001 faae 	bl	800558e <__malloc_lock>
 8004032:	4a23      	ldr	r2, [pc, #140]	; (80040c0 <_malloc_r+0xb4>)
 8004034:	6814      	ldr	r4, [r2, #0]
 8004036:	4621      	mov	r1, r4
 8004038:	b991      	cbnz	r1, 8004060 <_malloc_r+0x54>
 800403a:	4c22      	ldr	r4, [pc, #136]	; (80040c4 <_malloc_r+0xb8>)
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	b91b      	cbnz	r3, 8004048 <_malloc_r+0x3c>
 8004040:	4630      	mov	r0, r6
 8004042:	f000 f841 	bl	80040c8 <_sbrk_r>
 8004046:	6020      	str	r0, [r4, #0]
 8004048:	4629      	mov	r1, r5
 800404a:	4630      	mov	r0, r6
 800404c:	f000 f83c 	bl	80040c8 <_sbrk_r>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d126      	bne.n	80040a2 <_malloc_r+0x96>
 8004054:	230c      	movs	r3, #12
 8004056:	6033      	str	r3, [r6, #0]
 8004058:	4630      	mov	r0, r6
 800405a:	f001 fa99 	bl	8005590 <__malloc_unlock>
 800405e:	e7e4      	b.n	800402a <_malloc_r+0x1e>
 8004060:	680b      	ldr	r3, [r1, #0]
 8004062:	1b5b      	subs	r3, r3, r5
 8004064:	d41a      	bmi.n	800409c <_malloc_r+0x90>
 8004066:	2b0b      	cmp	r3, #11
 8004068:	d90f      	bls.n	800408a <_malloc_r+0x7e>
 800406a:	600b      	str	r3, [r1, #0]
 800406c:	50cd      	str	r5, [r1, r3]
 800406e:	18cc      	adds	r4, r1, r3
 8004070:	4630      	mov	r0, r6
 8004072:	f001 fa8d 	bl	8005590 <__malloc_unlock>
 8004076:	f104 000b 	add.w	r0, r4, #11
 800407a:	1d23      	adds	r3, r4, #4
 800407c:	f020 0007 	bic.w	r0, r0, #7
 8004080:	1ac3      	subs	r3, r0, r3
 8004082:	d01b      	beq.n	80040bc <_malloc_r+0xb0>
 8004084:	425a      	negs	r2, r3
 8004086:	50e2      	str	r2, [r4, r3]
 8004088:	bd70      	pop	{r4, r5, r6, pc}
 800408a:	428c      	cmp	r4, r1
 800408c:	bf0d      	iteet	eq
 800408e:	6863      	ldreq	r3, [r4, #4]
 8004090:	684b      	ldrne	r3, [r1, #4]
 8004092:	6063      	strne	r3, [r4, #4]
 8004094:	6013      	streq	r3, [r2, #0]
 8004096:	bf18      	it	ne
 8004098:	460c      	movne	r4, r1
 800409a:	e7e9      	b.n	8004070 <_malloc_r+0x64>
 800409c:	460c      	mov	r4, r1
 800409e:	6849      	ldr	r1, [r1, #4]
 80040a0:	e7ca      	b.n	8004038 <_malloc_r+0x2c>
 80040a2:	1cc4      	adds	r4, r0, #3
 80040a4:	f024 0403 	bic.w	r4, r4, #3
 80040a8:	42a0      	cmp	r0, r4
 80040aa:	d005      	beq.n	80040b8 <_malloc_r+0xac>
 80040ac:	1a21      	subs	r1, r4, r0
 80040ae:	4630      	mov	r0, r6
 80040b0:	f000 f80a 	bl	80040c8 <_sbrk_r>
 80040b4:	3001      	adds	r0, #1
 80040b6:	d0cd      	beq.n	8004054 <_malloc_r+0x48>
 80040b8:	6025      	str	r5, [r4, #0]
 80040ba:	e7d9      	b.n	8004070 <_malloc_r+0x64>
 80040bc:	bd70      	pop	{r4, r5, r6, pc}
 80040be:	bf00      	nop
 80040c0:	20000358 	.word	0x20000358
 80040c4:	2000035c 	.word	0x2000035c

080040c8 <_sbrk_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4c06      	ldr	r4, [pc, #24]	; (80040e4 <_sbrk_r+0x1c>)
 80040cc:	2300      	movs	r3, #0
 80040ce:	4605      	mov	r5, r0
 80040d0:	4608      	mov	r0, r1
 80040d2:	6023      	str	r3, [r4, #0]
 80040d4:	f002 f9fa 	bl	80064cc <_sbrk>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	d102      	bne.n	80040e2 <_sbrk_r+0x1a>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	b103      	cbz	r3, 80040e2 <_sbrk_r+0x1a>
 80040e0:	602b      	str	r3, [r5, #0]
 80040e2:	bd38      	pop	{r3, r4, r5, pc}
 80040e4:	20001c98 	.word	0x20001c98

080040e8 <siprintf>:
 80040e8:	b40e      	push	{r1, r2, r3}
 80040ea:	b500      	push	{lr}
 80040ec:	b09c      	sub	sp, #112	; 0x70
 80040ee:	f44f 7102 	mov.w	r1, #520	; 0x208
 80040f2:	ab1d      	add	r3, sp, #116	; 0x74
 80040f4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80040f8:	9002      	str	r0, [sp, #8]
 80040fa:	9006      	str	r0, [sp, #24]
 80040fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004100:	480a      	ldr	r0, [pc, #40]	; (800412c <siprintf+0x44>)
 8004102:	9104      	str	r1, [sp, #16]
 8004104:	9107      	str	r1, [sp, #28]
 8004106:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800410a:	f853 2b04 	ldr.w	r2, [r3], #4
 800410e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004112:	6800      	ldr	r0, [r0, #0]
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	a902      	add	r1, sp, #8
 8004118:	f001 fe92 	bl	8005e40 <_svfiprintf_r>
 800411c:	9b02      	ldr	r3, [sp, #8]
 800411e:	2200      	movs	r2, #0
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	b01c      	add	sp, #112	; 0x70
 8004124:	f85d eb04 	ldr.w	lr, [sp], #4
 8004128:	b003      	add	sp, #12
 800412a:	4770      	bx	lr
 800412c:	20000168 	.word	0x20000168

08004130 <sulp>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	4604      	mov	r4, r0
 8004134:	460d      	mov	r5, r1
 8004136:	ec45 4b10 	vmov	d0, r4, r5
 800413a:	4616      	mov	r6, r2
 800413c:	f001 fcea 	bl	8005b14 <__ulp>
 8004140:	ec51 0b10 	vmov	r0, r1, d0
 8004144:	b17e      	cbz	r6, 8004166 <sulp+0x36>
 8004146:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800414a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800414e:	2b00      	cmp	r3, #0
 8004150:	dd09      	ble.n	8004166 <sulp+0x36>
 8004152:	051b      	lsls	r3, r3, #20
 8004154:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004158:	2400      	movs	r4, #0
 800415a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800415e:	4622      	mov	r2, r4
 8004160:	462b      	mov	r3, r5
 8004162:	f7fc fa45 	bl	80005f0 <__aeabi_dmul>
 8004166:	bd70      	pop	{r4, r5, r6, pc}

08004168 <_strtod_l>:
 8004168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416c:	b09f      	sub	sp, #124	; 0x7c
 800416e:	4698      	mov	r8, r3
 8004170:	9004      	str	r0, [sp, #16]
 8004172:	2300      	movs	r3, #0
 8004174:	4640      	mov	r0, r8
 8004176:	460c      	mov	r4, r1
 8004178:	9215      	str	r2, [sp, #84]	; 0x54
 800417a:	931a      	str	r3, [sp, #104]	; 0x68
 800417c:	f001 f9e8 	bl	8005550 <__localeconv_l>
 8004180:	4607      	mov	r7, r0
 8004182:	6800      	ldr	r0, [r0, #0]
 8004184:	f7fc f824 	bl	80001d0 <strlen>
 8004188:	f04f 0a00 	mov.w	sl, #0
 800418c:	4605      	mov	r5, r0
 800418e:	f04f 0b00 	mov.w	fp, #0
 8004192:	9419      	str	r4, [sp, #100]	; 0x64
 8004194:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004196:	781a      	ldrb	r2, [r3, #0]
 8004198:	2a0d      	cmp	r2, #13
 800419a:	d833      	bhi.n	8004204 <_strtod_l+0x9c>
 800419c:	2a09      	cmp	r2, #9
 800419e:	d237      	bcs.n	8004210 <_strtod_l+0xa8>
 80041a0:	2a00      	cmp	r2, #0
 80041a2:	d03f      	beq.n	8004224 <_strtod_l+0xbc>
 80041a4:	2300      	movs	r3, #0
 80041a6:	9309      	str	r3, [sp, #36]	; 0x24
 80041a8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80041aa:	7833      	ldrb	r3, [r6, #0]
 80041ac:	2b30      	cmp	r3, #48	; 0x30
 80041ae:	f040 8103 	bne.w	80043b8 <_strtod_l+0x250>
 80041b2:	7873      	ldrb	r3, [r6, #1]
 80041b4:	2b58      	cmp	r3, #88	; 0x58
 80041b6:	d001      	beq.n	80041bc <_strtod_l+0x54>
 80041b8:	2b78      	cmp	r3, #120	; 0x78
 80041ba:	d16b      	bne.n	8004294 <_strtod_l+0x12c>
 80041bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	ab1a      	add	r3, sp, #104	; 0x68
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	f8cd 8008 	str.w	r8, [sp, #8]
 80041c8:	ab1b      	add	r3, sp, #108	; 0x6c
 80041ca:	4aad      	ldr	r2, [pc, #692]	; (8004480 <_strtod_l+0x318>)
 80041cc:	9804      	ldr	r0, [sp, #16]
 80041ce:	a919      	add	r1, sp, #100	; 0x64
 80041d0:	f000 fee8 	bl	8004fa4 <__gethex>
 80041d4:	f010 0407 	ands.w	r4, r0, #7
 80041d8:	4605      	mov	r5, r0
 80041da:	d005      	beq.n	80041e8 <_strtod_l+0x80>
 80041dc:	2c06      	cmp	r4, #6
 80041de:	d12b      	bne.n	8004238 <_strtod_l+0xd0>
 80041e0:	3601      	adds	r6, #1
 80041e2:	2300      	movs	r3, #0
 80041e4:	9619      	str	r6, [sp, #100]	; 0x64
 80041e6:	9309      	str	r3, [sp, #36]	; 0x24
 80041e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f040 8590 	bne.w	8004d10 <_strtod_l+0xba8>
 80041f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f2:	b1e3      	cbz	r3, 800422e <_strtod_l+0xc6>
 80041f4:	4652      	mov	r2, sl
 80041f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80041fa:	ec43 2b10 	vmov	d0, r2, r3
 80041fe:	b01f      	add	sp, #124	; 0x7c
 8004200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004204:	2a2b      	cmp	r2, #43	; 0x2b
 8004206:	d006      	beq.n	8004216 <_strtod_l+0xae>
 8004208:	2a2d      	cmp	r2, #45	; 0x2d
 800420a:	d013      	beq.n	8004234 <_strtod_l+0xcc>
 800420c:	2a20      	cmp	r2, #32
 800420e:	d1c9      	bne.n	80041a4 <_strtod_l+0x3c>
 8004210:	3301      	adds	r3, #1
 8004212:	9319      	str	r3, [sp, #100]	; 0x64
 8004214:	e7be      	b.n	8004194 <_strtod_l+0x2c>
 8004216:	2200      	movs	r2, #0
 8004218:	9209      	str	r2, [sp, #36]	; 0x24
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	9219      	str	r2, [sp, #100]	; 0x64
 800421e:	785b      	ldrb	r3, [r3, #1]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1c1      	bne.n	80041a8 <_strtod_l+0x40>
 8004224:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004226:	9419      	str	r4, [sp, #100]	; 0x64
 8004228:	2b00      	cmp	r3, #0
 800422a:	f040 856f 	bne.w	8004d0c <_strtod_l+0xba4>
 800422e:	4652      	mov	r2, sl
 8004230:	465b      	mov	r3, fp
 8004232:	e7e2      	b.n	80041fa <_strtod_l+0x92>
 8004234:	2201      	movs	r2, #1
 8004236:	e7ef      	b.n	8004218 <_strtod_l+0xb0>
 8004238:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800423a:	b13a      	cbz	r2, 800424c <_strtod_l+0xe4>
 800423c:	2135      	movs	r1, #53	; 0x35
 800423e:	a81c      	add	r0, sp, #112	; 0x70
 8004240:	f001 fd59 	bl	8005cf6 <__copybits>
 8004244:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004246:	9804      	ldr	r0, [sp, #16]
 8004248:	f001 f9d7 	bl	80055fa <_Bfree>
 800424c:	3c01      	subs	r4, #1
 800424e:	2c04      	cmp	r4, #4
 8004250:	d808      	bhi.n	8004264 <_strtod_l+0xfc>
 8004252:	e8df f004 	tbb	[pc, r4]
 8004256:	030c      	.short	0x030c
 8004258:	1a17      	.short	0x1a17
 800425a:	0c          	.byte	0x0c
 800425b:	00          	.byte	0x00
 800425c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8004260:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8004264:	0729      	lsls	r1, r5, #28
 8004266:	d5bf      	bpl.n	80041e8 <_strtod_l+0x80>
 8004268:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800426c:	e7bc      	b.n	80041e8 <_strtod_l+0x80>
 800426e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004270:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004272:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8004276:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800427a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800427e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004282:	e7ef      	b.n	8004264 <_strtod_l+0xfc>
 8004284:	f8df b204 	ldr.w	fp, [pc, #516]	; 800448c <_strtod_l+0x324>
 8004288:	e7ec      	b.n	8004264 <_strtod_l+0xfc>
 800428a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800428e:	f04f 3aff 	mov.w	sl, #4294967295
 8004292:	e7e7      	b.n	8004264 <_strtod_l+0xfc>
 8004294:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	9219      	str	r2, [sp, #100]	; 0x64
 800429a:	785b      	ldrb	r3, [r3, #1]
 800429c:	2b30      	cmp	r3, #48	; 0x30
 800429e:	d0f9      	beq.n	8004294 <_strtod_l+0x12c>
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0a1      	beq.n	80041e8 <_strtod_l+0x80>
 80042a4:	2301      	movs	r3, #1
 80042a6:	f04f 0900 	mov.w	r9, #0
 80042aa:	9308      	str	r3, [sp, #32]
 80042ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80042ae:	930a      	str	r3, [sp, #40]	; 0x28
 80042b0:	f8cd 901c 	str.w	r9, [sp, #28]
 80042b4:	f8cd 9018 	str.w	r9, [sp, #24]
 80042b8:	220a      	movs	r2, #10
 80042ba:	9819      	ldr	r0, [sp, #100]	; 0x64
 80042bc:	7806      	ldrb	r6, [r0, #0]
 80042be:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80042c2:	b2d9      	uxtb	r1, r3
 80042c4:	2909      	cmp	r1, #9
 80042c6:	d979      	bls.n	80043bc <_strtod_l+0x254>
 80042c8:	462a      	mov	r2, r5
 80042ca:	6839      	ldr	r1, [r7, #0]
 80042cc:	f002 f848 	bl	8006360 <strncmp>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	f000 8082 	beq.w	80043da <_strtod_l+0x272>
 80042d6:	2000      	movs	r0, #0
 80042d8:	9d06      	ldr	r5, [sp, #24]
 80042da:	4633      	mov	r3, r6
 80042dc:	4602      	mov	r2, r0
 80042de:	4601      	mov	r1, r0
 80042e0:	2b65      	cmp	r3, #101	; 0x65
 80042e2:	d002      	beq.n	80042ea <_strtod_l+0x182>
 80042e4:	2b45      	cmp	r3, #69	; 0x45
 80042e6:	f040 80e8 	bne.w	80044ba <_strtod_l+0x352>
 80042ea:	b925      	cbnz	r5, 80042f6 <_strtod_l+0x18e>
 80042ec:	b910      	cbnz	r0, 80042f4 <_strtod_l+0x18c>
 80042ee:	9b08      	ldr	r3, [sp, #32]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d097      	beq.n	8004224 <_strtod_l+0xbc>
 80042f4:	2500      	movs	r5, #0
 80042f6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80042f8:	1c63      	adds	r3, r4, #1
 80042fa:	9319      	str	r3, [sp, #100]	; 0x64
 80042fc:	7863      	ldrb	r3, [r4, #1]
 80042fe:	2b2b      	cmp	r3, #43	; 0x2b
 8004300:	f000 80c8 	beq.w	8004494 <_strtod_l+0x32c>
 8004304:	2b2d      	cmp	r3, #45	; 0x2d
 8004306:	f000 80cb 	beq.w	80044a0 <_strtod_l+0x338>
 800430a:	2600      	movs	r6, #0
 800430c:	9605      	str	r6, [sp, #20]
 800430e:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004312:	2e09      	cmp	r6, #9
 8004314:	f200 80d0 	bhi.w	80044b8 <_strtod_l+0x350>
 8004318:	2b30      	cmp	r3, #48	; 0x30
 800431a:	f000 80c3 	beq.w	80044a4 <_strtod_l+0x33c>
 800431e:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8004322:	2e08      	cmp	r6, #8
 8004324:	f200 80c9 	bhi.w	80044ba <_strtod_l+0x352>
 8004328:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800432c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800432e:	f04f 0c0a 	mov.w	ip, #10
 8004332:	461f      	mov	r7, r3
 8004334:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004336:	1c5e      	adds	r6, r3, #1
 8004338:	9619      	str	r6, [sp, #100]	; 0x64
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004340:	f1b8 0f09 	cmp.w	r8, #9
 8004344:	f240 80b3 	bls.w	80044ae <_strtod_l+0x346>
 8004348:	1bf6      	subs	r6, r6, r7
 800434a:	2e08      	cmp	r6, #8
 800434c:	f644 681f 	movw	r8, #19999	; 0x4e1f
 8004350:	dc02      	bgt.n	8004358 <_strtod_l+0x1f0>
 8004352:	45f0      	cmp	r8, lr
 8004354:	bfa8      	it	ge
 8004356:	46f0      	movge	r8, lr
 8004358:	9e05      	ldr	r6, [sp, #20]
 800435a:	b10e      	cbz	r6, 8004360 <_strtod_l+0x1f8>
 800435c:	f1c8 0800 	rsb	r8, r8, #0
 8004360:	2d00      	cmp	r5, #0
 8004362:	f040 80d0 	bne.w	8004506 <_strtod_l+0x39e>
 8004366:	2800      	cmp	r0, #0
 8004368:	f47f af3e 	bne.w	80041e8 <_strtod_l+0x80>
 800436c:	9a08      	ldr	r2, [sp, #32]
 800436e:	2a00      	cmp	r2, #0
 8004370:	f47f af3a 	bne.w	80041e8 <_strtod_l+0x80>
 8004374:	2900      	cmp	r1, #0
 8004376:	f47f af55 	bne.w	8004224 <_strtod_l+0xbc>
 800437a:	2b4e      	cmp	r3, #78	; 0x4e
 800437c:	f000 80a6 	beq.w	80044cc <_strtod_l+0x364>
 8004380:	f300 809e 	bgt.w	80044c0 <_strtod_l+0x358>
 8004384:	2b49      	cmp	r3, #73	; 0x49
 8004386:	f47f af4d 	bne.w	8004224 <_strtod_l+0xbc>
 800438a:	493e      	ldr	r1, [pc, #248]	; (8004484 <_strtod_l+0x31c>)
 800438c:	a819      	add	r0, sp, #100	; 0x64
 800438e:	f001 f839 	bl	8005404 <__match>
 8004392:	2800      	cmp	r0, #0
 8004394:	f43f af46 	beq.w	8004224 <_strtod_l+0xbc>
 8004398:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800439a:	493b      	ldr	r1, [pc, #236]	; (8004488 <_strtod_l+0x320>)
 800439c:	3b01      	subs	r3, #1
 800439e:	a819      	add	r0, sp, #100	; 0x64
 80043a0:	9319      	str	r3, [sp, #100]	; 0x64
 80043a2:	f001 f82f 	bl	8005404 <__match>
 80043a6:	b910      	cbnz	r0, 80043ae <_strtod_l+0x246>
 80043a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043aa:	3301      	adds	r3, #1
 80043ac:	9319      	str	r3, [sp, #100]	; 0x64
 80043ae:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 800448c <_strtod_l+0x324>
 80043b2:	f04f 0a00 	mov.w	sl, #0
 80043b6:	e717      	b.n	80041e8 <_strtod_l+0x80>
 80043b8:	2300      	movs	r3, #0
 80043ba:	e774      	b.n	80042a6 <_strtod_l+0x13e>
 80043bc:	9906      	ldr	r1, [sp, #24]
 80043be:	2908      	cmp	r1, #8
 80043c0:	bfdd      	ittte	le
 80043c2:	9907      	ldrle	r1, [sp, #28]
 80043c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80043c8:	9307      	strle	r3, [sp, #28]
 80043ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 80043ce:	9b06      	ldr	r3, [sp, #24]
 80043d0:	3001      	adds	r0, #1
 80043d2:	3301      	adds	r3, #1
 80043d4:	9306      	str	r3, [sp, #24]
 80043d6:	9019      	str	r0, [sp, #100]	; 0x64
 80043d8:	e76f      	b.n	80042ba <_strtod_l+0x152>
 80043da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043dc:	195a      	adds	r2, r3, r5
 80043de:	9219      	str	r2, [sp, #100]	; 0x64
 80043e0:	9a06      	ldr	r2, [sp, #24]
 80043e2:	5d5b      	ldrb	r3, [r3, r5]
 80043e4:	2a00      	cmp	r2, #0
 80043e6:	d148      	bne.n	800447a <_strtod_l+0x312>
 80043e8:	4610      	mov	r0, r2
 80043ea:	2b30      	cmp	r3, #48	; 0x30
 80043ec:	d02a      	beq.n	8004444 <_strtod_l+0x2dc>
 80043ee:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80043f2:	2a08      	cmp	r2, #8
 80043f4:	f200 8491 	bhi.w	8004d1a <_strtod_l+0xbb2>
 80043f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80043fa:	920a      	str	r2, [sp, #40]	; 0x28
 80043fc:	4602      	mov	r2, r0
 80043fe:	2000      	movs	r0, #0
 8004400:	4605      	mov	r5, r0
 8004402:	3b30      	subs	r3, #48	; 0x30
 8004404:	f100 0101 	add.w	r1, r0, #1
 8004408:	d011      	beq.n	800442e <_strtod_l+0x2c6>
 800440a:	440a      	add	r2, r1
 800440c:	eb00 0c05 	add.w	ip, r0, r5
 8004410:	4629      	mov	r1, r5
 8004412:	260a      	movs	r6, #10
 8004414:	4561      	cmp	r1, ip
 8004416:	d11b      	bne.n	8004450 <_strtod_l+0x2e8>
 8004418:	4428      	add	r0, r5
 800441a:	2808      	cmp	r0, #8
 800441c:	f100 0501 	add.w	r5, r0, #1
 8004420:	dc25      	bgt.n	800446e <_strtod_l+0x306>
 8004422:	9807      	ldr	r0, [sp, #28]
 8004424:	210a      	movs	r1, #10
 8004426:	fb01 3300 	mla	r3, r1, r0, r3
 800442a:	9307      	str	r3, [sp, #28]
 800442c:	2100      	movs	r1, #0
 800442e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004430:	1c58      	adds	r0, r3, #1
 8004432:	9019      	str	r0, [sp, #100]	; 0x64
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	4608      	mov	r0, r1
 8004438:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800443c:	2909      	cmp	r1, #9
 800443e:	d9e0      	bls.n	8004402 <_strtod_l+0x29a>
 8004440:	2101      	movs	r1, #1
 8004442:	e74d      	b.n	80042e0 <_strtod_l+0x178>
 8004444:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	9219      	str	r2, [sp, #100]	; 0x64
 800444a:	3001      	adds	r0, #1
 800444c:	785b      	ldrb	r3, [r3, #1]
 800444e:	e7cc      	b.n	80043ea <_strtod_l+0x282>
 8004450:	3101      	adds	r1, #1
 8004452:	f101 3eff 	add.w	lr, r1, #4294967295
 8004456:	f1be 0f08 	cmp.w	lr, #8
 800445a:	dc03      	bgt.n	8004464 <_strtod_l+0x2fc>
 800445c:	9f07      	ldr	r7, [sp, #28]
 800445e:	4377      	muls	r7, r6
 8004460:	9707      	str	r7, [sp, #28]
 8004462:	e7d7      	b.n	8004414 <_strtod_l+0x2ac>
 8004464:	2910      	cmp	r1, #16
 8004466:	bfd8      	it	le
 8004468:	fb06 f909 	mulle.w	r9, r6, r9
 800446c:	e7d2      	b.n	8004414 <_strtod_l+0x2ac>
 800446e:	2d10      	cmp	r5, #16
 8004470:	bfdc      	itt	le
 8004472:	210a      	movle	r1, #10
 8004474:	fb01 3909 	mlale	r9, r1, r9, r3
 8004478:	e7d8      	b.n	800442c <_strtod_l+0x2c4>
 800447a:	4602      	mov	r2, r0
 800447c:	9d06      	ldr	r5, [sp, #24]
 800447e:	e7db      	b.n	8004438 <_strtod_l+0x2d0>
 8004480:	080065bc 	.word	0x080065bc
 8004484:	080065ae 	.word	0x080065ae
 8004488:	080065b1 	.word	0x080065b1
 800448c:	7ff00000 	.word	0x7ff00000
 8004490:	2101      	movs	r1, #1
 8004492:	e72b      	b.n	80042ec <_strtod_l+0x184>
 8004494:	2300      	movs	r3, #0
 8004496:	9305      	str	r3, [sp, #20]
 8004498:	1ca3      	adds	r3, r4, #2
 800449a:	9319      	str	r3, [sp, #100]	; 0x64
 800449c:	78a3      	ldrb	r3, [r4, #2]
 800449e:	e736      	b.n	800430e <_strtod_l+0x1a6>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e7f8      	b.n	8004496 <_strtod_l+0x32e>
 80044a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80044a6:	1c5e      	adds	r6, r3, #1
 80044a8:	9619      	str	r6, [sp, #100]	; 0x64
 80044aa:	785b      	ldrb	r3, [r3, #1]
 80044ac:	e734      	b.n	8004318 <_strtod_l+0x1b0>
 80044ae:	fb0c 3e0e 	mla	lr, ip, lr, r3
 80044b2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80044b6:	e73d      	b.n	8004334 <_strtod_l+0x1cc>
 80044b8:	9419      	str	r4, [sp, #100]	; 0x64
 80044ba:	f04f 0800 	mov.w	r8, #0
 80044be:	e74f      	b.n	8004360 <_strtod_l+0x1f8>
 80044c0:	2b69      	cmp	r3, #105	; 0x69
 80044c2:	f43f af62 	beq.w	800438a <_strtod_l+0x222>
 80044c6:	2b6e      	cmp	r3, #110	; 0x6e
 80044c8:	f47f aeac 	bne.w	8004224 <_strtod_l+0xbc>
 80044cc:	4988      	ldr	r1, [pc, #544]	; (80046f0 <_strtod_l+0x588>)
 80044ce:	a819      	add	r0, sp, #100	; 0x64
 80044d0:	f000 ff98 	bl	8005404 <__match>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	f43f aea5 	beq.w	8004224 <_strtod_l+0xbc>
 80044da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b28      	cmp	r3, #40	; 0x28
 80044e0:	d10e      	bne.n	8004500 <_strtod_l+0x398>
 80044e2:	aa1c      	add	r2, sp, #112	; 0x70
 80044e4:	4983      	ldr	r1, [pc, #524]	; (80046f4 <_strtod_l+0x58c>)
 80044e6:	a819      	add	r0, sp, #100	; 0x64
 80044e8:	f000 ff9f 	bl	800542a <__hexnan>
 80044ec:	2805      	cmp	r0, #5
 80044ee:	d107      	bne.n	8004500 <_strtod_l+0x398>
 80044f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80044f2:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80044f6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80044fa:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80044fe:	e673      	b.n	80041e8 <_strtod_l+0x80>
 8004500:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004704 <_strtod_l+0x59c>
 8004504:	e755      	b.n	80043b2 <_strtod_l+0x24a>
 8004506:	9b06      	ldr	r3, [sp, #24]
 8004508:	9807      	ldr	r0, [sp, #28]
 800450a:	2b00      	cmp	r3, #0
 800450c:	bf08      	it	eq
 800450e:	462b      	moveq	r3, r5
 8004510:	2d10      	cmp	r5, #16
 8004512:	462c      	mov	r4, r5
 8004514:	eba8 0802 	sub.w	r8, r8, r2
 8004518:	bfa8      	it	ge
 800451a:	2410      	movge	r4, #16
 800451c:	9306      	str	r3, [sp, #24]
 800451e:	f7fb fff1 	bl	8000504 <__aeabi_ui2d>
 8004522:	2c09      	cmp	r4, #9
 8004524:	4682      	mov	sl, r0
 8004526:	468b      	mov	fp, r1
 8004528:	dd13      	ble.n	8004552 <_strtod_l+0x3ea>
 800452a:	4b73      	ldr	r3, [pc, #460]	; (80046f8 <_strtod_l+0x590>)
 800452c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004530:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004534:	f7fc f85c 	bl	80005f0 <__aeabi_dmul>
 8004538:	4606      	mov	r6, r0
 800453a:	4648      	mov	r0, r9
 800453c:	460f      	mov	r7, r1
 800453e:	f7fb ffe1 	bl	8000504 <__aeabi_ui2d>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4630      	mov	r0, r6
 8004548:	4639      	mov	r1, r7
 800454a:	f7fb fe9f 	bl	800028c <__adddf3>
 800454e:	4682      	mov	sl, r0
 8004550:	468b      	mov	fp, r1
 8004552:	2d0f      	cmp	r5, #15
 8004554:	dc36      	bgt.n	80045c4 <_strtod_l+0x45c>
 8004556:	f1b8 0f00 	cmp.w	r8, #0
 800455a:	f43f ae45 	beq.w	80041e8 <_strtod_l+0x80>
 800455e:	dd24      	ble.n	80045aa <_strtod_l+0x442>
 8004560:	f1b8 0f16 	cmp.w	r8, #22
 8004564:	dc0b      	bgt.n	800457e <_strtod_l+0x416>
 8004566:	4d64      	ldr	r5, [pc, #400]	; (80046f8 <_strtod_l+0x590>)
 8004568:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 800456c:	e9d8 0100 	ldrd	r0, r1, [r8]
 8004570:	4652      	mov	r2, sl
 8004572:	465b      	mov	r3, fp
 8004574:	f7fc f83c 	bl	80005f0 <__aeabi_dmul>
 8004578:	4682      	mov	sl, r0
 800457a:	468b      	mov	fp, r1
 800457c:	e634      	b.n	80041e8 <_strtod_l+0x80>
 800457e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004582:	4598      	cmp	r8, r3
 8004584:	dc1e      	bgt.n	80045c4 <_strtod_l+0x45c>
 8004586:	4c5c      	ldr	r4, [pc, #368]	; (80046f8 <_strtod_l+0x590>)
 8004588:	f1c5 050f 	rsb	r5, r5, #15
 800458c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004590:	eba8 0505 	sub.w	r5, r8, r5
 8004594:	4652      	mov	r2, sl
 8004596:	465b      	mov	r3, fp
 8004598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800459c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80045a0:	f7fc f826 	bl	80005f0 <__aeabi_dmul>
 80045a4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80045a8:	e7e4      	b.n	8004574 <_strtod_l+0x40c>
 80045aa:	f118 0f16 	cmn.w	r8, #22
 80045ae:	db09      	blt.n	80045c4 <_strtod_l+0x45c>
 80045b0:	4d51      	ldr	r5, [pc, #324]	; (80046f8 <_strtod_l+0x590>)
 80045b2:	eba5 08c8 	sub.w	r8, r5, r8, lsl #3
 80045b6:	e9d8 2300 	ldrd	r2, r3, [r8]
 80045ba:	4650      	mov	r0, sl
 80045bc:	4659      	mov	r1, fp
 80045be:	f7fc f941 	bl	8000844 <__aeabi_ddiv>
 80045c2:	e7d9      	b.n	8004578 <_strtod_l+0x410>
 80045c4:	1b2c      	subs	r4, r5, r4
 80045c6:	4444      	add	r4, r8
 80045c8:	2c00      	cmp	r4, #0
 80045ca:	dd70      	ble.n	80046ae <_strtod_l+0x546>
 80045cc:	f014 030f 	ands.w	r3, r4, #15
 80045d0:	d00a      	beq.n	80045e8 <_strtod_l+0x480>
 80045d2:	4949      	ldr	r1, [pc, #292]	; (80046f8 <_strtod_l+0x590>)
 80045d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80045d8:	4652      	mov	r2, sl
 80045da:	465b      	mov	r3, fp
 80045dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045e0:	f7fc f806 	bl	80005f0 <__aeabi_dmul>
 80045e4:	4682      	mov	sl, r0
 80045e6:	468b      	mov	fp, r1
 80045e8:	f034 040f 	bics.w	r4, r4, #15
 80045ec:	d050      	beq.n	8004690 <_strtod_l+0x528>
 80045ee:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80045f2:	dd23      	ble.n	800463c <_strtod_l+0x4d4>
 80045f4:	2400      	movs	r4, #0
 80045f6:	4625      	mov	r5, r4
 80045f8:	9407      	str	r4, [sp, #28]
 80045fa:	9406      	str	r4, [sp, #24]
 80045fc:	9a04      	ldr	r2, [sp, #16]
 80045fe:	f8df b108 	ldr.w	fp, [pc, #264]	; 8004708 <_strtod_l+0x5a0>
 8004602:	2322      	movs	r3, #34	; 0x22
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	f04f 0a00 	mov.w	sl, #0
 800460a:	9b07      	ldr	r3, [sp, #28]
 800460c:	2b00      	cmp	r3, #0
 800460e:	f43f adeb 	beq.w	80041e8 <_strtod_l+0x80>
 8004612:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004614:	9804      	ldr	r0, [sp, #16]
 8004616:	f000 fff0 	bl	80055fa <_Bfree>
 800461a:	9906      	ldr	r1, [sp, #24]
 800461c:	9804      	ldr	r0, [sp, #16]
 800461e:	f000 ffec 	bl	80055fa <_Bfree>
 8004622:	4629      	mov	r1, r5
 8004624:	9804      	ldr	r0, [sp, #16]
 8004626:	f000 ffe8 	bl	80055fa <_Bfree>
 800462a:	9907      	ldr	r1, [sp, #28]
 800462c:	9804      	ldr	r0, [sp, #16]
 800462e:	f000 ffe4 	bl	80055fa <_Bfree>
 8004632:	4621      	mov	r1, r4
 8004634:	9804      	ldr	r0, [sp, #16]
 8004636:	f000 ffe0 	bl	80055fa <_Bfree>
 800463a:	e5d5      	b.n	80041e8 <_strtod_l+0x80>
 800463c:	4e2f      	ldr	r6, [pc, #188]	; (80046fc <_strtod_l+0x594>)
 800463e:	2300      	movs	r3, #0
 8004640:	1124      	asrs	r4, r4, #4
 8004642:	4650      	mov	r0, sl
 8004644:	4659      	mov	r1, fp
 8004646:	4699      	mov	r9, r3
 8004648:	4637      	mov	r7, r6
 800464a:	2c01      	cmp	r4, #1
 800464c:	dc23      	bgt.n	8004696 <_strtod_l+0x52e>
 800464e:	b10b      	cbz	r3, 8004654 <_strtod_l+0x4ec>
 8004650:	4682      	mov	sl, r0
 8004652:	468b      	mov	fp, r1
 8004654:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004658:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
 800465c:	4652      	mov	r2, sl
 800465e:	465b      	mov	r3, fp
 8004660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004664:	f7fb ffc4 	bl	80005f0 <__aeabi_dmul>
 8004668:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800466c:	468b      	mov	fp, r1
 800466e:	460a      	mov	r2, r1
 8004670:	0d1b      	lsrs	r3, r3, #20
 8004672:	4923      	ldr	r1, [pc, #140]	; (8004700 <_strtod_l+0x598>)
 8004674:	051b      	lsls	r3, r3, #20
 8004676:	428b      	cmp	r3, r1
 8004678:	4682      	mov	sl, r0
 800467a:	d8bb      	bhi.n	80045f4 <_strtod_l+0x48c>
 800467c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004680:	428b      	cmp	r3, r1
 8004682:	bf86      	itte	hi
 8004684:	f8df b084 	ldrhi.w	fp, [pc, #132]	; 800470c <_strtod_l+0x5a4>
 8004688:	f04f 3aff 	movhi.w	sl, #4294967295
 800468c:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004690:	2300      	movs	r3, #0
 8004692:	9305      	str	r3, [sp, #20]
 8004694:	e06d      	b.n	8004772 <_strtod_l+0x60a>
 8004696:	07e2      	lsls	r2, r4, #31
 8004698:	d504      	bpl.n	80046a4 <_strtod_l+0x53c>
 800469a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800469e:	f7fb ffa7 	bl	80005f0 <__aeabi_dmul>
 80046a2:	2301      	movs	r3, #1
 80046a4:	f109 0901 	add.w	r9, r9, #1
 80046a8:	1064      	asrs	r4, r4, #1
 80046aa:	3608      	adds	r6, #8
 80046ac:	e7cd      	b.n	800464a <_strtod_l+0x4e2>
 80046ae:	d0ef      	beq.n	8004690 <_strtod_l+0x528>
 80046b0:	4264      	negs	r4, r4
 80046b2:	f014 020f 	ands.w	r2, r4, #15
 80046b6:	d00a      	beq.n	80046ce <_strtod_l+0x566>
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <_strtod_l+0x590>)
 80046ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046be:	4650      	mov	r0, sl
 80046c0:	4659      	mov	r1, fp
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	f7fc f8bd 	bl	8000844 <__aeabi_ddiv>
 80046ca:	4682      	mov	sl, r0
 80046cc:	468b      	mov	fp, r1
 80046ce:	1124      	asrs	r4, r4, #4
 80046d0:	d0de      	beq.n	8004690 <_strtod_l+0x528>
 80046d2:	2c1f      	cmp	r4, #31
 80046d4:	dd1c      	ble.n	8004710 <_strtod_l+0x5a8>
 80046d6:	2400      	movs	r4, #0
 80046d8:	4625      	mov	r5, r4
 80046da:	9407      	str	r4, [sp, #28]
 80046dc:	9406      	str	r4, [sp, #24]
 80046de:	9a04      	ldr	r2, [sp, #16]
 80046e0:	2322      	movs	r3, #34	; 0x22
 80046e2:	f04f 0a00 	mov.w	sl, #0
 80046e6:	f04f 0b00 	mov.w	fp, #0
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	e78d      	b.n	800460a <_strtod_l+0x4a2>
 80046ee:	bf00      	nop
 80046f0:	080065b7 	.word	0x080065b7
 80046f4:	080065d0 	.word	0x080065d0
 80046f8:	08006648 	.word	0x08006648
 80046fc:	08006620 	.word	0x08006620
 8004700:	7ca00000 	.word	0x7ca00000
 8004704:	fff80000 	.word	0xfff80000
 8004708:	7ff00000 	.word	0x7ff00000
 800470c:	7fefffff 	.word	0x7fefffff
 8004710:	f014 0310 	ands.w	r3, r4, #16
 8004714:	bf18      	it	ne
 8004716:	236a      	movne	r3, #106	; 0x6a
 8004718:	4ea0      	ldr	r6, [pc, #640]	; (800499c <_strtod_l+0x834>)
 800471a:	9305      	str	r3, [sp, #20]
 800471c:	4650      	mov	r0, sl
 800471e:	4659      	mov	r1, fp
 8004720:	2300      	movs	r3, #0
 8004722:	2c00      	cmp	r4, #0
 8004724:	f300 8106 	bgt.w	8004934 <_strtod_l+0x7cc>
 8004728:	b10b      	cbz	r3, 800472e <_strtod_l+0x5c6>
 800472a:	4682      	mov	sl, r0
 800472c:	468b      	mov	fp, r1
 800472e:	9b05      	ldr	r3, [sp, #20]
 8004730:	b1bb      	cbz	r3, 8004762 <_strtod_l+0x5fa>
 8004732:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004736:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800473a:	2b00      	cmp	r3, #0
 800473c:	4659      	mov	r1, fp
 800473e:	dd10      	ble.n	8004762 <_strtod_l+0x5fa>
 8004740:	2b1f      	cmp	r3, #31
 8004742:	f340 8101 	ble.w	8004948 <_strtod_l+0x7e0>
 8004746:	2b34      	cmp	r3, #52	; 0x34
 8004748:	bfde      	ittt	le
 800474a:	3b20      	suble	r3, #32
 800474c:	f04f 32ff 	movle.w	r2, #4294967295
 8004750:	fa02 f303 	lslle.w	r3, r2, r3
 8004754:	f04f 0a00 	mov.w	sl, #0
 8004758:	bfcc      	ite	gt
 800475a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800475e:	ea03 0b01 	andle.w	fp, r3, r1
 8004762:	2200      	movs	r2, #0
 8004764:	2300      	movs	r3, #0
 8004766:	4650      	mov	r0, sl
 8004768:	4659      	mov	r1, fp
 800476a:	f7fc f9a9 	bl	8000ac0 <__aeabi_dcmpeq>
 800476e:	2800      	cmp	r0, #0
 8004770:	d1b1      	bne.n	80046d6 <_strtod_l+0x56e>
 8004772:	9b07      	ldr	r3, [sp, #28]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	9a06      	ldr	r2, [sp, #24]
 8004778:	990a      	ldr	r1, [sp, #40]	; 0x28
 800477a:	9804      	ldr	r0, [sp, #16]
 800477c:	462b      	mov	r3, r5
 800477e:	f000 ff8e 	bl	800569e <__s2b>
 8004782:	9007      	str	r0, [sp, #28]
 8004784:	2800      	cmp	r0, #0
 8004786:	f43f af35 	beq.w	80045f4 <_strtod_l+0x48c>
 800478a:	f1b8 0f00 	cmp.w	r8, #0
 800478e:	f1c8 0300 	rsb	r3, r8, #0
 8004792:	bfa8      	it	ge
 8004794:	2300      	movge	r3, #0
 8004796:	930e      	str	r3, [sp, #56]	; 0x38
 8004798:	2400      	movs	r4, #0
 800479a:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 800479e:	930f      	str	r3, [sp, #60]	; 0x3c
 80047a0:	4625      	mov	r5, r4
 80047a2:	9b07      	ldr	r3, [sp, #28]
 80047a4:	9804      	ldr	r0, [sp, #16]
 80047a6:	6859      	ldr	r1, [r3, #4]
 80047a8:	f000 fef3 	bl	8005592 <_Balloc>
 80047ac:	9006      	str	r0, [sp, #24]
 80047ae:	2800      	cmp	r0, #0
 80047b0:	f43f af24 	beq.w	80045fc <_strtod_l+0x494>
 80047b4:	9b07      	ldr	r3, [sp, #28]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	3202      	adds	r2, #2
 80047ba:	f103 010c 	add.w	r1, r3, #12
 80047be:	0092      	lsls	r2, r2, #2
 80047c0:	300c      	adds	r0, #12
 80047c2:	f000 fed9 	bl	8005578 <memcpy>
 80047c6:	aa1c      	add	r2, sp, #112	; 0x70
 80047c8:	a91b      	add	r1, sp, #108	; 0x6c
 80047ca:	ec4b ab10 	vmov	d0, sl, fp
 80047ce:	9804      	ldr	r0, [sp, #16]
 80047d0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80047d4:	f001 fa14 	bl	8005c00 <__d2b>
 80047d8:	901a      	str	r0, [sp, #104]	; 0x68
 80047da:	2800      	cmp	r0, #0
 80047dc:	f43f af0e 	beq.w	80045fc <_strtod_l+0x494>
 80047e0:	2101      	movs	r1, #1
 80047e2:	9804      	ldr	r0, [sp, #16]
 80047e4:	f000 ffe7 	bl	80057b6 <__i2b>
 80047e8:	4605      	mov	r5, r0
 80047ea:	2800      	cmp	r0, #0
 80047ec:	f43f af06 	beq.w	80045fc <_strtod_l+0x494>
 80047f0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80047f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80047f4:	2e00      	cmp	r6, #0
 80047f6:	bfab      	itete	ge
 80047f8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80047fa:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 80047fc:	9f0f      	ldrge	r7, [sp, #60]	; 0x3c
 80047fe:	f8dd 8038 	ldrlt.w	r8, [sp, #56]	; 0x38
 8004802:	bfac      	ite	ge
 8004804:	eb03 0806 	addge.w	r8, r3, r6
 8004808:	1b9f      	sublt	r7, r3, r6
 800480a:	9b05      	ldr	r3, [sp, #20]
 800480c:	1af6      	subs	r6, r6, r3
 800480e:	4416      	add	r6, r2
 8004810:	4b63      	ldr	r3, [pc, #396]	; (80049a0 <_strtod_l+0x838>)
 8004812:	3e01      	subs	r6, #1
 8004814:	429e      	cmp	r6, r3
 8004816:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800481a:	f280 80a8 	bge.w	800496e <_strtod_l+0x806>
 800481e:	1b9b      	subs	r3, r3, r6
 8004820:	2b1f      	cmp	r3, #31
 8004822:	eba2 0203 	sub.w	r2, r2, r3
 8004826:	f04f 0901 	mov.w	r9, #1
 800482a:	f300 8094 	bgt.w	8004956 <_strtod_l+0x7ee>
 800482e:	fa09 f303 	lsl.w	r3, r9, r3
 8004832:	9314      	str	r3, [sp, #80]	; 0x50
 8004834:	2600      	movs	r6, #0
 8004836:	eb08 0902 	add.w	r9, r8, r2
 800483a:	9b05      	ldr	r3, [sp, #20]
 800483c:	45c8      	cmp	r8, r9
 800483e:	4417      	add	r7, r2
 8004840:	441f      	add	r7, r3
 8004842:	4643      	mov	r3, r8
 8004844:	bfa8      	it	ge
 8004846:	464b      	movge	r3, r9
 8004848:	42bb      	cmp	r3, r7
 800484a:	bfa8      	it	ge
 800484c:	463b      	movge	r3, r7
 800484e:	2b00      	cmp	r3, #0
 8004850:	bfc2      	ittt	gt
 8004852:	eba9 0903 	subgt.w	r9, r9, r3
 8004856:	1aff      	subgt	r7, r7, r3
 8004858:	eba8 0803 	subgt.w	r8, r8, r3
 800485c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800485e:	b1bb      	cbz	r3, 8004890 <_strtod_l+0x728>
 8004860:	4629      	mov	r1, r5
 8004862:	461a      	mov	r2, r3
 8004864:	9804      	ldr	r0, [sp, #16]
 8004866:	f001 f83d 	bl	80058e4 <__pow5mult>
 800486a:	4605      	mov	r5, r0
 800486c:	2800      	cmp	r0, #0
 800486e:	f43f aec5 	beq.w	80045fc <_strtod_l+0x494>
 8004872:	4601      	mov	r1, r0
 8004874:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004876:	9804      	ldr	r0, [sp, #16]
 8004878:	f000 ffa6 	bl	80057c8 <__multiply>
 800487c:	9008      	str	r0, [sp, #32]
 800487e:	2800      	cmp	r0, #0
 8004880:	f43f aebc 	beq.w	80045fc <_strtod_l+0x494>
 8004884:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004886:	9804      	ldr	r0, [sp, #16]
 8004888:	f000 feb7 	bl	80055fa <_Bfree>
 800488c:	9b08      	ldr	r3, [sp, #32]
 800488e:	931a      	str	r3, [sp, #104]	; 0x68
 8004890:	f1b9 0f00 	cmp.w	r9, #0
 8004894:	dc6f      	bgt.n	8004976 <_strtod_l+0x80e>
 8004896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d175      	bne.n	8004988 <_strtod_l+0x820>
 800489c:	2f00      	cmp	r7, #0
 800489e:	dd08      	ble.n	80048b2 <_strtod_l+0x74a>
 80048a0:	463a      	mov	r2, r7
 80048a2:	9906      	ldr	r1, [sp, #24]
 80048a4:	9804      	ldr	r0, [sp, #16]
 80048a6:	f001 f86b 	bl	8005980 <__lshift>
 80048aa:	9006      	str	r0, [sp, #24]
 80048ac:	2800      	cmp	r0, #0
 80048ae:	f43f aea5 	beq.w	80045fc <_strtod_l+0x494>
 80048b2:	f1b8 0f00 	cmp.w	r8, #0
 80048b6:	dd08      	ble.n	80048ca <_strtod_l+0x762>
 80048b8:	4629      	mov	r1, r5
 80048ba:	4642      	mov	r2, r8
 80048bc:	9804      	ldr	r0, [sp, #16]
 80048be:	f001 f85f 	bl	8005980 <__lshift>
 80048c2:	4605      	mov	r5, r0
 80048c4:	2800      	cmp	r0, #0
 80048c6:	f43f ae99 	beq.w	80045fc <_strtod_l+0x494>
 80048ca:	9a06      	ldr	r2, [sp, #24]
 80048cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80048ce:	9804      	ldr	r0, [sp, #16]
 80048d0:	f001 f8c1 	bl	8005a56 <__mdiff>
 80048d4:	4604      	mov	r4, r0
 80048d6:	2800      	cmp	r0, #0
 80048d8:	f43f ae90 	beq.w	80045fc <_strtod_l+0x494>
 80048dc:	68c3      	ldr	r3, [r0, #12]
 80048de:	9308      	str	r3, [sp, #32]
 80048e0:	2300      	movs	r3, #0
 80048e2:	60c3      	str	r3, [r0, #12]
 80048e4:	4629      	mov	r1, r5
 80048e6:	f001 f89c 	bl	8005a22 <__mcmp>
 80048ea:	2800      	cmp	r0, #0
 80048ec:	da5a      	bge.n	80049a4 <_strtod_l+0x83c>
 80048ee:	9b08      	ldr	r3, [sp, #32]
 80048f0:	b9e3      	cbnz	r3, 800492c <_strtod_l+0x7c4>
 80048f2:	f1ba 0f00 	cmp.w	sl, #0
 80048f6:	d119      	bne.n	800492c <_strtod_l+0x7c4>
 80048f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80048fc:	b9b3      	cbnz	r3, 800492c <_strtod_l+0x7c4>
 80048fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004902:	0d1b      	lsrs	r3, r3, #20
 8004904:	051b      	lsls	r3, r3, #20
 8004906:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800490a:	d90f      	bls.n	800492c <_strtod_l+0x7c4>
 800490c:	6963      	ldr	r3, [r4, #20]
 800490e:	b913      	cbnz	r3, 8004916 <_strtod_l+0x7ae>
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	2b01      	cmp	r3, #1
 8004914:	dd0a      	ble.n	800492c <_strtod_l+0x7c4>
 8004916:	4621      	mov	r1, r4
 8004918:	2201      	movs	r2, #1
 800491a:	9804      	ldr	r0, [sp, #16]
 800491c:	f001 f830 	bl	8005980 <__lshift>
 8004920:	4629      	mov	r1, r5
 8004922:	4604      	mov	r4, r0
 8004924:	f001 f87d 	bl	8005a22 <__mcmp>
 8004928:	2800      	cmp	r0, #0
 800492a:	dc6c      	bgt.n	8004a06 <_strtod_l+0x89e>
 800492c:	9b05      	ldr	r3, [sp, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d176      	bne.n	8004a20 <_strtod_l+0x8b8>
 8004932:	e66e      	b.n	8004612 <_strtod_l+0x4aa>
 8004934:	07e2      	lsls	r2, r4, #31
 8004936:	d504      	bpl.n	8004942 <_strtod_l+0x7da>
 8004938:	e9d6 2300 	ldrd	r2, r3, [r6]
 800493c:	f7fb fe58 	bl	80005f0 <__aeabi_dmul>
 8004940:	2301      	movs	r3, #1
 8004942:	1064      	asrs	r4, r4, #1
 8004944:	3608      	adds	r6, #8
 8004946:	e6ec      	b.n	8004722 <_strtod_l+0x5ba>
 8004948:	f04f 32ff 	mov.w	r2, #4294967295
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	ea03 0a0a 	and.w	sl, r3, sl
 8004954:	e705      	b.n	8004762 <_strtod_l+0x5fa>
 8004956:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800495a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800495e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004962:	36e2      	adds	r6, #226	; 0xe2
 8004964:	fa09 f606 	lsl.w	r6, r9, r6
 8004968:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800496c:	e763      	b.n	8004836 <_strtod_l+0x6ce>
 800496e:	2301      	movs	r3, #1
 8004970:	2600      	movs	r6, #0
 8004972:	9314      	str	r3, [sp, #80]	; 0x50
 8004974:	e75f      	b.n	8004836 <_strtod_l+0x6ce>
 8004976:	464a      	mov	r2, r9
 8004978:	991a      	ldr	r1, [sp, #104]	; 0x68
 800497a:	9804      	ldr	r0, [sp, #16]
 800497c:	f001 f800 	bl	8005980 <__lshift>
 8004980:	901a      	str	r0, [sp, #104]	; 0x68
 8004982:	2800      	cmp	r0, #0
 8004984:	d187      	bne.n	8004896 <_strtod_l+0x72e>
 8004986:	e639      	b.n	80045fc <_strtod_l+0x494>
 8004988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800498a:	9906      	ldr	r1, [sp, #24]
 800498c:	9804      	ldr	r0, [sp, #16]
 800498e:	f000 ffa9 	bl	80058e4 <__pow5mult>
 8004992:	9006      	str	r0, [sp, #24]
 8004994:	2800      	cmp	r0, #0
 8004996:	d181      	bne.n	800489c <_strtod_l+0x734>
 8004998:	e630      	b.n	80045fc <_strtod_l+0x494>
 800499a:	bf00      	nop
 800499c:	080065e8 	.word	0x080065e8
 80049a0:	fffffc02 	.word	0xfffffc02
 80049a4:	f040 8086 	bne.w	8004ab4 <_strtod_l+0x94c>
 80049a8:	9a08      	ldr	r2, [sp, #32]
 80049aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80049ae:	b332      	cbz	r2, 80049fe <_strtod_l+0x896>
 80049b0:	4aad      	ldr	r2, [pc, #692]	; (8004c68 <_strtod_l+0xb00>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	4659      	mov	r1, fp
 80049b6:	d152      	bne.n	8004a5e <_strtod_l+0x8f6>
 80049b8:	9b05      	ldr	r3, [sp, #20]
 80049ba:	4650      	mov	r0, sl
 80049bc:	b1d3      	cbz	r3, 80049f4 <_strtod_l+0x88c>
 80049be:	4aab      	ldr	r2, [pc, #684]	; (8004c6c <_strtod_l+0xb04>)
 80049c0:	400a      	ands	r2, r1
 80049c2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80049c6:	f04f 37ff 	mov.w	r7, #4294967295
 80049ca:	d816      	bhi.n	80049fa <_strtod_l+0x892>
 80049cc:	0d12      	lsrs	r2, r2, #20
 80049ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80049d2:	fa07 f303 	lsl.w	r3, r7, r3
 80049d6:	4283      	cmp	r3, r0
 80049d8:	d141      	bne.n	8004a5e <_strtod_l+0x8f6>
 80049da:	4aa5      	ldr	r2, [pc, #660]	; (8004c70 <_strtod_l+0xb08>)
 80049dc:	4291      	cmp	r1, r2
 80049de:	d102      	bne.n	80049e6 <_strtod_l+0x87e>
 80049e0:	3301      	adds	r3, #1
 80049e2:	f43f ae0b 	beq.w	80045fc <_strtod_l+0x494>
 80049e6:	4ba1      	ldr	r3, [pc, #644]	; (8004c6c <_strtod_l+0xb04>)
 80049e8:	400b      	ands	r3, r1
 80049ea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80049ee:	f04f 0a00 	mov.w	sl, #0
 80049f2:	e79b      	b.n	800492c <_strtod_l+0x7c4>
 80049f4:	f04f 33ff 	mov.w	r3, #4294967295
 80049f8:	e7ed      	b.n	80049d6 <_strtod_l+0x86e>
 80049fa:	463b      	mov	r3, r7
 80049fc:	e7eb      	b.n	80049d6 <_strtod_l+0x86e>
 80049fe:	bb73      	cbnz	r3, 8004a5e <_strtod_l+0x8f6>
 8004a00:	f1ba 0f00 	cmp.w	sl, #0
 8004a04:	d12b      	bne.n	8004a5e <_strtod_l+0x8f6>
 8004a06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a0a:	9a05      	ldr	r2, [sp, #20]
 8004a0c:	0d1b      	lsrs	r3, r3, #20
 8004a0e:	051b      	lsls	r3, r3, #20
 8004a10:	b1e2      	cbz	r2, 8004a4c <_strtod_l+0x8e4>
 8004a12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004a16:	dc19      	bgt.n	8004a4c <_strtod_l+0x8e4>
 8004a18:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8004a1c:	f77f ae5f 	ble.w	80046de <_strtod_l+0x576>
 8004a20:	4b94      	ldr	r3, [pc, #592]	; (8004c74 <_strtod_l+0xb0c>)
 8004a22:	930d      	str	r3, [sp, #52]	; 0x34
 8004a24:	2300      	movs	r3, #0
 8004a26:	930c      	str	r3, [sp, #48]	; 0x30
 8004a28:	4650      	mov	r0, sl
 8004a2a:	4659      	mov	r1, fp
 8004a2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a30:	f7fb fdde 	bl	80005f0 <__aeabi_dmul>
 8004a34:	4682      	mov	sl, r0
 8004a36:	468b      	mov	fp, r1
 8004a38:	2900      	cmp	r1, #0
 8004a3a:	f47f adea 	bne.w	8004612 <_strtod_l+0x4aa>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	f47f ade7 	bne.w	8004612 <_strtod_l+0x4aa>
 8004a44:	9a04      	ldr	r2, [sp, #16]
 8004a46:	2322      	movs	r3, #34	; 0x22
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e5e2      	b.n	8004612 <_strtod_l+0x4aa>
 8004a4c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004a50:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004a54:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004a58:	f04f 3aff 	mov.w	sl, #4294967295
 8004a5c:	e766      	b.n	800492c <_strtod_l+0x7c4>
 8004a5e:	b19e      	cbz	r6, 8004a88 <_strtod_l+0x920>
 8004a60:	ea16 0f0b 	tst.w	r6, fp
 8004a64:	f43f af62 	beq.w	800492c <_strtod_l+0x7c4>
 8004a68:	9b08      	ldr	r3, [sp, #32]
 8004a6a:	9a05      	ldr	r2, [sp, #20]
 8004a6c:	4650      	mov	r0, sl
 8004a6e:	4659      	mov	r1, fp
 8004a70:	b173      	cbz	r3, 8004a90 <_strtod_l+0x928>
 8004a72:	f7ff fb5d 	bl	8004130 <sulp>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a7e:	f7fb fc05 	bl	800028c <__adddf3>
 8004a82:	4682      	mov	sl, r0
 8004a84:	468b      	mov	fp, r1
 8004a86:	e751      	b.n	800492c <_strtod_l+0x7c4>
 8004a88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a8a:	ea13 0f0a 	tst.w	r3, sl
 8004a8e:	e7e9      	b.n	8004a64 <_strtod_l+0x8fc>
 8004a90:	f7ff fb4e 	bl	8004130 <sulp>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a9c:	f7fb fbf4 	bl	8000288 <__aeabi_dsub>
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	4682      	mov	sl, r0
 8004aa6:	468b      	mov	fp, r1
 8004aa8:	f7fc f80a 	bl	8000ac0 <__aeabi_dcmpeq>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	f47f ae16 	bne.w	80046de <_strtod_l+0x576>
 8004ab2:	e73b      	b.n	800492c <_strtod_l+0x7c4>
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f001 f8f1 	bl	8005c9e <__ratio>
 8004abc:	ec57 6b10 	vmov	r6, r7, d0
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ac6:	ee10 0a10 	vmov	r0, s0
 8004aca:	4639      	mov	r1, r7
 8004acc:	f7fc f80c 	bl	8000ae8 <__aeabi_dcmple>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d074      	beq.n	8004bbe <_strtod_l+0xa56>
 8004ad4:	9b08      	ldr	r3, [sp, #32]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d046      	beq.n	8004b68 <_strtod_l+0xa00>
 8004ada:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8004c78 <_strtod_l+0xb10>
 8004ade:	f04f 0800 	mov.w	r8, #0
 8004ae2:	4f65      	ldr	r7, [pc, #404]	; (8004c78 <_strtod_l+0xb10>)
 8004ae4:	2600      	movs	r6, #0
 8004ae6:	4b61      	ldr	r3, [pc, #388]	; (8004c6c <_strtod_l+0xb04>)
 8004ae8:	ea0b 0303 	and.w	r3, fp, r3
 8004aec:	9314      	str	r3, [sp, #80]	; 0x50
 8004aee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004af0:	4b62      	ldr	r3, [pc, #392]	; (8004c7c <_strtod_l+0xb14>)
 8004af2:	429a      	cmp	r2, r3
 8004af4:	f040 80ca 	bne.w	8004c8c <_strtod_l+0xb24>
 8004af8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004afc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004b00:	ec4b ab10 	vmov	d0, sl, fp
 8004b04:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004b08:	f001 f804 	bl	8005b14 <__ulp>
 8004b0c:	4640      	mov	r0, r8
 8004b0e:	ec53 2b10 	vmov	r2, r3, d0
 8004b12:	4649      	mov	r1, r9
 8004b14:	f7fb fd6c 	bl	80005f0 <__aeabi_dmul>
 8004b18:	4652      	mov	r2, sl
 8004b1a:	465b      	mov	r3, fp
 8004b1c:	f7fb fbb6 	bl	800028c <__adddf3>
 8004b20:	4a52      	ldr	r2, [pc, #328]	; (8004c6c <_strtod_l+0xb04>)
 8004b22:	4b57      	ldr	r3, [pc, #348]	; (8004c80 <_strtod_l+0xb18>)
 8004b24:	400a      	ands	r2, r1
 8004b26:	429a      	cmp	r2, r3
 8004b28:	4682      	mov	sl, r0
 8004b2a:	d95c      	bls.n	8004be6 <_strtod_l+0xa7e>
 8004b2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b2e:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d103      	bne.n	8004b3e <_strtod_l+0x9d6>
 8004b36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b38:	3301      	adds	r3, #1
 8004b3a:	f43f ad5f 	beq.w	80045fc <_strtod_l+0x494>
 8004b3e:	f8df b130 	ldr.w	fp, [pc, #304]	; 8004c70 <_strtod_l+0xb08>
 8004b42:	f04f 3aff 	mov.w	sl, #4294967295
 8004b46:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004b48:	9804      	ldr	r0, [sp, #16]
 8004b4a:	f000 fd56 	bl	80055fa <_Bfree>
 8004b4e:	9906      	ldr	r1, [sp, #24]
 8004b50:	9804      	ldr	r0, [sp, #16]
 8004b52:	f000 fd52 	bl	80055fa <_Bfree>
 8004b56:	4629      	mov	r1, r5
 8004b58:	9804      	ldr	r0, [sp, #16]
 8004b5a:	f000 fd4e 	bl	80055fa <_Bfree>
 8004b5e:	4621      	mov	r1, r4
 8004b60:	9804      	ldr	r0, [sp, #16]
 8004b62:	f000 fd4a 	bl	80055fa <_Bfree>
 8004b66:	e61c      	b.n	80047a2 <_strtod_l+0x63a>
 8004b68:	f1ba 0f00 	cmp.w	sl, #0
 8004b6c:	d118      	bne.n	8004ba0 <_strtod_l+0xa38>
 8004b6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004b72:	b9e3      	cbnz	r3, 8004bae <_strtod_l+0xa46>
 8004b74:	2200      	movs	r2, #0
 8004b76:	4b40      	ldr	r3, [pc, #256]	; (8004c78 <_strtod_l+0xb10>)
 8004b78:	4630      	mov	r0, r6
 8004b7a:	4639      	mov	r1, r7
 8004b7c:	f7fb ffaa 	bl	8000ad4 <__aeabi_dcmplt>
 8004b80:	b9d0      	cbnz	r0, 8004bb8 <_strtod_l+0xa50>
 8004b82:	4630      	mov	r0, r6
 8004b84:	4639      	mov	r1, r7
 8004b86:	2200      	movs	r2, #0
 8004b88:	4b3e      	ldr	r3, [pc, #248]	; (8004c84 <_strtod_l+0xb1c>)
 8004b8a:	f7fb fd31 	bl	80005f0 <__aeabi_dmul>
 8004b8e:	4606      	mov	r6, r0
 8004b90:	460f      	mov	r7, r1
 8004b92:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004b96:	9616      	str	r6, [sp, #88]	; 0x58
 8004b98:	9317      	str	r3, [sp, #92]	; 0x5c
 8004b9a:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
 8004b9e:	e7a2      	b.n	8004ae6 <_strtod_l+0x97e>
 8004ba0:	f1ba 0f01 	cmp.w	sl, #1
 8004ba4:	d103      	bne.n	8004bae <_strtod_l+0xa46>
 8004ba6:	f1bb 0f00 	cmp.w	fp, #0
 8004baa:	f43f ad98 	beq.w	80046de <_strtod_l+0x576>
 8004bae:	f04f 0800 	mov.w	r8, #0
 8004bb2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8004c88 <_strtod_l+0xb20>
 8004bb6:	e794      	b.n	8004ae2 <_strtod_l+0x97a>
 8004bb8:	2600      	movs	r6, #0
 8004bba:	4f32      	ldr	r7, [pc, #200]	; (8004c84 <_strtod_l+0xb1c>)
 8004bbc:	e7e9      	b.n	8004b92 <_strtod_l+0xa2a>
 8004bbe:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <_strtod_l+0xb1c>)
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	4639      	mov	r1, r7
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f7fb fd13 	bl	80005f0 <__aeabi_dmul>
 8004bca:	9b08      	ldr	r3, [sp, #32]
 8004bcc:	4606      	mov	r6, r0
 8004bce:	460f      	mov	r7, r1
 8004bd0:	b933      	cbnz	r3, 8004be0 <_strtod_l+0xa78>
 8004bd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004bd6:	9010      	str	r0, [sp, #64]	; 0x40
 8004bd8:	9311      	str	r3, [sp, #68]	; 0x44
 8004bda:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8004bde:	e782      	b.n	8004ae6 <_strtod_l+0x97e>
 8004be0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8004be4:	e7f9      	b.n	8004bda <_strtod_l+0xa72>
 8004be6:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 8004bea:	9b05      	ldr	r3, [sp, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1aa      	bne.n	8004b46 <_strtod_l+0x9de>
 8004bf0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004bf4:	0d1b      	lsrs	r3, r3, #20
 8004bf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004bf8:	051b      	lsls	r3, r3, #20
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	46d8      	mov	r8, fp
 8004bfe:	d1a2      	bne.n	8004b46 <_strtod_l+0x9de>
 8004c00:	4639      	mov	r1, r7
 8004c02:	4630      	mov	r0, r6
 8004c04:	f7fb ffa4 	bl	8000b50 <__aeabi_d2iz>
 8004c08:	f7fb fc8c 	bl	8000524 <__aeabi_i2d>
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4602      	mov	r2, r0
 8004c10:	4639      	mov	r1, r7
 8004c12:	4630      	mov	r0, r6
 8004c14:	f7fb fb38 	bl	8000288 <__aeabi_dsub>
 8004c18:	9b08      	ldr	r3, [sp, #32]
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	460f      	mov	r7, r1
 8004c1e:	b933      	cbnz	r3, 8004c2e <_strtod_l+0xac6>
 8004c20:	f1ba 0f00 	cmp.w	sl, #0
 8004c24:	d103      	bne.n	8004c2e <_strtod_l+0xac6>
 8004c26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d068      	beq.n	8004d00 <_strtod_l+0xb98>
 8004c2e:	a30a      	add	r3, pc, #40	; (adr r3, 8004c58 <_strtod_l+0xaf0>)
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	4630      	mov	r0, r6
 8004c36:	4639      	mov	r1, r7
 8004c38:	f7fb ff4c 	bl	8000ad4 <__aeabi_dcmplt>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	f47f ace8 	bne.w	8004612 <_strtod_l+0x4aa>
 8004c42:	a307      	add	r3, pc, #28	; (adr r3, 8004c60 <_strtod_l+0xaf8>)
 8004c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c48:	4630      	mov	r0, r6
 8004c4a:	4639      	mov	r1, r7
 8004c4c:	f7fb ff60 	bl	8000b10 <__aeabi_dcmpgt>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	f43f af78 	beq.w	8004b46 <_strtod_l+0x9de>
 8004c56:	e4dc      	b.n	8004612 <_strtod_l+0x4aa>
 8004c58:	94a03595 	.word	0x94a03595
 8004c5c:	3fdfffff 	.word	0x3fdfffff
 8004c60:	35afe535 	.word	0x35afe535
 8004c64:	3fe00000 	.word	0x3fe00000
 8004c68:	000fffff 	.word	0x000fffff
 8004c6c:	7ff00000 	.word	0x7ff00000
 8004c70:	7fefffff 	.word	0x7fefffff
 8004c74:	39500000 	.word	0x39500000
 8004c78:	3ff00000 	.word	0x3ff00000
 8004c7c:	7fe00000 	.word	0x7fe00000
 8004c80:	7c9fffff 	.word	0x7c9fffff
 8004c84:	3fe00000 	.word	0x3fe00000
 8004c88:	bff00000 	.word	0xbff00000
 8004c8c:	9b05      	ldr	r3, [sp, #20]
 8004c8e:	b31b      	cbz	r3, 8004cd8 <_strtod_l+0xb70>
 8004c90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c92:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004c96:	d81f      	bhi.n	8004cd8 <_strtod_l+0xb70>
 8004c98:	a325      	add	r3, pc, #148	; (adr r3, 8004d30 <_strtod_l+0xbc8>)
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	4639      	mov	r1, r7
 8004ca2:	f7fb ff21 	bl	8000ae8 <__aeabi_dcmple>
 8004ca6:	b190      	cbz	r0, 8004cce <_strtod_l+0xb66>
 8004ca8:	4639      	mov	r1, r7
 8004caa:	4630      	mov	r0, r6
 8004cac:	f7fb ff78 	bl	8000ba0 <__aeabi_d2uiz>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	bf08      	it	eq
 8004cb4:	2001      	moveq	r0, #1
 8004cb6:	f7fb fc25 	bl	8000504 <__aeabi_ui2d>
 8004cba:	9b08      	ldr	r3, [sp, #32]
 8004cbc:	4606      	mov	r6, r0
 8004cbe:	460f      	mov	r7, r1
 8004cc0:	b9db      	cbnz	r3, 8004cfa <_strtod_l+0xb92>
 8004cc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cc6:	9012      	str	r0, [sp, #72]	; 0x48
 8004cc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8004cca:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
 8004cce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004cd0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 8004cd4:	eba3 0902 	sub.w	r9, r3, r2
 8004cd8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004cdc:	f000 ff1a 	bl	8005b14 <__ulp>
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	ec53 2b10 	vmov	r2, r3, d0
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	f7fb fc82 	bl	80005f0 <__aeabi_dmul>
 8004cec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004cf0:	f7fb facc 	bl	800028c <__adddf3>
 8004cf4:	4682      	mov	sl, r0
 8004cf6:	468b      	mov	fp, r1
 8004cf8:	e777      	b.n	8004bea <_strtod_l+0xa82>
 8004cfa:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8004cfe:	e7e4      	b.n	8004cca <_strtod_l+0xb62>
 8004d00:	a30d      	add	r3, pc, #52	; (adr r3, 8004d38 <_strtod_l+0xbd0>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f7fb fee5 	bl	8000ad4 <__aeabi_dcmplt>
 8004d0a:	e7a1      	b.n	8004c50 <_strtod_l+0xae8>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	f7ff ba6b 	b.w	80041f0 <_strtod_l+0x88>
 8004d1a:	2b65      	cmp	r3, #101	; 0x65
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f43f abb6 	beq.w	8004490 <_strtod_l+0x328>
 8004d24:	4615      	mov	r5, r2
 8004d26:	2101      	movs	r1, #1
 8004d28:	f7ff badc 	b.w	80042e4 <_strtod_l+0x17c>
 8004d2c:	f3af 8000 	nop.w
 8004d30:	ffc00000 	.word	0xffc00000
 8004d34:	41dfffff 	.word	0x41dfffff
 8004d38:	94a03595 	.word	0x94a03595
 8004d3c:	3fcfffff 	.word	0x3fcfffff

08004d40 <strtof>:
 8004d40:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8004d44:	4e24      	ldr	r6, [pc, #144]	; (8004dd8 <strtof+0x98>)
 8004d46:	4a25      	ldr	r2, [pc, #148]	; (8004ddc <strtof+0x9c>)
 8004d48:	6834      	ldr	r4, [r6, #0]
 8004d4a:	6a23      	ldr	r3, [r4, #32]
 8004d4c:	ed2d 8b02 	vpush	{d8}
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf08      	it	eq
 8004d54:	4613      	moveq	r3, r2
 8004d56:	460a      	mov	r2, r1
 8004d58:	4601      	mov	r1, r0
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f7ff fa04 	bl	8004168 <_strtod_l>
 8004d60:	ec55 4b10 	vmov	r4, r5, d0
 8004d64:	ee10 2a10 	vmov	r2, s0
 8004d68:	462b      	mov	r3, r5
 8004d6a:	ee10 0a10 	vmov	r0, s0
 8004d6e:	4629      	mov	r1, r5
 8004d70:	f7fb fed8 	bl	8000b24 <__aeabi_dcmpun>
 8004d74:	b130      	cbz	r0, 8004d84 <strtof+0x44>
 8004d76:	ecbd 8b02 	vpop	{d8}
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8004d80:	f001 bae8 	b.w	8006354 <nanf>
 8004d84:	4620      	mov	r0, r4
 8004d86:	4629      	mov	r1, r5
 8004d88:	f7fb ff2a 	bl	8000be0 <__aeabi_d2f>
 8004d8c:	ee08 0a10 	vmov	s16, r0
 8004d90:	eddf 7a13 	vldr	s15, [pc, #76]	; 8004de0 <strtof+0xa0>
 8004d94:	eeb0 7ac8 	vabs.f32	s14, s16
 8004d98:	eeb4 7a67 	vcmp.f32	s14, s15
 8004d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da0:	dd14      	ble.n	8004dcc <strtof+0x8c>
 8004da2:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8004da6:	f04f 32ff 	mov.w	r2, #4294967295
 8004daa:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <strtof+0xa4>)
 8004dac:	4620      	mov	r0, r4
 8004dae:	4649      	mov	r1, r9
 8004db0:	f7fb feb8 	bl	8000b24 <__aeabi_dcmpun>
 8004db4:	b938      	cbnz	r0, 8004dc6 <strtof+0x86>
 8004db6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dba:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <strtof+0xa4>)
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	f7fb fe92 	bl	8000ae8 <__aeabi_dcmple>
 8004dc4:	b110      	cbz	r0, 8004dcc <strtof+0x8c>
 8004dc6:	6833      	ldr	r3, [r6, #0]
 8004dc8:	2222      	movs	r2, #34	; 0x22
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	eeb0 0a48 	vmov.f32	s0, s16
 8004dd0:	ecbd 8b02 	vpop	{d8}
 8004dd4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004dd8:	20000168 	.word	0x20000168
 8004ddc:	200001cc 	.word	0x200001cc
 8004de0:	7f7fffff 	.word	0x7f7fffff
 8004de4:	7fefffff 	.word	0x7fefffff

08004de8 <_strtoul_l.isra.0>:
 8004de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dec:	4680      	mov	r8, r0
 8004dee:	4689      	mov	r9, r1
 8004df0:	4692      	mov	sl, r2
 8004df2:	461e      	mov	r6, r3
 8004df4:	460f      	mov	r7, r1
 8004df6:	463d      	mov	r5, r7
 8004df8:	9808      	ldr	r0, [sp, #32]
 8004dfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004dfe:	f000 fba4 	bl	800554a <__locale_ctype_ptr_l>
 8004e02:	4420      	add	r0, r4
 8004e04:	7843      	ldrb	r3, [r0, #1]
 8004e06:	f013 0308 	ands.w	r3, r3, #8
 8004e0a:	d10a      	bne.n	8004e22 <_strtoul_l.isra.0+0x3a>
 8004e0c:	2c2d      	cmp	r4, #45	; 0x2d
 8004e0e:	d10a      	bne.n	8004e26 <_strtoul_l.isra.0+0x3e>
 8004e10:	782c      	ldrb	r4, [r5, #0]
 8004e12:	2301      	movs	r3, #1
 8004e14:	1cbd      	adds	r5, r7, #2
 8004e16:	b15e      	cbz	r6, 8004e30 <_strtoul_l.isra.0+0x48>
 8004e18:	2e10      	cmp	r6, #16
 8004e1a:	d113      	bne.n	8004e44 <_strtoul_l.isra.0+0x5c>
 8004e1c:	2c30      	cmp	r4, #48	; 0x30
 8004e1e:	d009      	beq.n	8004e34 <_strtoul_l.isra.0+0x4c>
 8004e20:	e010      	b.n	8004e44 <_strtoul_l.isra.0+0x5c>
 8004e22:	462f      	mov	r7, r5
 8004e24:	e7e7      	b.n	8004df6 <_strtoul_l.isra.0+0xe>
 8004e26:	2c2b      	cmp	r4, #43	; 0x2b
 8004e28:	bf04      	itt	eq
 8004e2a:	782c      	ldrbeq	r4, [r5, #0]
 8004e2c:	1cbd      	addeq	r5, r7, #2
 8004e2e:	e7f2      	b.n	8004e16 <_strtoul_l.isra.0+0x2e>
 8004e30:	2c30      	cmp	r4, #48	; 0x30
 8004e32:	d125      	bne.n	8004e80 <_strtoul_l.isra.0+0x98>
 8004e34:	782a      	ldrb	r2, [r5, #0]
 8004e36:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004e3a:	2a58      	cmp	r2, #88	; 0x58
 8004e3c:	d14a      	bne.n	8004ed4 <_strtoul_l.isra.0+0xec>
 8004e3e:	786c      	ldrb	r4, [r5, #1]
 8004e40:	2610      	movs	r6, #16
 8004e42:	3502      	adds	r5, #2
 8004e44:	f04f 31ff 	mov.w	r1, #4294967295
 8004e48:	2700      	movs	r7, #0
 8004e4a:	fbb1 f1f6 	udiv	r1, r1, r6
 8004e4e:	fb06 fe01 	mul.w	lr, r6, r1
 8004e52:	ea6f 0e0e 	mvn.w	lr, lr
 8004e56:	4638      	mov	r0, r7
 8004e58:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8004e5c:	2a09      	cmp	r2, #9
 8004e5e:	d811      	bhi.n	8004e84 <_strtoul_l.isra.0+0x9c>
 8004e60:	4614      	mov	r4, r2
 8004e62:	42a6      	cmp	r6, r4
 8004e64:	dd1d      	ble.n	8004ea2 <_strtoul_l.isra.0+0xba>
 8004e66:	2f00      	cmp	r7, #0
 8004e68:	db18      	blt.n	8004e9c <_strtoul_l.isra.0+0xb4>
 8004e6a:	4281      	cmp	r1, r0
 8004e6c:	d316      	bcc.n	8004e9c <_strtoul_l.isra.0+0xb4>
 8004e6e:	d101      	bne.n	8004e74 <_strtoul_l.isra.0+0x8c>
 8004e70:	45a6      	cmp	lr, r4
 8004e72:	db13      	blt.n	8004e9c <_strtoul_l.isra.0+0xb4>
 8004e74:	fb00 4006 	mla	r0, r0, r6, r4
 8004e78:	2701      	movs	r7, #1
 8004e7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e7e:	e7eb      	b.n	8004e58 <_strtoul_l.isra.0+0x70>
 8004e80:	260a      	movs	r6, #10
 8004e82:	e7df      	b.n	8004e44 <_strtoul_l.isra.0+0x5c>
 8004e84:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8004e88:	2a19      	cmp	r2, #25
 8004e8a:	d801      	bhi.n	8004e90 <_strtoul_l.isra.0+0xa8>
 8004e8c:	3c37      	subs	r4, #55	; 0x37
 8004e8e:	e7e8      	b.n	8004e62 <_strtoul_l.isra.0+0x7a>
 8004e90:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8004e94:	2a19      	cmp	r2, #25
 8004e96:	d804      	bhi.n	8004ea2 <_strtoul_l.isra.0+0xba>
 8004e98:	3c57      	subs	r4, #87	; 0x57
 8004e9a:	e7e2      	b.n	8004e62 <_strtoul_l.isra.0+0x7a>
 8004e9c:	f04f 37ff 	mov.w	r7, #4294967295
 8004ea0:	e7eb      	b.n	8004e7a <_strtoul_l.isra.0+0x92>
 8004ea2:	2f00      	cmp	r7, #0
 8004ea4:	da09      	bge.n	8004eba <_strtoul_l.isra.0+0xd2>
 8004ea6:	2322      	movs	r3, #34	; 0x22
 8004ea8:	f8c8 3000 	str.w	r3, [r8]
 8004eac:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb0:	f1ba 0f00 	cmp.w	sl, #0
 8004eb4:	d107      	bne.n	8004ec6 <_strtoul_l.isra.0+0xde>
 8004eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eba:	b103      	cbz	r3, 8004ebe <_strtoul_l.isra.0+0xd6>
 8004ebc:	4240      	negs	r0, r0
 8004ebe:	f1ba 0f00 	cmp.w	sl, #0
 8004ec2:	d00c      	beq.n	8004ede <_strtoul_l.isra.0+0xf6>
 8004ec4:	b127      	cbz	r7, 8004ed0 <_strtoul_l.isra.0+0xe8>
 8004ec6:	3d01      	subs	r5, #1
 8004ec8:	f8ca 5000 	str.w	r5, [sl]
 8004ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed0:	464d      	mov	r5, r9
 8004ed2:	e7f9      	b.n	8004ec8 <_strtoul_l.isra.0+0xe0>
 8004ed4:	2430      	movs	r4, #48	; 0x30
 8004ed6:	2e00      	cmp	r6, #0
 8004ed8:	d1b4      	bne.n	8004e44 <_strtoul_l.isra.0+0x5c>
 8004eda:	2608      	movs	r6, #8
 8004edc:	e7b2      	b.n	8004e44 <_strtoul_l.isra.0+0x5c>
 8004ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004ee4 <strtoul>:
 8004ee4:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <strtoul+0x24>)
 8004ee6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ee8:	681c      	ldr	r4, [r3, #0]
 8004eea:	4d08      	ldr	r5, [pc, #32]	; (8004f0c <strtoul+0x28>)
 8004eec:	6a23      	ldr	r3, [r4, #32]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bf08      	it	eq
 8004ef2:	462b      	moveq	r3, r5
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	460a      	mov	r2, r1
 8004efa:	4601      	mov	r1, r0
 8004efc:	4620      	mov	r0, r4
 8004efe:	f7ff ff73 	bl	8004de8 <_strtoul_l.isra.0>
 8004f02:	b003      	add	sp, #12
 8004f04:	bd30      	pop	{r4, r5, pc}
 8004f06:	bf00      	nop
 8004f08:	20000168 	.word	0x20000168
 8004f0c:	200001cc 	.word	0x200001cc

08004f10 <rshift>:
 8004f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f12:	6906      	ldr	r6, [r0, #16]
 8004f14:	114b      	asrs	r3, r1, #5
 8004f16:	42b3      	cmp	r3, r6
 8004f18:	f100 0514 	add.w	r5, r0, #20
 8004f1c:	da2b      	bge.n	8004f76 <rshift+0x66>
 8004f1e:	f011 011f 	ands.w	r1, r1, #31
 8004f22:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8004f26:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8004f2a:	d108      	bne.n	8004f3e <rshift+0x2e>
 8004f2c:	4629      	mov	r1, r5
 8004f2e:	42b2      	cmp	r2, r6
 8004f30:	460b      	mov	r3, r1
 8004f32:	d210      	bcs.n	8004f56 <rshift+0x46>
 8004f34:	f852 3b04 	ldr.w	r3, [r2], #4
 8004f38:	f841 3b04 	str.w	r3, [r1], #4
 8004f3c:	e7f7      	b.n	8004f2e <rshift+0x1e>
 8004f3e:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8004f42:	f1c1 0e20 	rsb	lr, r1, #32
 8004f46:	3204      	adds	r2, #4
 8004f48:	40cc      	lsrs	r4, r1
 8004f4a:	462b      	mov	r3, r5
 8004f4c:	42b2      	cmp	r2, r6
 8004f4e:	d308      	bcc.n	8004f62 <rshift+0x52>
 8004f50:	601c      	str	r4, [r3, #0]
 8004f52:	b104      	cbz	r4, 8004f56 <rshift+0x46>
 8004f54:	3304      	adds	r3, #4
 8004f56:	1b5b      	subs	r3, r3, r5
 8004f58:	109b      	asrs	r3, r3, #2
 8004f5a:	6103      	str	r3, [r0, #16]
 8004f5c:	b903      	cbnz	r3, 8004f60 <rshift+0x50>
 8004f5e:	6143      	str	r3, [r0, #20]
 8004f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f62:	6817      	ldr	r7, [r2, #0]
 8004f64:	fa07 f70e 	lsl.w	r7, r7, lr
 8004f68:	433c      	orrs	r4, r7
 8004f6a:	f843 4b04 	str.w	r4, [r3], #4
 8004f6e:	f852 4b04 	ldr.w	r4, [r2], #4
 8004f72:	40cc      	lsrs	r4, r1
 8004f74:	e7ea      	b.n	8004f4c <rshift+0x3c>
 8004f76:	462b      	mov	r3, r5
 8004f78:	e7ed      	b.n	8004f56 <rshift+0x46>

08004f7a <__hexdig_fun>:
 8004f7a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004f7e:	2b09      	cmp	r3, #9
 8004f80:	d802      	bhi.n	8004f88 <__hexdig_fun+0xe>
 8004f82:	3820      	subs	r0, #32
 8004f84:	b2c0      	uxtb	r0, r0
 8004f86:	4770      	bx	lr
 8004f88:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004f8c:	2b05      	cmp	r3, #5
 8004f8e:	d801      	bhi.n	8004f94 <__hexdig_fun+0x1a>
 8004f90:	3847      	subs	r0, #71	; 0x47
 8004f92:	e7f7      	b.n	8004f84 <__hexdig_fun+0xa>
 8004f94:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004f98:	2b05      	cmp	r3, #5
 8004f9a:	d801      	bhi.n	8004fa0 <__hexdig_fun+0x26>
 8004f9c:	3827      	subs	r0, #39	; 0x27
 8004f9e:	e7f1      	b.n	8004f84 <__hexdig_fun+0xa>
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	4770      	bx	lr

08004fa4 <__gethex>:
 8004fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa8:	b08b      	sub	sp, #44	; 0x2c
 8004faa:	468a      	mov	sl, r1
 8004fac:	9002      	str	r0, [sp, #8]
 8004fae:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004fb0:	9306      	str	r3, [sp, #24]
 8004fb2:	4690      	mov	r8, r2
 8004fb4:	f000 facc 	bl	8005550 <__localeconv_l>
 8004fb8:	6803      	ldr	r3, [r0, #0]
 8004fba:	9303      	str	r3, [sp, #12]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fb f907 	bl	80001d0 <strlen>
 8004fc2:	9b03      	ldr	r3, [sp, #12]
 8004fc4:	9001      	str	r0, [sp, #4]
 8004fc6:	4403      	add	r3, r0
 8004fc8:	f04f 0b00 	mov.w	fp, #0
 8004fcc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004fd0:	9307      	str	r3, [sp, #28]
 8004fd2:	f8da 3000 	ldr.w	r3, [sl]
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	461f      	mov	r7, r3
 8004fda:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004fde:	2830      	cmp	r0, #48	; 0x30
 8004fe0:	d06c      	beq.n	80050bc <__gethex+0x118>
 8004fe2:	f7ff ffca 	bl	8004f7a <__hexdig_fun>
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d16a      	bne.n	80050c2 <__gethex+0x11e>
 8004fec:	9a01      	ldr	r2, [sp, #4]
 8004fee:	9903      	ldr	r1, [sp, #12]
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f001 f9b5 	bl	8006360 <strncmp>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d166      	bne.n	80050c8 <__gethex+0x124>
 8004ffa:	9b01      	ldr	r3, [sp, #4]
 8004ffc:	5cf8      	ldrb	r0, [r7, r3]
 8004ffe:	18fe      	adds	r6, r7, r3
 8005000:	f7ff ffbb 	bl	8004f7a <__hexdig_fun>
 8005004:	2800      	cmp	r0, #0
 8005006:	d062      	beq.n	80050ce <__gethex+0x12a>
 8005008:	4633      	mov	r3, r6
 800500a:	7818      	ldrb	r0, [r3, #0]
 800500c:	2830      	cmp	r0, #48	; 0x30
 800500e:	461f      	mov	r7, r3
 8005010:	f103 0301 	add.w	r3, r3, #1
 8005014:	d0f9      	beq.n	800500a <__gethex+0x66>
 8005016:	f7ff ffb0 	bl	8004f7a <__hexdig_fun>
 800501a:	fab0 f580 	clz	r5, r0
 800501e:	096d      	lsrs	r5, r5, #5
 8005020:	4634      	mov	r4, r6
 8005022:	f04f 0b01 	mov.w	fp, #1
 8005026:	463a      	mov	r2, r7
 8005028:	4616      	mov	r6, r2
 800502a:	3201      	adds	r2, #1
 800502c:	7830      	ldrb	r0, [r6, #0]
 800502e:	f7ff ffa4 	bl	8004f7a <__hexdig_fun>
 8005032:	2800      	cmp	r0, #0
 8005034:	d1f8      	bne.n	8005028 <__gethex+0x84>
 8005036:	9a01      	ldr	r2, [sp, #4]
 8005038:	9903      	ldr	r1, [sp, #12]
 800503a:	4630      	mov	r0, r6
 800503c:	f001 f990 	bl	8006360 <strncmp>
 8005040:	b950      	cbnz	r0, 8005058 <__gethex+0xb4>
 8005042:	b954      	cbnz	r4, 800505a <__gethex+0xb6>
 8005044:	9b01      	ldr	r3, [sp, #4]
 8005046:	18f4      	adds	r4, r6, r3
 8005048:	4622      	mov	r2, r4
 800504a:	4616      	mov	r6, r2
 800504c:	3201      	adds	r2, #1
 800504e:	7830      	ldrb	r0, [r6, #0]
 8005050:	f7ff ff93 	bl	8004f7a <__hexdig_fun>
 8005054:	2800      	cmp	r0, #0
 8005056:	d1f8      	bne.n	800504a <__gethex+0xa6>
 8005058:	b10c      	cbz	r4, 800505e <__gethex+0xba>
 800505a:	1ba4      	subs	r4, r4, r6
 800505c:	00a4      	lsls	r4, r4, #2
 800505e:	7833      	ldrb	r3, [r6, #0]
 8005060:	2b50      	cmp	r3, #80	; 0x50
 8005062:	d001      	beq.n	8005068 <__gethex+0xc4>
 8005064:	2b70      	cmp	r3, #112	; 0x70
 8005066:	d140      	bne.n	80050ea <__gethex+0x146>
 8005068:	7873      	ldrb	r3, [r6, #1]
 800506a:	2b2b      	cmp	r3, #43	; 0x2b
 800506c:	d035      	beq.n	80050da <__gethex+0x136>
 800506e:	2b2d      	cmp	r3, #45	; 0x2d
 8005070:	d02f      	beq.n	80050d2 <__gethex+0x12e>
 8005072:	1c71      	adds	r1, r6, #1
 8005074:	f04f 0900 	mov.w	r9, #0
 8005078:	7808      	ldrb	r0, [r1, #0]
 800507a:	f7ff ff7e 	bl	8004f7a <__hexdig_fun>
 800507e:	1e43      	subs	r3, r0, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b18      	cmp	r3, #24
 8005084:	d831      	bhi.n	80050ea <__gethex+0x146>
 8005086:	f1a0 0210 	sub.w	r2, r0, #16
 800508a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800508e:	f7ff ff74 	bl	8004f7a <__hexdig_fun>
 8005092:	1e43      	subs	r3, r0, #1
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b18      	cmp	r3, #24
 8005098:	d922      	bls.n	80050e0 <__gethex+0x13c>
 800509a:	f1b9 0f00 	cmp.w	r9, #0
 800509e:	d000      	beq.n	80050a2 <__gethex+0xfe>
 80050a0:	4252      	negs	r2, r2
 80050a2:	4414      	add	r4, r2
 80050a4:	f8ca 1000 	str.w	r1, [sl]
 80050a8:	b30d      	cbz	r5, 80050ee <__gethex+0x14a>
 80050aa:	f1bb 0f00 	cmp.w	fp, #0
 80050ae:	bf14      	ite	ne
 80050b0:	2700      	movne	r7, #0
 80050b2:	2706      	moveq	r7, #6
 80050b4:	4638      	mov	r0, r7
 80050b6:	b00b      	add	sp, #44	; 0x2c
 80050b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050bc:	f10b 0b01 	add.w	fp, fp, #1
 80050c0:	e78a      	b.n	8004fd8 <__gethex+0x34>
 80050c2:	2500      	movs	r5, #0
 80050c4:	462c      	mov	r4, r5
 80050c6:	e7ae      	b.n	8005026 <__gethex+0x82>
 80050c8:	463e      	mov	r6, r7
 80050ca:	2501      	movs	r5, #1
 80050cc:	e7c7      	b.n	800505e <__gethex+0xba>
 80050ce:	4604      	mov	r4, r0
 80050d0:	e7fb      	b.n	80050ca <__gethex+0x126>
 80050d2:	f04f 0901 	mov.w	r9, #1
 80050d6:	1cb1      	adds	r1, r6, #2
 80050d8:	e7ce      	b.n	8005078 <__gethex+0xd4>
 80050da:	f04f 0900 	mov.w	r9, #0
 80050de:	e7fa      	b.n	80050d6 <__gethex+0x132>
 80050e0:	230a      	movs	r3, #10
 80050e2:	fb03 0202 	mla	r2, r3, r2, r0
 80050e6:	3a10      	subs	r2, #16
 80050e8:	e7cf      	b.n	800508a <__gethex+0xe6>
 80050ea:	4631      	mov	r1, r6
 80050ec:	e7da      	b.n	80050a4 <__gethex+0x100>
 80050ee:	1bf3      	subs	r3, r6, r7
 80050f0:	3b01      	subs	r3, #1
 80050f2:	4629      	mov	r1, r5
 80050f4:	2b07      	cmp	r3, #7
 80050f6:	dc49      	bgt.n	800518c <__gethex+0x1e8>
 80050f8:	9802      	ldr	r0, [sp, #8]
 80050fa:	f000 fa4a 	bl	8005592 <_Balloc>
 80050fe:	9b01      	ldr	r3, [sp, #4]
 8005100:	f100 0914 	add.w	r9, r0, #20
 8005104:	f04f 0b00 	mov.w	fp, #0
 8005108:	f1c3 0301 	rsb	r3, r3, #1
 800510c:	4605      	mov	r5, r0
 800510e:	f8cd 9010 	str.w	r9, [sp, #16]
 8005112:	46da      	mov	sl, fp
 8005114:	9308      	str	r3, [sp, #32]
 8005116:	42b7      	cmp	r7, r6
 8005118:	d33b      	bcc.n	8005192 <__gethex+0x1ee>
 800511a:	9804      	ldr	r0, [sp, #16]
 800511c:	f840 ab04 	str.w	sl, [r0], #4
 8005120:	eba0 0009 	sub.w	r0, r0, r9
 8005124:	1080      	asrs	r0, r0, #2
 8005126:	6128      	str	r0, [r5, #16]
 8005128:	0147      	lsls	r7, r0, #5
 800512a:	4650      	mov	r0, sl
 800512c:	f000 faf5 	bl	800571a <__hi0bits>
 8005130:	f8d8 6000 	ldr.w	r6, [r8]
 8005134:	1a3f      	subs	r7, r7, r0
 8005136:	42b7      	cmp	r7, r6
 8005138:	dd64      	ble.n	8005204 <__gethex+0x260>
 800513a:	1bbf      	subs	r7, r7, r6
 800513c:	4639      	mov	r1, r7
 800513e:	4628      	mov	r0, r5
 8005140:	f000 fdf3 	bl	8005d2a <__any_on>
 8005144:	4682      	mov	sl, r0
 8005146:	b178      	cbz	r0, 8005168 <__gethex+0x1c4>
 8005148:	1e7b      	subs	r3, r7, #1
 800514a:	1159      	asrs	r1, r3, #5
 800514c:	f003 021f 	and.w	r2, r3, #31
 8005150:	f04f 0a01 	mov.w	sl, #1
 8005154:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005158:	fa0a f202 	lsl.w	r2, sl, r2
 800515c:	420a      	tst	r2, r1
 800515e:	d003      	beq.n	8005168 <__gethex+0x1c4>
 8005160:	4553      	cmp	r3, sl
 8005162:	dc46      	bgt.n	80051f2 <__gethex+0x24e>
 8005164:	f04f 0a02 	mov.w	sl, #2
 8005168:	4639      	mov	r1, r7
 800516a:	4628      	mov	r0, r5
 800516c:	f7ff fed0 	bl	8004f10 <rshift>
 8005170:	443c      	add	r4, r7
 8005172:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005176:	429c      	cmp	r4, r3
 8005178:	dd52      	ble.n	8005220 <__gethex+0x27c>
 800517a:	4629      	mov	r1, r5
 800517c:	9802      	ldr	r0, [sp, #8]
 800517e:	f000 fa3c 	bl	80055fa <_Bfree>
 8005182:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005184:	2300      	movs	r3, #0
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	27a3      	movs	r7, #163	; 0xa3
 800518a:	e793      	b.n	80050b4 <__gethex+0x110>
 800518c:	3101      	adds	r1, #1
 800518e:	105b      	asrs	r3, r3, #1
 8005190:	e7b0      	b.n	80050f4 <__gethex+0x150>
 8005192:	1e73      	subs	r3, r6, #1
 8005194:	9305      	str	r3, [sp, #20]
 8005196:	9a07      	ldr	r2, [sp, #28]
 8005198:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800519c:	4293      	cmp	r3, r2
 800519e:	d018      	beq.n	80051d2 <__gethex+0x22e>
 80051a0:	f1bb 0f20 	cmp.w	fp, #32
 80051a4:	d107      	bne.n	80051b6 <__gethex+0x212>
 80051a6:	9b04      	ldr	r3, [sp, #16]
 80051a8:	f8c3 a000 	str.w	sl, [r3]
 80051ac:	3304      	adds	r3, #4
 80051ae:	f04f 0a00 	mov.w	sl, #0
 80051b2:	9304      	str	r3, [sp, #16]
 80051b4:	46d3      	mov	fp, sl
 80051b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80051ba:	f7ff fede 	bl	8004f7a <__hexdig_fun>
 80051be:	f000 000f 	and.w	r0, r0, #15
 80051c2:	fa00 f00b 	lsl.w	r0, r0, fp
 80051c6:	ea4a 0a00 	orr.w	sl, sl, r0
 80051ca:	f10b 0b04 	add.w	fp, fp, #4
 80051ce:	9b05      	ldr	r3, [sp, #20]
 80051d0:	e00d      	b.n	80051ee <__gethex+0x24a>
 80051d2:	9b05      	ldr	r3, [sp, #20]
 80051d4:	9a08      	ldr	r2, [sp, #32]
 80051d6:	4413      	add	r3, r2
 80051d8:	429f      	cmp	r7, r3
 80051da:	d8e1      	bhi.n	80051a0 <__gethex+0x1fc>
 80051dc:	4618      	mov	r0, r3
 80051de:	9a01      	ldr	r2, [sp, #4]
 80051e0:	9903      	ldr	r1, [sp, #12]
 80051e2:	9309      	str	r3, [sp, #36]	; 0x24
 80051e4:	f001 f8bc 	bl	8006360 <strncmp>
 80051e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d1d8      	bne.n	80051a0 <__gethex+0x1fc>
 80051ee:	461e      	mov	r6, r3
 80051f0:	e791      	b.n	8005116 <__gethex+0x172>
 80051f2:	1eb9      	subs	r1, r7, #2
 80051f4:	4628      	mov	r0, r5
 80051f6:	f000 fd98 	bl	8005d2a <__any_on>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d0b2      	beq.n	8005164 <__gethex+0x1c0>
 80051fe:	f04f 0a03 	mov.w	sl, #3
 8005202:	e7b1      	b.n	8005168 <__gethex+0x1c4>
 8005204:	da09      	bge.n	800521a <__gethex+0x276>
 8005206:	1bf7      	subs	r7, r6, r7
 8005208:	4629      	mov	r1, r5
 800520a:	463a      	mov	r2, r7
 800520c:	9802      	ldr	r0, [sp, #8]
 800520e:	f000 fbb7 	bl	8005980 <__lshift>
 8005212:	1be4      	subs	r4, r4, r7
 8005214:	4605      	mov	r5, r0
 8005216:	f100 0914 	add.w	r9, r0, #20
 800521a:	f04f 0a00 	mov.w	sl, #0
 800521e:	e7a8      	b.n	8005172 <__gethex+0x1ce>
 8005220:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005224:	4284      	cmp	r4, r0
 8005226:	da6a      	bge.n	80052fe <__gethex+0x35a>
 8005228:	1b04      	subs	r4, r0, r4
 800522a:	42a6      	cmp	r6, r4
 800522c:	dc2e      	bgt.n	800528c <__gethex+0x2e8>
 800522e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d022      	beq.n	800527c <__gethex+0x2d8>
 8005236:	2b03      	cmp	r3, #3
 8005238:	d024      	beq.n	8005284 <__gethex+0x2e0>
 800523a:	2b01      	cmp	r3, #1
 800523c:	d115      	bne.n	800526a <__gethex+0x2c6>
 800523e:	42a6      	cmp	r6, r4
 8005240:	d113      	bne.n	800526a <__gethex+0x2c6>
 8005242:	2e01      	cmp	r6, #1
 8005244:	dc0b      	bgt.n	800525e <__gethex+0x2ba>
 8005246:	9a06      	ldr	r2, [sp, #24]
 8005248:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	2301      	movs	r3, #1
 8005250:	612b      	str	r3, [r5, #16]
 8005252:	f8c9 3000 	str.w	r3, [r9]
 8005256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005258:	2762      	movs	r7, #98	; 0x62
 800525a:	601d      	str	r5, [r3, #0]
 800525c:	e72a      	b.n	80050b4 <__gethex+0x110>
 800525e:	1e71      	subs	r1, r6, #1
 8005260:	4628      	mov	r0, r5
 8005262:	f000 fd62 	bl	8005d2a <__any_on>
 8005266:	2800      	cmp	r0, #0
 8005268:	d1ed      	bne.n	8005246 <__gethex+0x2a2>
 800526a:	4629      	mov	r1, r5
 800526c:	9802      	ldr	r0, [sp, #8]
 800526e:	f000 f9c4 	bl	80055fa <_Bfree>
 8005272:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005274:	2300      	movs	r3, #0
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	2750      	movs	r7, #80	; 0x50
 800527a:	e71b      	b.n	80050b4 <__gethex+0x110>
 800527c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0e1      	beq.n	8005246 <__gethex+0x2a2>
 8005282:	e7f2      	b.n	800526a <__gethex+0x2c6>
 8005284:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1dd      	bne.n	8005246 <__gethex+0x2a2>
 800528a:	e7ee      	b.n	800526a <__gethex+0x2c6>
 800528c:	1e67      	subs	r7, r4, #1
 800528e:	f1ba 0f00 	cmp.w	sl, #0
 8005292:	d131      	bne.n	80052f8 <__gethex+0x354>
 8005294:	b127      	cbz	r7, 80052a0 <__gethex+0x2fc>
 8005296:	4639      	mov	r1, r7
 8005298:	4628      	mov	r0, r5
 800529a:	f000 fd46 	bl	8005d2a <__any_on>
 800529e:	4682      	mov	sl, r0
 80052a0:	117a      	asrs	r2, r7, #5
 80052a2:	2301      	movs	r3, #1
 80052a4:	f007 071f 	and.w	r7, r7, #31
 80052a8:	fa03 f707 	lsl.w	r7, r3, r7
 80052ac:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80052b0:	4621      	mov	r1, r4
 80052b2:	421f      	tst	r7, r3
 80052b4:	4628      	mov	r0, r5
 80052b6:	bf18      	it	ne
 80052b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80052bc:	1b36      	subs	r6, r6, r4
 80052be:	f7ff fe27 	bl	8004f10 <rshift>
 80052c2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80052c6:	2702      	movs	r7, #2
 80052c8:	f1ba 0f00 	cmp.w	sl, #0
 80052cc:	d045      	beq.n	800535a <__gethex+0x3b6>
 80052ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d015      	beq.n	8005302 <__gethex+0x35e>
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d017      	beq.n	800530a <__gethex+0x366>
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d109      	bne.n	80052f2 <__gethex+0x34e>
 80052de:	f01a 0f02 	tst.w	sl, #2
 80052e2:	d006      	beq.n	80052f2 <__gethex+0x34e>
 80052e4:	f8d9 3000 	ldr.w	r3, [r9]
 80052e8:	ea4a 0a03 	orr.w	sl, sl, r3
 80052ec:	f01a 0f01 	tst.w	sl, #1
 80052f0:	d10e      	bne.n	8005310 <__gethex+0x36c>
 80052f2:	f047 0710 	orr.w	r7, r7, #16
 80052f6:	e030      	b.n	800535a <__gethex+0x3b6>
 80052f8:	f04f 0a01 	mov.w	sl, #1
 80052fc:	e7d0      	b.n	80052a0 <__gethex+0x2fc>
 80052fe:	2701      	movs	r7, #1
 8005300:	e7e2      	b.n	80052c8 <__gethex+0x324>
 8005302:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005304:	f1c3 0301 	rsb	r3, r3, #1
 8005308:	9315      	str	r3, [sp, #84]	; 0x54
 800530a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <__gethex+0x34e>
 8005310:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005314:	f105 0314 	add.w	r3, r5, #20
 8005318:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800531c:	eb03 010a 	add.w	r1, r3, sl
 8005320:	2000      	movs	r0, #0
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005328:	d01c      	beq.n	8005364 <__gethex+0x3c0>
 800532a:	3201      	adds	r2, #1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	2f02      	cmp	r7, #2
 8005330:	f105 0314 	add.w	r3, r5, #20
 8005334:	d138      	bne.n	80053a8 <__gethex+0x404>
 8005336:	f8d8 2000 	ldr.w	r2, [r8]
 800533a:	3a01      	subs	r2, #1
 800533c:	4296      	cmp	r6, r2
 800533e:	d10a      	bne.n	8005356 <__gethex+0x3b2>
 8005340:	1171      	asrs	r1, r6, #5
 8005342:	2201      	movs	r2, #1
 8005344:	f006 061f 	and.w	r6, r6, #31
 8005348:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800534c:	fa02 f606 	lsl.w	r6, r2, r6
 8005350:	421e      	tst	r6, r3
 8005352:	bf18      	it	ne
 8005354:	4617      	movne	r7, r2
 8005356:	f047 0720 	orr.w	r7, r7, #32
 800535a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800535c:	601d      	str	r5, [r3, #0]
 800535e:	9b06      	ldr	r3, [sp, #24]
 8005360:	601c      	str	r4, [r3, #0]
 8005362:	e6a7      	b.n	80050b4 <__gethex+0x110>
 8005364:	f843 0b04 	str.w	r0, [r3], #4
 8005368:	4299      	cmp	r1, r3
 800536a:	d8da      	bhi.n	8005322 <__gethex+0x37e>
 800536c:	68ab      	ldr	r3, [r5, #8]
 800536e:	4599      	cmp	r9, r3
 8005370:	db12      	blt.n	8005398 <__gethex+0x3f4>
 8005372:	6869      	ldr	r1, [r5, #4]
 8005374:	9802      	ldr	r0, [sp, #8]
 8005376:	3101      	adds	r1, #1
 8005378:	f000 f90b 	bl	8005592 <_Balloc>
 800537c:	692a      	ldr	r2, [r5, #16]
 800537e:	3202      	adds	r2, #2
 8005380:	f105 010c 	add.w	r1, r5, #12
 8005384:	4683      	mov	fp, r0
 8005386:	0092      	lsls	r2, r2, #2
 8005388:	300c      	adds	r0, #12
 800538a:	f000 f8f5 	bl	8005578 <memcpy>
 800538e:	4629      	mov	r1, r5
 8005390:	9802      	ldr	r0, [sp, #8]
 8005392:	f000 f932 	bl	80055fa <_Bfree>
 8005396:	465d      	mov	r5, fp
 8005398:	692b      	ldr	r3, [r5, #16]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80053a0:	612a      	str	r2, [r5, #16]
 80053a2:	2201      	movs	r2, #1
 80053a4:	615a      	str	r2, [r3, #20]
 80053a6:	e7c2      	b.n	800532e <__gethex+0x38a>
 80053a8:	692a      	ldr	r2, [r5, #16]
 80053aa:	4591      	cmp	r9, r2
 80053ac:	da0b      	bge.n	80053c6 <__gethex+0x422>
 80053ae:	2101      	movs	r1, #1
 80053b0:	4628      	mov	r0, r5
 80053b2:	f7ff fdad 	bl	8004f10 <rshift>
 80053b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80053ba:	3401      	adds	r4, #1
 80053bc:	429c      	cmp	r4, r3
 80053be:	f73f aedc 	bgt.w	800517a <__gethex+0x1d6>
 80053c2:	2701      	movs	r7, #1
 80053c4:	e7c7      	b.n	8005356 <__gethex+0x3b2>
 80053c6:	f016 061f 	ands.w	r6, r6, #31
 80053ca:	d0fa      	beq.n	80053c2 <__gethex+0x41e>
 80053cc:	449a      	add	sl, r3
 80053ce:	f1c6 0620 	rsb	r6, r6, #32
 80053d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80053d6:	f000 f9a0 	bl	800571a <__hi0bits>
 80053da:	42b0      	cmp	r0, r6
 80053dc:	dbe7      	blt.n	80053ae <__gethex+0x40a>
 80053de:	e7f0      	b.n	80053c2 <__gethex+0x41e>

080053e0 <L_shift>:
 80053e0:	f1c2 0208 	rsb	r2, r2, #8
 80053e4:	0092      	lsls	r2, r2, #2
 80053e6:	b570      	push	{r4, r5, r6, lr}
 80053e8:	f1c2 0620 	rsb	r6, r2, #32
 80053ec:	6843      	ldr	r3, [r0, #4]
 80053ee:	6804      	ldr	r4, [r0, #0]
 80053f0:	fa03 f506 	lsl.w	r5, r3, r6
 80053f4:	432c      	orrs	r4, r5
 80053f6:	40d3      	lsrs	r3, r2
 80053f8:	6004      	str	r4, [r0, #0]
 80053fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80053fe:	4288      	cmp	r0, r1
 8005400:	d3f4      	bcc.n	80053ec <L_shift+0xc>
 8005402:	bd70      	pop	{r4, r5, r6, pc}

08005404 <__match>:
 8005404:	b530      	push	{r4, r5, lr}
 8005406:	6803      	ldr	r3, [r0, #0]
 8005408:	f811 4b01 	ldrb.w	r4, [r1], #1
 800540c:	3301      	adds	r3, #1
 800540e:	b914      	cbnz	r4, 8005416 <__match+0x12>
 8005410:	6003      	str	r3, [r0, #0]
 8005412:	2001      	movs	r0, #1
 8005414:	bd30      	pop	{r4, r5, pc}
 8005416:	781a      	ldrb	r2, [r3, #0]
 8005418:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800541c:	2d19      	cmp	r5, #25
 800541e:	bf98      	it	ls
 8005420:	3220      	addls	r2, #32
 8005422:	42a2      	cmp	r2, r4
 8005424:	d0f0      	beq.n	8005408 <__match+0x4>
 8005426:	2000      	movs	r0, #0
 8005428:	bd30      	pop	{r4, r5, pc}

0800542a <__hexnan>:
 800542a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542e:	680b      	ldr	r3, [r1, #0]
 8005430:	6801      	ldr	r1, [r0, #0]
 8005432:	115f      	asrs	r7, r3, #5
 8005434:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005438:	f013 031f 	ands.w	r3, r3, #31
 800543c:	b087      	sub	sp, #28
 800543e:	bf18      	it	ne
 8005440:	3704      	addne	r7, #4
 8005442:	2500      	movs	r5, #0
 8005444:	1f3e      	subs	r6, r7, #4
 8005446:	4682      	mov	sl, r0
 8005448:	4690      	mov	r8, r2
 800544a:	9302      	str	r3, [sp, #8]
 800544c:	f847 5c04 	str.w	r5, [r7, #-4]
 8005450:	46b1      	mov	r9, r6
 8005452:	4634      	mov	r4, r6
 8005454:	9501      	str	r5, [sp, #4]
 8005456:	46ab      	mov	fp, r5
 8005458:	784a      	ldrb	r2, [r1, #1]
 800545a:	1c4b      	adds	r3, r1, #1
 800545c:	9303      	str	r3, [sp, #12]
 800545e:	b342      	cbz	r2, 80054b2 <__hexnan+0x88>
 8005460:	4610      	mov	r0, r2
 8005462:	9105      	str	r1, [sp, #20]
 8005464:	9204      	str	r2, [sp, #16]
 8005466:	f7ff fd88 	bl	8004f7a <__hexdig_fun>
 800546a:	2800      	cmp	r0, #0
 800546c:	d143      	bne.n	80054f6 <__hexnan+0xcc>
 800546e:	9a04      	ldr	r2, [sp, #16]
 8005470:	9905      	ldr	r1, [sp, #20]
 8005472:	2a20      	cmp	r2, #32
 8005474:	d818      	bhi.n	80054a8 <__hexnan+0x7e>
 8005476:	9b01      	ldr	r3, [sp, #4]
 8005478:	459b      	cmp	fp, r3
 800547a:	dd13      	ble.n	80054a4 <__hexnan+0x7a>
 800547c:	454c      	cmp	r4, r9
 800547e:	d206      	bcs.n	800548e <__hexnan+0x64>
 8005480:	2d07      	cmp	r5, #7
 8005482:	dc04      	bgt.n	800548e <__hexnan+0x64>
 8005484:	462a      	mov	r2, r5
 8005486:	4649      	mov	r1, r9
 8005488:	4620      	mov	r0, r4
 800548a:	f7ff ffa9 	bl	80053e0 <L_shift>
 800548e:	4544      	cmp	r4, r8
 8005490:	d944      	bls.n	800551c <__hexnan+0xf2>
 8005492:	2300      	movs	r3, #0
 8005494:	f1a4 0904 	sub.w	r9, r4, #4
 8005498:	f844 3c04 	str.w	r3, [r4, #-4]
 800549c:	f8cd b004 	str.w	fp, [sp, #4]
 80054a0:	464c      	mov	r4, r9
 80054a2:	461d      	mov	r5, r3
 80054a4:	9903      	ldr	r1, [sp, #12]
 80054a6:	e7d7      	b.n	8005458 <__hexnan+0x2e>
 80054a8:	2a29      	cmp	r2, #41	; 0x29
 80054aa:	d14a      	bne.n	8005542 <__hexnan+0x118>
 80054ac:	3102      	adds	r1, #2
 80054ae:	f8ca 1000 	str.w	r1, [sl]
 80054b2:	f1bb 0f00 	cmp.w	fp, #0
 80054b6:	d044      	beq.n	8005542 <__hexnan+0x118>
 80054b8:	454c      	cmp	r4, r9
 80054ba:	d206      	bcs.n	80054ca <__hexnan+0xa0>
 80054bc:	2d07      	cmp	r5, #7
 80054be:	dc04      	bgt.n	80054ca <__hexnan+0xa0>
 80054c0:	462a      	mov	r2, r5
 80054c2:	4649      	mov	r1, r9
 80054c4:	4620      	mov	r0, r4
 80054c6:	f7ff ff8b 	bl	80053e0 <L_shift>
 80054ca:	4544      	cmp	r4, r8
 80054cc:	d928      	bls.n	8005520 <__hexnan+0xf6>
 80054ce:	4643      	mov	r3, r8
 80054d0:	f854 2b04 	ldr.w	r2, [r4], #4
 80054d4:	f843 2b04 	str.w	r2, [r3], #4
 80054d8:	42a6      	cmp	r6, r4
 80054da:	d2f9      	bcs.n	80054d0 <__hexnan+0xa6>
 80054dc:	2200      	movs	r2, #0
 80054de:	f843 2b04 	str.w	r2, [r3], #4
 80054e2:	429e      	cmp	r6, r3
 80054e4:	d2fb      	bcs.n	80054de <__hexnan+0xb4>
 80054e6:	6833      	ldr	r3, [r6, #0]
 80054e8:	b91b      	cbnz	r3, 80054f2 <__hexnan+0xc8>
 80054ea:	4546      	cmp	r6, r8
 80054ec:	d127      	bne.n	800553e <__hexnan+0x114>
 80054ee:	2301      	movs	r3, #1
 80054f0:	6033      	str	r3, [r6, #0]
 80054f2:	2005      	movs	r0, #5
 80054f4:	e026      	b.n	8005544 <__hexnan+0x11a>
 80054f6:	3501      	adds	r5, #1
 80054f8:	2d08      	cmp	r5, #8
 80054fa:	f10b 0b01 	add.w	fp, fp, #1
 80054fe:	dd06      	ble.n	800550e <__hexnan+0xe4>
 8005500:	4544      	cmp	r4, r8
 8005502:	d9cf      	bls.n	80054a4 <__hexnan+0x7a>
 8005504:	2300      	movs	r3, #0
 8005506:	f844 3c04 	str.w	r3, [r4, #-4]
 800550a:	2501      	movs	r5, #1
 800550c:	3c04      	subs	r4, #4
 800550e:	6822      	ldr	r2, [r4, #0]
 8005510:	f000 000f 	and.w	r0, r0, #15
 8005514:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005518:	6020      	str	r0, [r4, #0]
 800551a:	e7c3      	b.n	80054a4 <__hexnan+0x7a>
 800551c:	2508      	movs	r5, #8
 800551e:	e7c1      	b.n	80054a4 <__hexnan+0x7a>
 8005520:	9b02      	ldr	r3, [sp, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0df      	beq.n	80054e6 <__hexnan+0xbc>
 8005526:	f04f 32ff 	mov.w	r2, #4294967295
 800552a:	f1c3 0320 	rsb	r3, r3, #32
 800552e:	fa22 f303 	lsr.w	r3, r2, r3
 8005532:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005536:	401a      	ands	r2, r3
 8005538:	f847 2c04 	str.w	r2, [r7, #-4]
 800553c:	e7d3      	b.n	80054e6 <__hexnan+0xbc>
 800553e:	3e04      	subs	r6, #4
 8005540:	e7d1      	b.n	80054e6 <__hexnan+0xbc>
 8005542:	2004      	movs	r0, #4
 8005544:	b007      	add	sp, #28
 8005546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800554a <__locale_ctype_ptr_l>:
 800554a:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800554e:	4770      	bx	lr

08005550 <__localeconv_l>:
 8005550:	30f0      	adds	r0, #240	; 0xf0
 8005552:	4770      	bx	lr

08005554 <__ascii_mbtowc>:
 8005554:	b082      	sub	sp, #8
 8005556:	b901      	cbnz	r1, 800555a <__ascii_mbtowc+0x6>
 8005558:	a901      	add	r1, sp, #4
 800555a:	b142      	cbz	r2, 800556e <__ascii_mbtowc+0x1a>
 800555c:	b14b      	cbz	r3, 8005572 <__ascii_mbtowc+0x1e>
 800555e:	7813      	ldrb	r3, [r2, #0]
 8005560:	600b      	str	r3, [r1, #0]
 8005562:	7812      	ldrb	r2, [r2, #0]
 8005564:	1c10      	adds	r0, r2, #0
 8005566:	bf18      	it	ne
 8005568:	2001      	movne	r0, #1
 800556a:	b002      	add	sp, #8
 800556c:	4770      	bx	lr
 800556e:	4610      	mov	r0, r2
 8005570:	e7fb      	b.n	800556a <__ascii_mbtowc+0x16>
 8005572:	f06f 0001 	mvn.w	r0, #1
 8005576:	e7f8      	b.n	800556a <__ascii_mbtowc+0x16>

08005578 <memcpy>:
 8005578:	b510      	push	{r4, lr}
 800557a:	1e43      	subs	r3, r0, #1
 800557c:	440a      	add	r2, r1
 800557e:	4291      	cmp	r1, r2
 8005580:	d100      	bne.n	8005584 <memcpy+0xc>
 8005582:	bd10      	pop	{r4, pc}
 8005584:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005588:	f803 4f01 	strb.w	r4, [r3, #1]!
 800558c:	e7f7      	b.n	800557e <memcpy+0x6>

0800558e <__malloc_lock>:
 800558e:	4770      	bx	lr

08005590 <__malloc_unlock>:
 8005590:	4770      	bx	lr

08005592 <_Balloc>:
 8005592:	b570      	push	{r4, r5, r6, lr}
 8005594:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005596:	4604      	mov	r4, r0
 8005598:	460e      	mov	r6, r1
 800559a:	b93d      	cbnz	r5, 80055ac <_Balloc+0x1a>
 800559c:	2010      	movs	r0, #16
 800559e:	f7fe fcd7 	bl	8003f50 <malloc>
 80055a2:	6260      	str	r0, [r4, #36]	; 0x24
 80055a4:	6045      	str	r5, [r0, #4]
 80055a6:	6085      	str	r5, [r0, #8]
 80055a8:	6005      	str	r5, [r0, #0]
 80055aa:	60c5      	str	r5, [r0, #12]
 80055ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80055ae:	68eb      	ldr	r3, [r5, #12]
 80055b0:	b183      	cbz	r3, 80055d4 <_Balloc+0x42>
 80055b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80055ba:	b9b8      	cbnz	r0, 80055ec <_Balloc+0x5a>
 80055bc:	2101      	movs	r1, #1
 80055be:	fa01 f506 	lsl.w	r5, r1, r6
 80055c2:	1d6a      	adds	r2, r5, #5
 80055c4:	0092      	lsls	r2, r2, #2
 80055c6:	4620      	mov	r0, r4
 80055c8:	f000 fbd0 	bl	8005d6c <_calloc_r>
 80055cc:	b160      	cbz	r0, 80055e8 <_Balloc+0x56>
 80055ce:	6046      	str	r6, [r0, #4]
 80055d0:	6085      	str	r5, [r0, #8]
 80055d2:	e00e      	b.n	80055f2 <_Balloc+0x60>
 80055d4:	2221      	movs	r2, #33	; 0x21
 80055d6:	2104      	movs	r1, #4
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 fbc7 	bl	8005d6c <_calloc_r>
 80055de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055e0:	60e8      	str	r0, [r5, #12]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e4      	bne.n	80055b2 <_Balloc+0x20>
 80055e8:	2000      	movs	r0, #0
 80055ea:	bd70      	pop	{r4, r5, r6, pc}
 80055ec:	6802      	ldr	r2, [r0, #0]
 80055ee:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80055f2:	2300      	movs	r3, #0
 80055f4:	6103      	str	r3, [r0, #16]
 80055f6:	60c3      	str	r3, [r0, #12]
 80055f8:	bd70      	pop	{r4, r5, r6, pc}

080055fa <_Bfree>:
 80055fa:	b570      	push	{r4, r5, r6, lr}
 80055fc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80055fe:	4606      	mov	r6, r0
 8005600:	460d      	mov	r5, r1
 8005602:	b93c      	cbnz	r4, 8005614 <_Bfree+0x1a>
 8005604:	2010      	movs	r0, #16
 8005606:	f7fe fca3 	bl	8003f50 <malloc>
 800560a:	6270      	str	r0, [r6, #36]	; 0x24
 800560c:	6044      	str	r4, [r0, #4]
 800560e:	6084      	str	r4, [r0, #8]
 8005610:	6004      	str	r4, [r0, #0]
 8005612:	60c4      	str	r4, [r0, #12]
 8005614:	b13d      	cbz	r5, 8005626 <_Bfree+0x2c>
 8005616:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005618:	686a      	ldr	r2, [r5, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005620:	6029      	str	r1, [r5, #0]
 8005622:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005626:	bd70      	pop	{r4, r5, r6, pc}

08005628 <__multadd>:
 8005628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562c:	690d      	ldr	r5, [r1, #16]
 800562e:	461f      	mov	r7, r3
 8005630:	4606      	mov	r6, r0
 8005632:	460c      	mov	r4, r1
 8005634:	f101 0e14 	add.w	lr, r1, #20
 8005638:	2300      	movs	r3, #0
 800563a:	f8de 0000 	ldr.w	r0, [lr]
 800563e:	b281      	uxth	r1, r0
 8005640:	fb02 7101 	mla	r1, r2, r1, r7
 8005644:	0c0f      	lsrs	r7, r1, #16
 8005646:	0c00      	lsrs	r0, r0, #16
 8005648:	fb02 7000 	mla	r0, r2, r0, r7
 800564c:	b289      	uxth	r1, r1
 800564e:	3301      	adds	r3, #1
 8005650:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005654:	429d      	cmp	r5, r3
 8005656:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800565a:	f84e 1b04 	str.w	r1, [lr], #4
 800565e:	dcec      	bgt.n	800563a <__multadd+0x12>
 8005660:	b1d7      	cbz	r7, 8005698 <__multadd+0x70>
 8005662:	68a3      	ldr	r3, [r4, #8]
 8005664:	429d      	cmp	r5, r3
 8005666:	db12      	blt.n	800568e <__multadd+0x66>
 8005668:	6861      	ldr	r1, [r4, #4]
 800566a:	4630      	mov	r0, r6
 800566c:	3101      	adds	r1, #1
 800566e:	f7ff ff90 	bl	8005592 <_Balloc>
 8005672:	6922      	ldr	r2, [r4, #16]
 8005674:	3202      	adds	r2, #2
 8005676:	f104 010c 	add.w	r1, r4, #12
 800567a:	4680      	mov	r8, r0
 800567c:	0092      	lsls	r2, r2, #2
 800567e:	300c      	adds	r0, #12
 8005680:	f7ff ff7a 	bl	8005578 <memcpy>
 8005684:	4621      	mov	r1, r4
 8005686:	4630      	mov	r0, r6
 8005688:	f7ff ffb7 	bl	80055fa <_Bfree>
 800568c:	4644      	mov	r4, r8
 800568e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005692:	3501      	adds	r5, #1
 8005694:	615f      	str	r7, [r3, #20]
 8005696:	6125      	str	r5, [r4, #16]
 8005698:	4620      	mov	r0, r4
 800569a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800569e <__s2b>:
 800569e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056a2:	460c      	mov	r4, r1
 80056a4:	4615      	mov	r5, r2
 80056a6:	461f      	mov	r7, r3
 80056a8:	2209      	movs	r2, #9
 80056aa:	3308      	adds	r3, #8
 80056ac:	4606      	mov	r6, r0
 80056ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80056b2:	2100      	movs	r1, #0
 80056b4:	2201      	movs	r2, #1
 80056b6:	429a      	cmp	r2, r3
 80056b8:	db20      	blt.n	80056fc <__s2b+0x5e>
 80056ba:	4630      	mov	r0, r6
 80056bc:	f7ff ff69 	bl	8005592 <_Balloc>
 80056c0:	9b08      	ldr	r3, [sp, #32]
 80056c2:	6143      	str	r3, [r0, #20]
 80056c4:	2d09      	cmp	r5, #9
 80056c6:	f04f 0301 	mov.w	r3, #1
 80056ca:	6103      	str	r3, [r0, #16]
 80056cc:	dd19      	ble.n	8005702 <__s2b+0x64>
 80056ce:	f104 0909 	add.w	r9, r4, #9
 80056d2:	46c8      	mov	r8, r9
 80056d4:	442c      	add	r4, r5
 80056d6:	f818 3b01 	ldrb.w	r3, [r8], #1
 80056da:	4601      	mov	r1, r0
 80056dc:	3b30      	subs	r3, #48	; 0x30
 80056de:	220a      	movs	r2, #10
 80056e0:	4630      	mov	r0, r6
 80056e2:	f7ff ffa1 	bl	8005628 <__multadd>
 80056e6:	45a0      	cmp	r8, r4
 80056e8:	d1f5      	bne.n	80056d6 <__s2b+0x38>
 80056ea:	f1a5 0408 	sub.w	r4, r5, #8
 80056ee:	444c      	add	r4, r9
 80056f0:	1b2d      	subs	r5, r5, r4
 80056f2:	1963      	adds	r3, r4, r5
 80056f4:	42bb      	cmp	r3, r7
 80056f6:	db07      	blt.n	8005708 <__s2b+0x6a>
 80056f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056fc:	0052      	lsls	r2, r2, #1
 80056fe:	3101      	adds	r1, #1
 8005700:	e7d9      	b.n	80056b6 <__s2b+0x18>
 8005702:	340a      	adds	r4, #10
 8005704:	2509      	movs	r5, #9
 8005706:	e7f3      	b.n	80056f0 <__s2b+0x52>
 8005708:	f814 3b01 	ldrb.w	r3, [r4], #1
 800570c:	4601      	mov	r1, r0
 800570e:	3b30      	subs	r3, #48	; 0x30
 8005710:	220a      	movs	r2, #10
 8005712:	4630      	mov	r0, r6
 8005714:	f7ff ff88 	bl	8005628 <__multadd>
 8005718:	e7eb      	b.n	80056f2 <__s2b+0x54>

0800571a <__hi0bits>:
 800571a:	0c02      	lsrs	r2, r0, #16
 800571c:	0412      	lsls	r2, r2, #16
 800571e:	4603      	mov	r3, r0
 8005720:	b9b2      	cbnz	r2, 8005750 <__hi0bits+0x36>
 8005722:	0403      	lsls	r3, r0, #16
 8005724:	2010      	movs	r0, #16
 8005726:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800572a:	bf04      	itt	eq
 800572c:	021b      	lsleq	r3, r3, #8
 800572e:	3008      	addeq	r0, #8
 8005730:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005734:	bf04      	itt	eq
 8005736:	011b      	lsleq	r3, r3, #4
 8005738:	3004      	addeq	r0, #4
 800573a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800573e:	bf04      	itt	eq
 8005740:	009b      	lsleq	r3, r3, #2
 8005742:	3002      	addeq	r0, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	db06      	blt.n	8005756 <__hi0bits+0x3c>
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	d503      	bpl.n	8005754 <__hi0bits+0x3a>
 800574c:	3001      	adds	r0, #1
 800574e:	4770      	bx	lr
 8005750:	2000      	movs	r0, #0
 8005752:	e7e8      	b.n	8005726 <__hi0bits+0xc>
 8005754:	2020      	movs	r0, #32
 8005756:	4770      	bx	lr

08005758 <__lo0bits>:
 8005758:	6803      	ldr	r3, [r0, #0]
 800575a:	f013 0207 	ands.w	r2, r3, #7
 800575e:	4601      	mov	r1, r0
 8005760:	d00b      	beq.n	800577a <__lo0bits+0x22>
 8005762:	07da      	lsls	r2, r3, #31
 8005764:	d423      	bmi.n	80057ae <__lo0bits+0x56>
 8005766:	0798      	lsls	r0, r3, #30
 8005768:	bf49      	itett	mi
 800576a:	085b      	lsrmi	r3, r3, #1
 800576c:	089b      	lsrpl	r3, r3, #2
 800576e:	2001      	movmi	r0, #1
 8005770:	600b      	strmi	r3, [r1, #0]
 8005772:	bf5c      	itt	pl
 8005774:	600b      	strpl	r3, [r1, #0]
 8005776:	2002      	movpl	r0, #2
 8005778:	4770      	bx	lr
 800577a:	b298      	uxth	r0, r3
 800577c:	b9a8      	cbnz	r0, 80057aa <__lo0bits+0x52>
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	2010      	movs	r0, #16
 8005782:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005786:	bf04      	itt	eq
 8005788:	0a1b      	lsreq	r3, r3, #8
 800578a:	3008      	addeq	r0, #8
 800578c:	071a      	lsls	r2, r3, #28
 800578e:	bf04      	itt	eq
 8005790:	091b      	lsreq	r3, r3, #4
 8005792:	3004      	addeq	r0, #4
 8005794:	079a      	lsls	r2, r3, #30
 8005796:	bf04      	itt	eq
 8005798:	089b      	lsreq	r3, r3, #2
 800579a:	3002      	addeq	r0, #2
 800579c:	07da      	lsls	r2, r3, #31
 800579e:	d402      	bmi.n	80057a6 <__lo0bits+0x4e>
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	d006      	beq.n	80057b2 <__lo0bits+0x5a>
 80057a4:	3001      	adds	r0, #1
 80057a6:	600b      	str	r3, [r1, #0]
 80057a8:	4770      	bx	lr
 80057aa:	4610      	mov	r0, r2
 80057ac:	e7e9      	b.n	8005782 <__lo0bits+0x2a>
 80057ae:	2000      	movs	r0, #0
 80057b0:	4770      	bx	lr
 80057b2:	2020      	movs	r0, #32
 80057b4:	4770      	bx	lr

080057b6 <__i2b>:
 80057b6:	b510      	push	{r4, lr}
 80057b8:	460c      	mov	r4, r1
 80057ba:	2101      	movs	r1, #1
 80057bc:	f7ff fee9 	bl	8005592 <_Balloc>
 80057c0:	2201      	movs	r2, #1
 80057c2:	6144      	str	r4, [r0, #20]
 80057c4:	6102      	str	r2, [r0, #16]
 80057c6:	bd10      	pop	{r4, pc}

080057c8 <__multiply>:
 80057c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057cc:	4614      	mov	r4, r2
 80057ce:	690a      	ldr	r2, [r1, #16]
 80057d0:	6923      	ldr	r3, [r4, #16]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	bfb8      	it	lt
 80057d6:	460b      	movlt	r3, r1
 80057d8:	4689      	mov	r9, r1
 80057da:	bfbc      	itt	lt
 80057dc:	46a1      	movlt	r9, r4
 80057de:	461c      	movlt	r4, r3
 80057e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80057e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80057e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80057ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80057f0:	eb07 060a 	add.w	r6, r7, sl
 80057f4:	429e      	cmp	r6, r3
 80057f6:	bfc8      	it	gt
 80057f8:	3101      	addgt	r1, #1
 80057fa:	f7ff feca 	bl	8005592 <_Balloc>
 80057fe:	f100 0514 	add.w	r5, r0, #20
 8005802:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005806:	462b      	mov	r3, r5
 8005808:	2200      	movs	r2, #0
 800580a:	4543      	cmp	r3, r8
 800580c:	d316      	bcc.n	800583c <__multiply+0x74>
 800580e:	f104 0214 	add.w	r2, r4, #20
 8005812:	f109 0114 	add.w	r1, r9, #20
 8005816:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800581a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	9c01      	ldr	r4, [sp, #4]
 8005822:	4294      	cmp	r4, r2
 8005824:	4613      	mov	r3, r2
 8005826:	d80c      	bhi.n	8005842 <__multiply+0x7a>
 8005828:	2e00      	cmp	r6, #0
 800582a:	dd03      	ble.n	8005834 <__multiply+0x6c>
 800582c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005830:	2b00      	cmp	r3, #0
 8005832:	d054      	beq.n	80058de <__multiply+0x116>
 8005834:	6106      	str	r6, [r0, #16]
 8005836:	b003      	add	sp, #12
 8005838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583c:	f843 2b04 	str.w	r2, [r3], #4
 8005840:	e7e3      	b.n	800580a <__multiply+0x42>
 8005842:	f8b3 a000 	ldrh.w	sl, [r3]
 8005846:	3204      	adds	r2, #4
 8005848:	f1ba 0f00 	cmp.w	sl, #0
 800584c:	d020      	beq.n	8005890 <__multiply+0xc8>
 800584e:	46ae      	mov	lr, r5
 8005850:	4689      	mov	r9, r1
 8005852:	f04f 0c00 	mov.w	ip, #0
 8005856:	f859 4b04 	ldr.w	r4, [r9], #4
 800585a:	f8be b000 	ldrh.w	fp, [lr]
 800585e:	b2a3      	uxth	r3, r4
 8005860:	fb0a b303 	mla	r3, sl, r3, fp
 8005864:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005868:	f8de 4000 	ldr.w	r4, [lr]
 800586c:	4463      	add	r3, ip
 800586e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005872:	fb0a c40b 	mla	r4, sl, fp, ip
 8005876:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800587a:	b29b      	uxth	r3, r3
 800587c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005880:	454f      	cmp	r7, r9
 8005882:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005886:	f84e 3b04 	str.w	r3, [lr], #4
 800588a:	d8e4      	bhi.n	8005856 <__multiply+0x8e>
 800588c:	f8ce c000 	str.w	ip, [lr]
 8005890:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005894:	f1b9 0f00 	cmp.w	r9, #0
 8005898:	d01f      	beq.n	80058da <__multiply+0x112>
 800589a:	682b      	ldr	r3, [r5, #0]
 800589c:	46ae      	mov	lr, r5
 800589e:	468c      	mov	ip, r1
 80058a0:	f04f 0a00 	mov.w	sl, #0
 80058a4:	f8bc 4000 	ldrh.w	r4, [ip]
 80058a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80058ac:	fb09 b404 	mla	r4, r9, r4, fp
 80058b0:	44a2      	add	sl, r4
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80058b8:	f84e 3b04 	str.w	r3, [lr], #4
 80058bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80058c0:	f8be 4000 	ldrh.w	r4, [lr]
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	fb09 4303 	mla	r3, r9, r3, r4
 80058ca:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80058ce:	4567      	cmp	r7, ip
 80058d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058d4:	d8e6      	bhi.n	80058a4 <__multiply+0xdc>
 80058d6:	f8ce 3000 	str.w	r3, [lr]
 80058da:	3504      	adds	r5, #4
 80058dc:	e7a0      	b.n	8005820 <__multiply+0x58>
 80058de:	3e01      	subs	r6, #1
 80058e0:	e7a2      	b.n	8005828 <__multiply+0x60>
	...

080058e4 <__pow5mult>:
 80058e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e8:	4615      	mov	r5, r2
 80058ea:	f012 0203 	ands.w	r2, r2, #3
 80058ee:	4606      	mov	r6, r0
 80058f0:	460f      	mov	r7, r1
 80058f2:	d007      	beq.n	8005904 <__pow5mult+0x20>
 80058f4:	3a01      	subs	r2, #1
 80058f6:	4c21      	ldr	r4, [pc, #132]	; (800597c <__pow5mult+0x98>)
 80058f8:	2300      	movs	r3, #0
 80058fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058fe:	f7ff fe93 	bl	8005628 <__multadd>
 8005902:	4607      	mov	r7, r0
 8005904:	10ad      	asrs	r5, r5, #2
 8005906:	d035      	beq.n	8005974 <__pow5mult+0x90>
 8005908:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800590a:	b93c      	cbnz	r4, 800591c <__pow5mult+0x38>
 800590c:	2010      	movs	r0, #16
 800590e:	f7fe fb1f 	bl	8003f50 <malloc>
 8005912:	6270      	str	r0, [r6, #36]	; 0x24
 8005914:	6044      	str	r4, [r0, #4]
 8005916:	6084      	str	r4, [r0, #8]
 8005918:	6004      	str	r4, [r0, #0]
 800591a:	60c4      	str	r4, [r0, #12]
 800591c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005924:	b94c      	cbnz	r4, 800593a <__pow5mult+0x56>
 8005926:	f240 2171 	movw	r1, #625	; 0x271
 800592a:	4630      	mov	r0, r6
 800592c:	f7ff ff43 	bl	80057b6 <__i2b>
 8005930:	2300      	movs	r3, #0
 8005932:	f8c8 0008 	str.w	r0, [r8, #8]
 8005936:	4604      	mov	r4, r0
 8005938:	6003      	str	r3, [r0, #0]
 800593a:	f04f 0800 	mov.w	r8, #0
 800593e:	07eb      	lsls	r3, r5, #31
 8005940:	d50a      	bpl.n	8005958 <__pow5mult+0x74>
 8005942:	4639      	mov	r1, r7
 8005944:	4622      	mov	r2, r4
 8005946:	4630      	mov	r0, r6
 8005948:	f7ff ff3e 	bl	80057c8 <__multiply>
 800594c:	4639      	mov	r1, r7
 800594e:	4681      	mov	r9, r0
 8005950:	4630      	mov	r0, r6
 8005952:	f7ff fe52 	bl	80055fa <_Bfree>
 8005956:	464f      	mov	r7, r9
 8005958:	106d      	asrs	r5, r5, #1
 800595a:	d00b      	beq.n	8005974 <__pow5mult+0x90>
 800595c:	6820      	ldr	r0, [r4, #0]
 800595e:	b938      	cbnz	r0, 8005970 <__pow5mult+0x8c>
 8005960:	4622      	mov	r2, r4
 8005962:	4621      	mov	r1, r4
 8005964:	4630      	mov	r0, r6
 8005966:	f7ff ff2f 	bl	80057c8 <__multiply>
 800596a:	6020      	str	r0, [r4, #0]
 800596c:	f8c0 8000 	str.w	r8, [r0]
 8005970:	4604      	mov	r4, r0
 8005972:	e7e4      	b.n	800593e <__pow5mult+0x5a>
 8005974:	4638      	mov	r0, r7
 8005976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597a:	bf00      	nop
 800597c:	08006710 	.word	0x08006710

08005980 <__lshift>:
 8005980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005984:	460c      	mov	r4, r1
 8005986:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	6849      	ldr	r1, [r1, #4]
 800598e:	eb0a 0903 	add.w	r9, sl, r3
 8005992:	68a3      	ldr	r3, [r4, #8]
 8005994:	4607      	mov	r7, r0
 8005996:	4616      	mov	r6, r2
 8005998:	f109 0501 	add.w	r5, r9, #1
 800599c:	42ab      	cmp	r3, r5
 800599e:	db31      	blt.n	8005a04 <__lshift+0x84>
 80059a0:	4638      	mov	r0, r7
 80059a2:	f7ff fdf6 	bl	8005592 <_Balloc>
 80059a6:	2200      	movs	r2, #0
 80059a8:	4680      	mov	r8, r0
 80059aa:	f100 0314 	add.w	r3, r0, #20
 80059ae:	4611      	mov	r1, r2
 80059b0:	4552      	cmp	r2, sl
 80059b2:	db2a      	blt.n	8005a0a <__lshift+0x8a>
 80059b4:	6920      	ldr	r0, [r4, #16]
 80059b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059ba:	f104 0114 	add.w	r1, r4, #20
 80059be:	f016 021f 	ands.w	r2, r6, #31
 80059c2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80059c6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80059ca:	d022      	beq.n	8005a12 <__lshift+0x92>
 80059cc:	f1c2 0c20 	rsb	ip, r2, #32
 80059d0:	2000      	movs	r0, #0
 80059d2:	680e      	ldr	r6, [r1, #0]
 80059d4:	4096      	lsls	r6, r2
 80059d6:	4330      	orrs	r0, r6
 80059d8:	f843 0b04 	str.w	r0, [r3], #4
 80059dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80059e0:	458e      	cmp	lr, r1
 80059e2:	fa20 f00c 	lsr.w	r0, r0, ip
 80059e6:	d8f4      	bhi.n	80059d2 <__lshift+0x52>
 80059e8:	6018      	str	r0, [r3, #0]
 80059ea:	b108      	cbz	r0, 80059f0 <__lshift+0x70>
 80059ec:	f109 0502 	add.w	r5, r9, #2
 80059f0:	3d01      	subs	r5, #1
 80059f2:	4638      	mov	r0, r7
 80059f4:	f8c8 5010 	str.w	r5, [r8, #16]
 80059f8:	4621      	mov	r1, r4
 80059fa:	f7ff fdfe 	bl	80055fa <_Bfree>
 80059fe:	4640      	mov	r0, r8
 8005a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a04:	3101      	adds	r1, #1
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	e7c8      	b.n	800599c <__lshift+0x1c>
 8005a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005a0e:	3201      	adds	r2, #1
 8005a10:	e7ce      	b.n	80059b0 <__lshift+0x30>
 8005a12:	3b04      	subs	r3, #4
 8005a14:	f851 2b04 	ldr.w	r2, [r1], #4
 8005a18:	f843 2f04 	str.w	r2, [r3, #4]!
 8005a1c:	458e      	cmp	lr, r1
 8005a1e:	d8f9      	bhi.n	8005a14 <__lshift+0x94>
 8005a20:	e7e6      	b.n	80059f0 <__lshift+0x70>

08005a22 <__mcmp>:
 8005a22:	6903      	ldr	r3, [r0, #16]
 8005a24:	690a      	ldr	r2, [r1, #16]
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	b530      	push	{r4, r5, lr}
 8005a2a:	d10c      	bne.n	8005a46 <__mcmp+0x24>
 8005a2c:	0092      	lsls	r2, r2, #2
 8005a2e:	3014      	adds	r0, #20
 8005a30:	3114      	adds	r1, #20
 8005a32:	1884      	adds	r4, r0, r2
 8005a34:	4411      	add	r1, r2
 8005a36:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a3a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a3e:	4295      	cmp	r5, r2
 8005a40:	d003      	beq.n	8005a4a <__mcmp+0x28>
 8005a42:	d305      	bcc.n	8005a50 <__mcmp+0x2e>
 8005a44:	2301      	movs	r3, #1
 8005a46:	4618      	mov	r0, r3
 8005a48:	bd30      	pop	{r4, r5, pc}
 8005a4a:	42a0      	cmp	r0, r4
 8005a4c:	d3f3      	bcc.n	8005a36 <__mcmp+0x14>
 8005a4e:	e7fa      	b.n	8005a46 <__mcmp+0x24>
 8005a50:	f04f 33ff 	mov.w	r3, #4294967295
 8005a54:	e7f7      	b.n	8005a46 <__mcmp+0x24>

08005a56 <__mdiff>:
 8005a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a5a:	460d      	mov	r5, r1
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	4611      	mov	r1, r2
 8005a60:	4628      	mov	r0, r5
 8005a62:	4614      	mov	r4, r2
 8005a64:	f7ff ffdd 	bl	8005a22 <__mcmp>
 8005a68:	1e06      	subs	r6, r0, #0
 8005a6a:	d108      	bne.n	8005a7e <__mdiff+0x28>
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4638      	mov	r0, r7
 8005a70:	f7ff fd8f 	bl	8005592 <_Balloc>
 8005a74:	2301      	movs	r3, #1
 8005a76:	6103      	str	r3, [r0, #16]
 8005a78:	6146      	str	r6, [r0, #20]
 8005a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7e:	bfa4      	itt	ge
 8005a80:	4623      	movge	r3, r4
 8005a82:	462c      	movge	r4, r5
 8005a84:	4638      	mov	r0, r7
 8005a86:	6861      	ldr	r1, [r4, #4]
 8005a88:	bfa6      	itte	ge
 8005a8a:	461d      	movge	r5, r3
 8005a8c:	2600      	movge	r6, #0
 8005a8e:	2601      	movlt	r6, #1
 8005a90:	f7ff fd7f 	bl	8005592 <_Balloc>
 8005a94:	692b      	ldr	r3, [r5, #16]
 8005a96:	60c6      	str	r6, [r0, #12]
 8005a98:	6926      	ldr	r6, [r4, #16]
 8005a9a:	f105 0914 	add.w	r9, r5, #20
 8005a9e:	f104 0214 	add.w	r2, r4, #20
 8005aa2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005aa6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005aaa:	f100 0514 	add.w	r5, r0, #20
 8005aae:	f04f 0c00 	mov.w	ip, #0
 8005ab2:	f852 ab04 	ldr.w	sl, [r2], #4
 8005ab6:	f859 4b04 	ldr.w	r4, [r9], #4
 8005aba:	fa1c f18a 	uxtah	r1, ip, sl
 8005abe:	b2a3      	uxth	r3, r4
 8005ac0:	1ac9      	subs	r1, r1, r3
 8005ac2:	0c23      	lsrs	r3, r4, #16
 8005ac4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005ac8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005acc:	b289      	uxth	r1, r1
 8005ace:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005ad2:	45c8      	cmp	r8, r9
 8005ad4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005ad8:	4696      	mov	lr, r2
 8005ada:	f845 3b04 	str.w	r3, [r5], #4
 8005ade:	d8e8      	bhi.n	8005ab2 <__mdiff+0x5c>
 8005ae0:	45be      	cmp	lr, r7
 8005ae2:	d305      	bcc.n	8005af0 <__mdiff+0x9a>
 8005ae4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005ae8:	b18b      	cbz	r3, 8005b0e <__mdiff+0xb8>
 8005aea:	6106      	str	r6, [r0, #16]
 8005aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af0:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005af4:	fa1c f381 	uxtah	r3, ip, r1
 8005af8:	141a      	asrs	r2, r3, #16
 8005afa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b08:	f845 3b04 	str.w	r3, [r5], #4
 8005b0c:	e7e8      	b.n	8005ae0 <__mdiff+0x8a>
 8005b0e:	3e01      	subs	r6, #1
 8005b10:	e7e8      	b.n	8005ae4 <__mdiff+0x8e>
	...

08005b14 <__ulp>:
 8005b14:	4b12      	ldr	r3, [pc, #72]	; (8005b60 <__ulp+0x4c>)
 8005b16:	ee10 2a90 	vmov	r2, s1
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	dd04      	ble.n	8005b2e <__ulp+0x1a>
 8005b24:	2000      	movs	r0, #0
 8005b26:	4619      	mov	r1, r3
 8005b28:	ec41 0b10 	vmov	d0, r0, r1
 8005b2c:	4770      	bx	lr
 8005b2e:	425b      	negs	r3, r3
 8005b30:	151b      	asrs	r3, r3, #20
 8005b32:	2b13      	cmp	r3, #19
 8005b34:	f04f 0000 	mov.w	r0, #0
 8005b38:	f04f 0100 	mov.w	r1, #0
 8005b3c:	dc04      	bgt.n	8005b48 <__ulp+0x34>
 8005b3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005b42:	fa42 f103 	asr.w	r1, r2, r3
 8005b46:	e7ef      	b.n	8005b28 <__ulp+0x14>
 8005b48:	3b14      	subs	r3, #20
 8005b4a:	2b1e      	cmp	r3, #30
 8005b4c:	f04f 0201 	mov.w	r2, #1
 8005b50:	bfda      	itte	le
 8005b52:	f1c3 031f 	rsble	r3, r3, #31
 8005b56:	fa02 f303 	lslle.w	r3, r2, r3
 8005b5a:	4613      	movgt	r3, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	e7e3      	b.n	8005b28 <__ulp+0x14>
 8005b60:	7ff00000 	.word	0x7ff00000

08005b64 <__b2d>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	6905      	ldr	r5, [r0, #16]
 8005b68:	f100 0714 	add.w	r7, r0, #20
 8005b6c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005b70:	1f2e      	subs	r6, r5, #4
 8005b72:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005b76:	4620      	mov	r0, r4
 8005b78:	f7ff fdcf 	bl	800571a <__hi0bits>
 8005b7c:	f1c0 0320 	rsb	r3, r0, #32
 8005b80:	280a      	cmp	r0, #10
 8005b82:	600b      	str	r3, [r1, #0]
 8005b84:	f8df e074 	ldr.w	lr, [pc, #116]	; 8005bfc <__b2d+0x98>
 8005b88:	dc14      	bgt.n	8005bb4 <__b2d+0x50>
 8005b8a:	f1c0 0c0b 	rsb	ip, r0, #11
 8005b8e:	fa24 f10c 	lsr.w	r1, r4, ip
 8005b92:	42b7      	cmp	r7, r6
 8005b94:	ea41 030e 	orr.w	r3, r1, lr
 8005b98:	bf34      	ite	cc
 8005b9a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005b9e:	2100      	movcs	r1, #0
 8005ba0:	3015      	adds	r0, #21
 8005ba2:	fa04 f000 	lsl.w	r0, r4, r0
 8005ba6:	fa21 f10c 	lsr.w	r1, r1, ip
 8005baa:	ea40 0201 	orr.w	r2, r0, r1
 8005bae:	ec43 2b10 	vmov	d0, r2, r3
 8005bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bb4:	42b7      	cmp	r7, r6
 8005bb6:	bf3a      	itte	cc
 8005bb8:	f1a5 0608 	subcc.w	r6, r5, #8
 8005bbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005bc0:	2100      	movcs	r1, #0
 8005bc2:	380b      	subs	r0, #11
 8005bc4:	d015      	beq.n	8005bf2 <__b2d+0x8e>
 8005bc6:	4084      	lsls	r4, r0
 8005bc8:	f1c0 0520 	rsb	r5, r0, #32
 8005bcc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8005bd0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8005bd4:	42be      	cmp	r6, r7
 8005bd6:	fa21 fe05 	lsr.w	lr, r1, r5
 8005bda:	ea44 030e 	orr.w	r3, r4, lr
 8005bde:	bf8c      	ite	hi
 8005be0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005be4:	2400      	movls	r4, #0
 8005be6:	fa01 f000 	lsl.w	r0, r1, r0
 8005bea:	40ec      	lsrs	r4, r5
 8005bec:	ea40 0204 	orr.w	r2, r0, r4
 8005bf0:	e7dd      	b.n	8005bae <__b2d+0x4a>
 8005bf2:	ea44 030e 	orr.w	r3, r4, lr
 8005bf6:	460a      	mov	r2, r1
 8005bf8:	e7d9      	b.n	8005bae <__b2d+0x4a>
 8005bfa:	bf00      	nop
 8005bfc:	3ff00000 	.word	0x3ff00000

08005c00 <__d2b>:
 8005c00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c04:	460e      	mov	r6, r1
 8005c06:	2101      	movs	r1, #1
 8005c08:	ec59 8b10 	vmov	r8, r9, d0
 8005c0c:	4615      	mov	r5, r2
 8005c0e:	f7ff fcc0 	bl	8005592 <_Balloc>
 8005c12:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005c16:	4607      	mov	r7, r0
 8005c18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c1c:	bb34      	cbnz	r4, 8005c6c <__d2b+0x6c>
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	f1b8 0f00 	cmp.w	r8, #0
 8005c24:	d027      	beq.n	8005c76 <__d2b+0x76>
 8005c26:	a802      	add	r0, sp, #8
 8005c28:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005c2c:	f7ff fd94 	bl	8005758 <__lo0bits>
 8005c30:	9900      	ldr	r1, [sp, #0]
 8005c32:	b1f0      	cbz	r0, 8005c72 <__d2b+0x72>
 8005c34:	9a01      	ldr	r2, [sp, #4]
 8005c36:	f1c0 0320 	rsb	r3, r0, #32
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	430b      	orrs	r3, r1
 8005c40:	40c2      	lsrs	r2, r0
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	9201      	str	r2, [sp, #4]
 8005c46:	9b01      	ldr	r3, [sp, #4]
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	bf14      	ite	ne
 8005c4e:	2102      	movne	r1, #2
 8005c50:	2101      	moveq	r1, #1
 8005c52:	6139      	str	r1, [r7, #16]
 8005c54:	b1c4      	cbz	r4, 8005c88 <__d2b+0x88>
 8005c56:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005c5a:	4404      	add	r4, r0
 8005c5c:	6034      	str	r4, [r6, #0]
 8005c5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c62:	6028      	str	r0, [r5, #0]
 8005c64:	4638      	mov	r0, r7
 8005c66:	b003      	add	sp, #12
 8005c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c70:	e7d5      	b.n	8005c1e <__d2b+0x1e>
 8005c72:	6179      	str	r1, [r7, #20]
 8005c74:	e7e7      	b.n	8005c46 <__d2b+0x46>
 8005c76:	a801      	add	r0, sp, #4
 8005c78:	f7ff fd6e 	bl	8005758 <__lo0bits>
 8005c7c:	9b01      	ldr	r3, [sp, #4]
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	2101      	movs	r1, #1
 8005c82:	6139      	str	r1, [r7, #16]
 8005c84:	3020      	adds	r0, #32
 8005c86:	e7e5      	b.n	8005c54 <__d2b+0x54>
 8005c88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005c8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c90:	6030      	str	r0, [r6, #0]
 8005c92:	6918      	ldr	r0, [r3, #16]
 8005c94:	f7ff fd41 	bl	800571a <__hi0bits>
 8005c98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005c9c:	e7e1      	b.n	8005c62 <__d2b+0x62>

08005c9e <__ratio>:
 8005c9e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ca2:	4688      	mov	r8, r1
 8005ca4:	4669      	mov	r1, sp
 8005ca6:	4681      	mov	r9, r0
 8005ca8:	f7ff ff5c 	bl	8005b64 <__b2d>
 8005cac:	a901      	add	r1, sp, #4
 8005cae:	4640      	mov	r0, r8
 8005cb0:	ec55 4b10 	vmov	r4, r5, d0
 8005cb4:	f7ff ff56 	bl	8005b64 <__b2d>
 8005cb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005cbc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005cc0:	1a9a      	subs	r2, r3, r2
 8005cc2:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8005cc6:	1acb      	subs	r3, r1, r3
 8005cc8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8005ccc:	ec57 6b10 	vmov	r6, r7, d0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bfd6      	itet	le
 8005cd4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005cd8:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8005cdc:	eb07 5703 	addle.w	r7, r7, r3, lsl #20
 8005ce0:	4632      	mov	r2, r6
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	f7fa fdac 	bl	8000844 <__aeabi_ddiv>
 8005cec:	ec41 0b10 	vmov	d0, r0, r1
 8005cf0:	b003      	add	sp, #12
 8005cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005cf6 <__copybits>:
 8005cf6:	3901      	subs	r1, #1
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	1149      	asrs	r1, r1, #5
 8005cfc:	6914      	ldr	r4, [r2, #16]
 8005cfe:	3101      	adds	r1, #1
 8005d00:	f102 0314 	add.w	r3, r2, #20
 8005d04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005d0c:	42a3      	cmp	r3, r4
 8005d0e:	4602      	mov	r2, r0
 8005d10:	d303      	bcc.n	8005d1a <__copybits+0x24>
 8005d12:	2300      	movs	r3, #0
 8005d14:	428a      	cmp	r2, r1
 8005d16:	d305      	bcc.n	8005d24 <__copybits+0x2e>
 8005d18:	bd10      	pop	{r4, pc}
 8005d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1e:	f840 2b04 	str.w	r2, [r0], #4
 8005d22:	e7f3      	b.n	8005d0c <__copybits+0x16>
 8005d24:	f842 3b04 	str.w	r3, [r2], #4
 8005d28:	e7f4      	b.n	8005d14 <__copybits+0x1e>

08005d2a <__any_on>:
 8005d2a:	f100 0214 	add.w	r2, r0, #20
 8005d2e:	6900      	ldr	r0, [r0, #16]
 8005d30:	114b      	asrs	r3, r1, #5
 8005d32:	4298      	cmp	r0, r3
 8005d34:	b510      	push	{r4, lr}
 8005d36:	db11      	blt.n	8005d5c <__any_on+0x32>
 8005d38:	dd0a      	ble.n	8005d50 <__any_on+0x26>
 8005d3a:	f011 011f 	ands.w	r1, r1, #31
 8005d3e:	d007      	beq.n	8005d50 <__any_on+0x26>
 8005d40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005d44:	fa24 f001 	lsr.w	r0, r4, r1
 8005d48:	fa00 f101 	lsl.w	r1, r0, r1
 8005d4c:	428c      	cmp	r4, r1
 8005d4e:	d10b      	bne.n	8005d68 <__any_on+0x3e>
 8005d50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d803      	bhi.n	8005d60 <__any_on+0x36>
 8005d58:	2000      	movs	r0, #0
 8005d5a:	bd10      	pop	{r4, pc}
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	e7f7      	b.n	8005d50 <__any_on+0x26>
 8005d60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005d64:	2900      	cmp	r1, #0
 8005d66:	d0f5      	beq.n	8005d54 <__any_on+0x2a>
 8005d68:	2001      	movs	r0, #1
 8005d6a:	bd10      	pop	{r4, pc}

08005d6c <_calloc_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	fb02 f401 	mul.w	r4, r2, r1
 8005d72:	4621      	mov	r1, r4
 8005d74:	f7fe f94a 	bl	800400c <_malloc_r>
 8005d78:	4605      	mov	r5, r0
 8005d7a:	b118      	cbz	r0, 8005d84 <_calloc_r+0x18>
 8005d7c:	4622      	mov	r2, r4
 8005d7e:	2100      	movs	r1, #0
 8005d80:	f000 fb27 	bl	80063d2 <memset>
 8005d84:	4628      	mov	r0, r5
 8005d86:	bd38      	pop	{r3, r4, r5, pc}

08005d88 <__ssputs_r>:
 8005d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	688e      	ldr	r6, [r1, #8]
 8005d8e:	429e      	cmp	r6, r3
 8005d90:	4682      	mov	sl, r0
 8005d92:	460c      	mov	r4, r1
 8005d94:	4691      	mov	r9, r2
 8005d96:	4698      	mov	r8, r3
 8005d98:	d835      	bhi.n	8005e06 <__ssputs_r+0x7e>
 8005d9a:	898a      	ldrh	r2, [r1, #12]
 8005d9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005da0:	d031      	beq.n	8005e06 <__ssputs_r+0x7e>
 8005da2:	6825      	ldr	r5, [r4, #0]
 8005da4:	6909      	ldr	r1, [r1, #16]
 8005da6:	1a6f      	subs	r7, r5, r1
 8005da8:	6965      	ldr	r5, [r4, #20]
 8005daa:	2302      	movs	r3, #2
 8005dac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005db0:	fb95 f5f3 	sdiv	r5, r5, r3
 8005db4:	f108 0301 	add.w	r3, r8, #1
 8005db8:	443b      	add	r3, r7
 8005dba:	429d      	cmp	r5, r3
 8005dbc:	bf38      	it	cc
 8005dbe:	461d      	movcc	r5, r3
 8005dc0:	0553      	lsls	r3, r2, #21
 8005dc2:	d531      	bpl.n	8005e28 <__ssputs_r+0xa0>
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	f7fe f921 	bl	800400c <_malloc_r>
 8005dca:	4606      	mov	r6, r0
 8005dcc:	b950      	cbnz	r0, 8005de4 <__ssputs_r+0x5c>
 8005dce:	230c      	movs	r3, #12
 8005dd0:	f8ca 3000 	str.w	r3, [sl]
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dda:	81a3      	strh	r3, [r4, #12]
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de4:	463a      	mov	r2, r7
 8005de6:	6921      	ldr	r1, [r4, #16]
 8005de8:	f7ff fbc6 	bl	8005578 <memcpy>
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df6:	81a3      	strh	r3, [r4, #12]
 8005df8:	6126      	str	r6, [r4, #16]
 8005dfa:	6165      	str	r5, [r4, #20]
 8005dfc:	443e      	add	r6, r7
 8005dfe:	1bed      	subs	r5, r5, r7
 8005e00:	6026      	str	r6, [r4, #0]
 8005e02:	60a5      	str	r5, [r4, #8]
 8005e04:	4646      	mov	r6, r8
 8005e06:	4546      	cmp	r6, r8
 8005e08:	bf28      	it	cs
 8005e0a:	4646      	movcs	r6, r8
 8005e0c:	4632      	mov	r2, r6
 8005e0e:	4649      	mov	r1, r9
 8005e10:	6820      	ldr	r0, [r4, #0]
 8005e12:	f000 fac4 	bl	800639e <memmove>
 8005e16:	68a3      	ldr	r3, [r4, #8]
 8005e18:	1b9b      	subs	r3, r3, r6
 8005e1a:	60a3      	str	r3, [r4, #8]
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	441e      	add	r6, r3
 8005e20:	6026      	str	r6, [r4, #0]
 8005e22:	2000      	movs	r0, #0
 8005e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e28:	462a      	mov	r2, r5
 8005e2a:	f000 fada 	bl	80063e2 <_realloc_r>
 8005e2e:	4606      	mov	r6, r0
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d1e1      	bne.n	8005df8 <__ssputs_r+0x70>
 8005e34:	6921      	ldr	r1, [r4, #16]
 8005e36:	4650      	mov	r0, sl
 8005e38:	f7fe f89a 	bl	8003f70 <_free_r>
 8005e3c:	e7c7      	b.n	8005dce <__ssputs_r+0x46>
	...

08005e40 <_svfiprintf_r>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	b09d      	sub	sp, #116	; 0x74
 8005e46:	4680      	mov	r8, r0
 8005e48:	9303      	str	r3, [sp, #12]
 8005e4a:	898b      	ldrh	r3, [r1, #12]
 8005e4c:	061c      	lsls	r4, r3, #24
 8005e4e:	460d      	mov	r5, r1
 8005e50:	4616      	mov	r6, r2
 8005e52:	d50f      	bpl.n	8005e74 <_svfiprintf_r+0x34>
 8005e54:	690b      	ldr	r3, [r1, #16]
 8005e56:	b96b      	cbnz	r3, 8005e74 <_svfiprintf_r+0x34>
 8005e58:	2140      	movs	r1, #64	; 0x40
 8005e5a:	f7fe f8d7 	bl	800400c <_malloc_r>
 8005e5e:	6028      	str	r0, [r5, #0]
 8005e60:	6128      	str	r0, [r5, #16]
 8005e62:	b928      	cbnz	r0, 8005e70 <_svfiprintf_r+0x30>
 8005e64:	230c      	movs	r3, #12
 8005e66:	f8c8 3000 	str.w	r3, [r8]
 8005e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6e:	e0c5      	b.n	8005ffc <_svfiprintf_r+0x1bc>
 8005e70:	2340      	movs	r3, #64	; 0x40
 8005e72:	616b      	str	r3, [r5, #20]
 8005e74:	2300      	movs	r3, #0
 8005e76:	9309      	str	r3, [sp, #36]	; 0x24
 8005e78:	2320      	movs	r3, #32
 8005e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e7e:	2330      	movs	r3, #48	; 0x30
 8005e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e84:	f04f 0b01 	mov.w	fp, #1
 8005e88:	4637      	mov	r7, r6
 8005e8a:	463c      	mov	r4, r7
 8005e8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d13c      	bne.n	8005f0e <_svfiprintf_r+0xce>
 8005e94:	ebb7 0a06 	subs.w	sl, r7, r6
 8005e98:	d00b      	beq.n	8005eb2 <_svfiprintf_r+0x72>
 8005e9a:	4653      	mov	r3, sl
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	f7ff ff71 	bl	8005d88 <__ssputs_r>
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	f000 80a3 	beq.w	8005ff2 <_svfiprintf_r+0x1b2>
 8005eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eae:	4453      	add	r3, sl
 8005eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb2:	783b      	ldrb	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 809c 	beq.w	8005ff2 <_svfiprintf_r+0x1b2>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec0:	9304      	str	r3, [sp, #16]
 8005ec2:	9307      	str	r3, [sp, #28]
 8005ec4:	9205      	str	r2, [sp, #20]
 8005ec6:	9306      	str	r3, [sp, #24]
 8005ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8005ece:	2205      	movs	r2, #5
 8005ed0:	7821      	ldrb	r1, [r4, #0]
 8005ed2:	4850      	ldr	r0, [pc, #320]	; (8006014 <_svfiprintf_r+0x1d4>)
 8005ed4:	f7fa f984 	bl	80001e0 <memchr>
 8005ed8:	1c67      	adds	r7, r4, #1
 8005eda:	9b04      	ldr	r3, [sp, #16]
 8005edc:	b9d8      	cbnz	r0, 8005f16 <_svfiprintf_r+0xd6>
 8005ede:	06d9      	lsls	r1, r3, #27
 8005ee0:	bf44      	itt	mi
 8005ee2:	2220      	movmi	r2, #32
 8005ee4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ee8:	071a      	lsls	r2, r3, #28
 8005eea:	bf44      	itt	mi
 8005eec:	222b      	movmi	r2, #43	; 0x2b
 8005eee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ef2:	7822      	ldrb	r2, [r4, #0]
 8005ef4:	2a2a      	cmp	r2, #42	; 0x2a
 8005ef6:	d016      	beq.n	8005f26 <_svfiprintf_r+0xe6>
 8005ef8:	9a07      	ldr	r2, [sp, #28]
 8005efa:	2100      	movs	r1, #0
 8005efc:	200a      	movs	r0, #10
 8005efe:	4627      	mov	r7, r4
 8005f00:	3401      	adds	r4, #1
 8005f02:	783b      	ldrb	r3, [r7, #0]
 8005f04:	3b30      	subs	r3, #48	; 0x30
 8005f06:	2b09      	cmp	r3, #9
 8005f08:	d951      	bls.n	8005fae <_svfiprintf_r+0x16e>
 8005f0a:	b1c9      	cbz	r1, 8005f40 <_svfiprintf_r+0x100>
 8005f0c:	e011      	b.n	8005f32 <_svfiprintf_r+0xf2>
 8005f0e:	2b25      	cmp	r3, #37	; 0x25
 8005f10:	d0c0      	beq.n	8005e94 <_svfiprintf_r+0x54>
 8005f12:	4627      	mov	r7, r4
 8005f14:	e7b9      	b.n	8005e8a <_svfiprintf_r+0x4a>
 8005f16:	4a3f      	ldr	r2, [pc, #252]	; (8006014 <_svfiprintf_r+0x1d4>)
 8005f18:	1a80      	subs	r0, r0, r2
 8005f1a:	fa0b f000 	lsl.w	r0, fp, r0
 8005f1e:	4318      	orrs	r0, r3
 8005f20:	9004      	str	r0, [sp, #16]
 8005f22:	463c      	mov	r4, r7
 8005f24:	e7d3      	b.n	8005ece <_svfiprintf_r+0x8e>
 8005f26:	9a03      	ldr	r2, [sp, #12]
 8005f28:	1d11      	adds	r1, r2, #4
 8005f2a:	6812      	ldr	r2, [r2, #0]
 8005f2c:	9103      	str	r1, [sp, #12]
 8005f2e:	2a00      	cmp	r2, #0
 8005f30:	db01      	blt.n	8005f36 <_svfiprintf_r+0xf6>
 8005f32:	9207      	str	r2, [sp, #28]
 8005f34:	e004      	b.n	8005f40 <_svfiprintf_r+0x100>
 8005f36:	4252      	negs	r2, r2
 8005f38:	f043 0302 	orr.w	r3, r3, #2
 8005f3c:	9207      	str	r2, [sp, #28]
 8005f3e:	9304      	str	r3, [sp, #16]
 8005f40:	783b      	ldrb	r3, [r7, #0]
 8005f42:	2b2e      	cmp	r3, #46	; 0x2e
 8005f44:	d10e      	bne.n	8005f64 <_svfiprintf_r+0x124>
 8005f46:	787b      	ldrb	r3, [r7, #1]
 8005f48:	2b2a      	cmp	r3, #42	; 0x2a
 8005f4a:	f107 0101 	add.w	r1, r7, #1
 8005f4e:	d132      	bne.n	8005fb6 <_svfiprintf_r+0x176>
 8005f50:	9b03      	ldr	r3, [sp, #12]
 8005f52:	1d1a      	adds	r2, r3, #4
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	9203      	str	r2, [sp, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bfb8      	it	lt
 8005f5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f60:	3702      	adds	r7, #2
 8005f62:	9305      	str	r3, [sp, #20]
 8005f64:	4c2c      	ldr	r4, [pc, #176]	; (8006018 <_svfiprintf_r+0x1d8>)
 8005f66:	7839      	ldrb	r1, [r7, #0]
 8005f68:	2203      	movs	r2, #3
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f7fa f938 	bl	80001e0 <memchr>
 8005f70:	b138      	cbz	r0, 8005f82 <_svfiprintf_r+0x142>
 8005f72:	2340      	movs	r3, #64	; 0x40
 8005f74:	1b00      	subs	r0, r0, r4
 8005f76:	fa03 f000 	lsl.w	r0, r3, r0
 8005f7a:	9b04      	ldr	r3, [sp, #16]
 8005f7c:	4303      	orrs	r3, r0
 8005f7e:	9304      	str	r3, [sp, #16]
 8005f80:	3701      	adds	r7, #1
 8005f82:	7839      	ldrb	r1, [r7, #0]
 8005f84:	4825      	ldr	r0, [pc, #148]	; (800601c <_svfiprintf_r+0x1dc>)
 8005f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f8a:	2206      	movs	r2, #6
 8005f8c:	1c7e      	adds	r6, r7, #1
 8005f8e:	f7fa f927 	bl	80001e0 <memchr>
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d035      	beq.n	8006002 <_svfiprintf_r+0x1c2>
 8005f96:	4b22      	ldr	r3, [pc, #136]	; (8006020 <_svfiprintf_r+0x1e0>)
 8005f98:	b9fb      	cbnz	r3, 8005fda <_svfiprintf_r+0x19a>
 8005f9a:	9b03      	ldr	r3, [sp, #12]
 8005f9c:	3307      	adds	r3, #7
 8005f9e:	f023 0307 	bic.w	r3, r3, #7
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	9303      	str	r3, [sp, #12]
 8005fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa8:	444b      	add	r3, r9
 8005faa:	9309      	str	r3, [sp, #36]	; 0x24
 8005fac:	e76c      	b.n	8005e88 <_svfiprintf_r+0x48>
 8005fae:	fb00 3202 	mla	r2, r0, r2, r3
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	e7a3      	b.n	8005efe <_svfiprintf_r+0xbe>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	9305      	str	r3, [sp, #20]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	240a      	movs	r4, #10
 8005fbe:	460f      	mov	r7, r1
 8005fc0:	3101      	adds	r1, #1
 8005fc2:	783a      	ldrb	r2, [r7, #0]
 8005fc4:	3a30      	subs	r2, #48	; 0x30
 8005fc6:	2a09      	cmp	r2, #9
 8005fc8:	d903      	bls.n	8005fd2 <_svfiprintf_r+0x192>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0ca      	beq.n	8005f64 <_svfiprintf_r+0x124>
 8005fce:	9005      	str	r0, [sp, #20]
 8005fd0:	e7c8      	b.n	8005f64 <_svfiprintf_r+0x124>
 8005fd2:	fb04 2000 	mla	r0, r4, r0, r2
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e7f1      	b.n	8005fbe <_svfiprintf_r+0x17e>
 8005fda:	ab03      	add	r3, sp, #12
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	462a      	mov	r2, r5
 8005fe0:	4b10      	ldr	r3, [pc, #64]	; (8006024 <_svfiprintf_r+0x1e4>)
 8005fe2:	a904      	add	r1, sp, #16
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	f3af 8000 	nop.w
 8005fea:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005fee:	4681      	mov	r9, r0
 8005ff0:	d1d9      	bne.n	8005fa6 <_svfiprintf_r+0x166>
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	065b      	lsls	r3, r3, #25
 8005ff6:	f53f af38 	bmi.w	8005e6a <_svfiprintf_r+0x2a>
 8005ffa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ffc:	b01d      	add	sp, #116	; 0x74
 8005ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006002:	ab03      	add	r3, sp, #12
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	462a      	mov	r2, r5
 8006008:	4b06      	ldr	r3, [pc, #24]	; (8006024 <_svfiprintf_r+0x1e4>)
 800600a:	a904      	add	r1, sp, #16
 800600c:	4640      	mov	r0, r8
 800600e:	f000 f881 	bl	8006114 <_printf_i>
 8006012:	e7ea      	b.n	8005fea <_svfiprintf_r+0x1aa>
 8006014:	0800671c 	.word	0x0800671c
 8006018:	08006722 	.word	0x08006722
 800601c:	08006726 	.word	0x08006726
 8006020:	00000000 	.word	0x00000000
 8006024:	08005d89 	.word	0x08005d89

08006028 <_printf_common>:
 8006028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800602c:	4691      	mov	r9, r2
 800602e:	461f      	mov	r7, r3
 8006030:	688a      	ldr	r2, [r1, #8]
 8006032:	690b      	ldr	r3, [r1, #16]
 8006034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006038:	4293      	cmp	r3, r2
 800603a:	bfb8      	it	lt
 800603c:	4613      	movlt	r3, r2
 800603e:	f8c9 3000 	str.w	r3, [r9]
 8006042:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006046:	4606      	mov	r6, r0
 8006048:	460c      	mov	r4, r1
 800604a:	b112      	cbz	r2, 8006052 <_printf_common+0x2a>
 800604c:	3301      	adds	r3, #1
 800604e:	f8c9 3000 	str.w	r3, [r9]
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	0699      	lsls	r1, r3, #26
 8006056:	bf42      	ittt	mi
 8006058:	f8d9 3000 	ldrmi.w	r3, [r9]
 800605c:	3302      	addmi	r3, #2
 800605e:	f8c9 3000 	strmi.w	r3, [r9]
 8006062:	6825      	ldr	r5, [r4, #0]
 8006064:	f015 0506 	ands.w	r5, r5, #6
 8006068:	d107      	bne.n	800607a <_printf_common+0x52>
 800606a:	f104 0a19 	add.w	sl, r4, #25
 800606e:	68e3      	ldr	r3, [r4, #12]
 8006070:	f8d9 2000 	ldr.w	r2, [r9]
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	429d      	cmp	r5, r3
 8006078:	db29      	blt.n	80060ce <_printf_common+0xa6>
 800607a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800607e:	6822      	ldr	r2, [r4, #0]
 8006080:	3300      	adds	r3, #0
 8006082:	bf18      	it	ne
 8006084:	2301      	movne	r3, #1
 8006086:	0692      	lsls	r2, r2, #26
 8006088:	d42e      	bmi.n	80060e8 <_printf_common+0xc0>
 800608a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800608e:	4639      	mov	r1, r7
 8006090:	4630      	mov	r0, r6
 8006092:	47c0      	blx	r8
 8006094:	3001      	adds	r0, #1
 8006096:	d021      	beq.n	80060dc <_printf_common+0xb4>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	68e5      	ldr	r5, [r4, #12]
 800609c:	f8d9 2000 	ldr.w	r2, [r9]
 80060a0:	f003 0306 	and.w	r3, r3, #6
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	bf08      	it	eq
 80060a8:	1aad      	subeq	r5, r5, r2
 80060aa:	68a3      	ldr	r3, [r4, #8]
 80060ac:	6922      	ldr	r2, [r4, #16]
 80060ae:	bf0c      	ite	eq
 80060b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060b4:	2500      	movne	r5, #0
 80060b6:	4293      	cmp	r3, r2
 80060b8:	bfc4      	itt	gt
 80060ba:	1a9b      	subgt	r3, r3, r2
 80060bc:	18ed      	addgt	r5, r5, r3
 80060be:	f04f 0900 	mov.w	r9, #0
 80060c2:	341a      	adds	r4, #26
 80060c4:	454d      	cmp	r5, r9
 80060c6:	d11b      	bne.n	8006100 <_printf_common+0xd8>
 80060c8:	2000      	movs	r0, #0
 80060ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ce:	2301      	movs	r3, #1
 80060d0:	4652      	mov	r2, sl
 80060d2:	4639      	mov	r1, r7
 80060d4:	4630      	mov	r0, r6
 80060d6:	47c0      	blx	r8
 80060d8:	3001      	adds	r0, #1
 80060da:	d103      	bne.n	80060e4 <_printf_common+0xbc>
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295
 80060e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e4:	3501      	adds	r5, #1
 80060e6:	e7c2      	b.n	800606e <_printf_common+0x46>
 80060e8:	18e1      	adds	r1, r4, r3
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	2030      	movs	r0, #48	; 0x30
 80060ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060f2:	4422      	add	r2, r4
 80060f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060fc:	3302      	adds	r3, #2
 80060fe:	e7c4      	b.n	800608a <_printf_common+0x62>
 8006100:	2301      	movs	r3, #1
 8006102:	4622      	mov	r2, r4
 8006104:	4639      	mov	r1, r7
 8006106:	4630      	mov	r0, r6
 8006108:	47c0      	blx	r8
 800610a:	3001      	adds	r0, #1
 800610c:	d0e6      	beq.n	80060dc <_printf_common+0xb4>
 800610e:	f109 0901 	add.w	r9, r9, #1
 8006112:	e7d7      	b.n	80060c4 <_printf_common+0x9c>

08006114 <_printf_i>:
 8006114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006118:	4617      	mov	r7, r2
 800611a:	7e0a      	ldrb	r2, [r1, #24]
 800611c:	b085      	sub	sp, #20
 800611e:	2a6e      	cmp	r2, #110	; 0x6e
 8006120:	4698      	mov	r8, r3
 8006122:	4606      	mov	r6, r0
 8006124:	460c      	mov	r4, r1
 8006126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006128:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800612c:	f000 80bc 	beq.w	80062a8 <_printf_i+0x194>
 8006130:	d81a      	bhi.n	8006168 <_printf_i+0x54>
 8006132:	2a63      	cmp	r2, #99	; 0x63
 8006134:	d02e      	beq.n	8006194 <_printf_i+0x80>
 8006136:	d80a      	bhi.n	800614e <_printf_i+0x3a>
 8006138:	2a00      	cmp	r2, #0
 800613a:	f000 80c8 	beq.w	80062ce <_printf_i+0x1ba>
 800613e:	2a58      	cmp	r2, #88	; 0x58
 8006140:	f000 808a 	beq.w	8006258 <_printf_i+0x144>
 8006144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006148:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800614c:	e02a      	b.n	80061a4 <_printf_i+0x90>
 800614e:	2a64      	cmp	r2, #100	; 0x64
 8006150:	d001      	beq.n	8006156 <_printf_i+0x42>
 8006152:	2a69      	cmp	r2, #105	; 0x69
 8006154:	d1f6      	bne.n	8006144 <_printf_i+0x30>
 8006156:	6821      	ldr	r1, [r4, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800615e:	d023      	beq.n	80061a8 <_printf_i+0x94>
 8006160:	1d11      	adds	r1, r2, #4
 8006162:	6019      	str	r1, [r3, #0]
 8006164:	6813      	ldr	r3, [r2, #0]
 8006166:	e027      	b.n	80061b8 <_printf_i+0xa4>
 8006168:	2a73      	cmp	r2, #115	; 0x73
 800616a:	f000 80b4 	beq.w	80062d6 <_printf_i+0x1c2>
 800616e:	d808      	bhi.n	8006182 <_printf_i+0x6e>
 8006170:	2a6f      	cmp	r2, #111	; 0x6f
 8006172:	d02a      	beq.n	80061ca <_printf_i+0xb6>
 8006174:	2a70      	cmp	r2, #112	; 0x70
 8006176:	d1e5      	bne.n	8006144 <_printf_i+0x30>
 8006178:	680a      	ldr	r2, [r1, #0]
 800617a:	f042 0220 	orr.w	r2, r2, #32
 800617e:	600a      	str	r2, [r1, #0]
 8006180:	e003      	b.n	800618a <_printf_i+0x76>
 8006182:	2a75      	cmp	r2, #117	; 0x75
 8006184:	d021      	beq.n	80061ca <_printf_i+0xb6>
 8006186:	2a78      	cmp	r2, #120	; 0x78
 8006188:	d1dc      	bne.n	8006144 <_printf_i+0x30>
 800618a:	2278      	movs	r2, #120	; 0x78
 800618c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006190:	496e      	ldr	r1, [pc, #440]	; (800634c <_printf_i+0x238>)
 8006192:	e064      	b.n	800625e <_printf_i+0x14a>
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800619a:	1d11      	adds	r1, r2, #4
 800619c:	6019      	str	r1, [r3, #0]
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0a3      	b.n	80062f0 <_printf_i+0x1dc>
 80061a8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80061ac:	f102 0104 	add.w	r1, r2, #4
 80061b0:	6019      	str	r1, [r3, #0]
 80061b2:	d0d7      	beq.n	8006164 <_printf_i+0x50>
 80061b4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	da03      	bge.n	80061c4 <_printf_i+0xb0>
 80061bc:	222d      	movs	r2, #45	; 0x2d
 80061be:	425b      	negs	r3, r3
 80061c0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80061c4:	4962      	ldr	r1, [pc, #392]	; (8006350 <_printf_i+0x23c>)
 80061c6:	220a      	movs	r2, #10
 80061c8:	e017      	b.n	80061fa <_printf_i+0xe6>
 80061ca:	6820      	ldr	r0, [r4, #0]
 80061cc:	6819      	ldr	r1, [r3, #0]
 80061ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 80061d2:	d003      	beq.n	80061dc <_printf_i+0xc8>
 80061d4:	1d08      	adds	r0, r1, #4
 80061d6:	6018      	str	r0, [r3, #0]
 80061d8:	680b      	ldr	r3, [r1, #0]
 80061da:	e006      	b.n	80061ea <_printf_i+0xd6>
 80061dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061e0:	f101 0004 	add.w	r0, r1, #4
 80061e4:	6018      	str	r0, [r3, #0]
 80061e6:	d0f7      	beq.n	80061d8 <_printf_i+0xc4>
 80061e8:	880b      	ldrh	r3, [r1, #0]
 80061ea:	4959      	ldr	r1, [pc, #356]	; (8006350 <_printf_i+0x23c>)
 80061ec:	2a6f      	cmp	r2, #111	; 0x6f
 80061ee:	bf14      	ite	ne
 80061f0:	220a      	movne	r2, #10
 80061f2:	2208      	moveq	r2, #8
 80061f4:	2000      	movs	r0, #0
 80061f6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80061fa:	6865      	ldr	r5, [r4, #4]
 80061fc:	60a5      	str	r5, [r4, #8]
 80061fe:	2d00      	cmp	r5, #0
 8006200:	f2c0 809c 	blt.w	800633c <_printf_i+0x228>
 8006204:	6820      	ldr	r0, [r4, #0]
 8006206:	f020 0004 	bic.w	r0, r0, #4
 800620a:	6020      	str	r0, [r4, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d13f      	bne.n	8006290 <_printf_i+0x17c>
 8006210:	2d00      	cmp	r5, #0
 8006212:	f040 8095 	bne.w	8006340 <_printf_i+0x22c>
 8006216:	4675      	mov	r5, lr
 8006218:	2a08      	cmp	r2, #8
 800621a:	d10b      	bne.n	8006234 <_printf_i+0x120>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	07da      	lsls	r2, r3, #31
 8006220:	d508      	bpl.n	8006234 <_printf_i+0x120>
 8006222:	6923      	ldr	r3, [r4, #16]
 8006224:	6862      	ldr	r2, [r4, #4]
 8006226:	429a      	cmp	r2, r3
 8006228:	bfde      	ittt	le
 800622a:	2330      	movle	r3, #48	; 0x30
 800622c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006230:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006234:	ebae 0305 	sub.w	r3, lr, r5
 8006238:	6123      	str	r3, [r4, #16]
 800623a:	f8cd 8000 	str.w	r8, [sp]
 800623e:	463b      	mov	r3, r7
 8006240:	aa03      	add	r2, sp, #12
 8006242:	4621      	mov	r1, r4
 8006244:	4630      	mov	r0, r6
 8006246:	f7ff feef 	bl	8006028 <_printf_common>
 800624a:	3001      	adds	r0, #1
 800624c:	d155      	bne.n	80062fa <_printf_i+0x1e6>
 800624e:	f04f 30ff 	mov.w	r0, #4294967295
 8006252:	b005      	add	sp, #20
 8006254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006258:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800625c:	493c      	ldr	r1, [pc, #240]	; (8006350 <_printf_i+0x23c>)
 800625e:	6822      	ldr	r2, [r4, #0]
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006266:	f100 0504 	add.w	r5, r0, #4
 800626a:	601d      	str	r5, [r3, #0]
 800626c:	d001      	beq.n	8006272 <_printf_i+0x15e>
 800626e:	6803      	ldr	r3, [r0, #0]
 8006270:	e002      	b.n	8006278 <_printf_i+0x164>
 8006272:	0655      	lsls	r5, r2, #25
 8006274:	d5fb      	bpl.n	800626e <_printf_i+0x15a>
 8006276:	8803      	ldrh	r3, [r0, #0]
 8006278:	07d0      	lsls	r0, r2, #31
 800627a:	bf44      	itt	mi
 800627c:	f042 0220 	orrmi.w	r2, r2, #32
 8006280:	6022      	strmi	r2, [r4, #0]
 8006282:	b91b      	cbnz	r3, 800628c <_printf_i+0x178>
 8006284:	6822      	ldr	r2, [r4, #0]
 8006286:	f022 0220 	bic.w	r2, r2, #32
 800628a:	6022      	str	r2, [r4, #0]
 800628c:	2210      	movs	r2, #16
 800628e:	e7b1      	b.n	80061f4 <_printf_i+0xe0>
 8006290:	4675      	mov	r5, lr
 8006292:	fbb3 f0f2 	udiv	r0, r3, r2
 8006296:	fb02 3310 	mls	r3, r2, r0, r3
 800629a:	5ccb      	ldrb	r3, [r1, r3]
 800629c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80062a0:	4603      	mov	r3, r0
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d1f5      	bne.n	8006292 <_printf_i+0x17e>
 80062a6:	e7b7      	b.n	8006218 <_printf_i+0x104>
 80062a8:	6808      	ldr	r0, [r1, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	6949      	ldr	r1, [r1, #20]
 80062ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80062b2:	d004      	beq.n	80062be <_printf_i+0x1aa>
 80062b4:	1d10      	adds	r0, r2, #4
 80062b6:	6018      	str	r0, [r3, #0]
 80062b8:	6813      	ldr	r3, [r2, #0]
 80062ba:	6019      	str	r1, [r3, #0]
 80062bc:	e007      	b.n	80062ce <_printf_i+0x1ba>
 80062be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062c2:	f102 0004 	add.w	r0, r2, #4
 80062c6:	6018      	str	r0, [r3, #0]
 80062c8:	6813      	ldr	r3, [r2, #0]
 80062ca:	d0f6      	beq.n	80062ba <_printf_i+0x1a6>
 80062cc:	8019      	strh	r1, [r3, #0]
 80062ce:	2300      	movs	r3, #0
 80062d0:	6123      	str	r3, [r4, #16]
 80062d2:	4675      	mov	r5, lr
 80062d4:	e7b1      	b.n	800623a <_printf_i+0x126>
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	1d11      	adds	r1, r2, #4
 80062da:	6019      	str	r1, [r3, #0]
 80062dc:	6815      	ldr	r5, [r2, #0]
 80062de:	6862      	ldr	r2, [r4, #4]
 80062e0:	2100      	movs	r1, #0
 80062e2:	4628      	mov	r0, r5
 80062e4:	f7f9 ff7c 	bl	80001e0 <memchr>
 80062e8:	b108      	cbz	r0, 80062ee <_printf_i+0x1da>
 80062ea:	1b40      	subs	r0, r0, r5
 80062ec:	6060      	str	r0, [r4, #4]
 80062ee:	6863      	ldr	r3, [r4, #4]
 80062f0:	6123      	str	r3, [r4, #16]
 80062f2:	2300      	movs	r3, #0
 80062f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f8:	e79f      	b.n	800623a <_printf_i+0x126>
 80062fa:	6923      	ldr	r3, [r4, #16]
 80062fc:	462a      	mov	r2, r5
 80062fe:	4639      	mov	r1, r7
 8006300:	4630      	mov	r0, r6
 8006302:	47c0      	blx	r8
 8006304:	3001      	adds	r0, #1
 8006306:	d0a2      	beq.n	800624e <_printf_i+0x13a>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	079b      	lsls	r3, r3, #30
 800630c:	d507      	bpl.n	800631e <_printf_i+0x20a>
 800630e:	2500      	movs	r5, #0
 8006310:	f104 0919 	add.w	r9, r4, #25
 8006314:	68e3      	ldr	r3, [r4, #12]
 8006316:	9a03      	ldr	r2, [sp, #12]
 8006318:	1a9b      	subs	r3, r3, r2
 800631a:	429d      	cmp	r5, r3
 800631c:	db05      	blt.n	800632a <_printf_i+0x216>
 800631e:	68e0      	ldr	r0, [r4, #12]
 8006320:	9b03      	ldr	r3, [sp, #12]
 8006322:	4298      	cmp	r0, r3
 8006324:	bfb8      	it	lt
 8006326:	4618      	movlt	r0, r3
 8006328:	e793      	b.n	8006252 <_printf_i+0x13e>
 800632a:	2301      	movs	r3, #1
 800632c:	464a      	mov	r2, r9
 800632e:	4639      	mov	r1, r7
 8006330:	4630      	mov	r0, r6
 8006332:	47c0      	blx	r8
 8006334:	3001      	adds	r0, #1
 8006336:	d08a      	beq.n	800624e <_printf_i+0x13a>
 8006338:	3501      	adds	r5, #1
 800633a:	e7eb      	b.n	8006314 <_printf_i+0x200>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1a7      	bne.n	8006290 <_printf_i+0x17c>
 8006340:	780b      	ldrb	r3, [r1, #0]
 8006342:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006346:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800634a:	e765      	b.n	8006218 <_printf_i+0x104>
 800634c:	0800673e 	.word	0x0800673e
 8006350:	0800672d 	.word	0x0800672d

08006354 <nanf>:
 8006354:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800635c <nanf+0x8>
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	7fc00000 	.word	0x7fc00000

08006360 <strncmp>:
 8006360:	b510      	push	{r4, lr}
 8006362:	b16a      	cbz	r2, 8006380 <strncmp+0x20>
 8006364:	3901      	subs	r1, #1
 8006366:	1884      	adds	r4, r0, r2
 8006368:	f810 3b01 	ldrb.w	r3, [r0], #1
 800636c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006370:	4293      	cmp	r3, r2
 8006372:	d103      	bne.n	800637c <strncmp+0x1c>
 8006374:	42a0      	cmp	r0, r4
 8006376:	d001      	beq.n	800637c <strncmp+0x1c>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f5      	bne.n	8006368 <strncmp+0x8>
 800637c:	1a98      	subs	r0, r3, r2
 800637e:	bd10      	pop	{r4, pc}
 8006380:	4610      	mov	r0, r2
 8006382:	bd10      	pop	{r4, pc}

08006384 <__ascii_wctomb>:
 8006384:	b149      	cbz	r1, 800639a <__ascii_wctomb+0x16>
 8006386:	2aff      	cmp	r2, #255	; 0xff
 8006388:	bf85      	ittet	hi
 800638a:	238a      	movhi	r3, #138	; 0x8a
 800638c:	6003      	strhi	r3, [r0, #0]
 800638e:	700a      	strbls	r2, [r1, #0]
 8006390:	f04f 30ff 	movhi.w	r0, #4294967295
 8006394:	bf98      	it	ls
 8006396:	2001      	movls	r0, #1
 8006398:	4770      	bx	lr
 800639a:	4608      	mov	r0, r1
 800639c:	4770      	bx	lr

0800639e <memmove>:
 800639e:	4288      	cmp	r0, r1
 80063a0:	b510      	push	{r4, lr}
 80063a2:	eb01 0302 	add.w	r3, r1, r2
 80063a6:	d803      	bhi.n	80063b0 <memmove+0x12>
 80063a8:	1e42      	subs	r2, r0, #1
 80063aa:	4299      	cmp	r1, r3
 80063ac:	d10c      	bne.n	80063c8 <memmove+0x2a>
 80063ae:	bd10      	pop	{r4, pc}
 80063b0:	4298      	cmp	r0, r3
 80063b2:	d2f9      	bcs.n	80063a8 <memmove+0xa>
 80063b4:	1881      	adds	r1, r0, r2
 80063b6:	1ad2      	subs	r2, r2, r3
 80063b8:	42d3      	cmn	r3, r2
 80063ba:	d100      	bne.n	80063be <memmove+0x20>
 80063bc:	bd10      	pop	{r4, pc}
 80063be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80063c6:	e7f7      	b.n	80063b8 <memmove+0x1a>
 80063c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80063d0:	e7eb      	b.n	80063aa <memmove+0xc>

080063d2 <memset>:
 80063d2:	4402      	add	r2, r0
 80063d4:	4603      	mov	r3, r0
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d100      	bne.n	80063dc <memset+0xa>
 80063da:	4770      	bx	lr
 80063dc:	f803 1b01 	strb.w	r1, [r3], #1
 80063e0:	e7f9      	b.n	80063d6 <memset+0x4>

080063e2 <_realloc_r>:
 80063e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e4:	4607      	mov	r7, r0
 80063e6:	4614      	mov	r4, r2
 80063e8:	460e      	mov	r6, r1
 80063ea:	b921      	cbnz	r1, 80063f6 <_realloc_r+0x14>
 80063ec:	4611      	mov	r1, r2
 80063ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063f2:	f7fd be0b 	b.w	800400c <_malloc_r>
 80063f6:	b922      	cbnz	r2, 8006402 <_realloc_r+0x20>
 80063f8:	f7fd fdba 	bl	8003f70 <_free_r>
 80063fc:	4625      	mov	r5, r4
 80063fe:	4628      	mov	r0, r5
 8006400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006402:	f000 f814 	bl	800642e <_malloc_usable_size_r>
 8006406:	4284      	cmp	r4, r0
 8006408:	d90f      	bls.n	800642a <_realloc_r+0x48>
 800640a:	4621      	mov	r1, r4
 800640c:	4638      	mov	r0, r7
 800640e:	f7fd fdfd 	bl	800400c <_malloc_r>
 8006412:	4605      	mov	r5, r0
 8006414:	2800      	cmp	r0, #0
 8006416:	d0f2      	beq.n	80063fe <_realloc_r+0x1c>
 8006418:	4631      	mov	r1, r6
 800641a:	4622      	mov	r2, r4
 800641c:	f7ff f8ac 	bl	8005578 <memcpy>
 8006420:	4631      	mov	r1, r6
 8006422:	4638      	mov	r0, r7
 8006424:	f7fd fda4 	bl	8003f70 <_free_r>
 8006428:	e7e9      	b.n	80063fe <_realloc_r+0x1c>
 800642a:	4635      	mov	r5, r6
 800642c:	e7e7      	b.n	80063fe <_realloc_r+0x1c>

0800642e <_malloc_usable_size_r>:
 800642e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006432:	2800      	cmp	r0, #0
 8006434:	f1a0 0004 	sub.w	r0, r0, #4
 8006438:	bfbc      	itt	lt
 800643a:	580b      	ldrlt	r3, [r1, r0]
 800643c:	18c0      	addlt	r0, r0, r3
 800643e:	4770      	bx	lr

08006440 <round>:
 8006440:	ec51 0b10 	vmov	r0, r1, d0
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800644a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800644e:	2c13      	cmp	r4, #19
 8006450:	460b      	mov	r3, r1
 8006452:	460f      	mov	r7, r1
 8006454:	dc17      	bgt.n	8006486 <round+0x46>
 8006456:	2c00      	cmp	r4, #0
 8006458:	da09      	bge.n	800646e <round+0x2e>
 800645a:	3401      	adds	r4, #1
 800645c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006460:	d103      	bne.n	800646a <round+0x2a>
 8006462:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006466:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800646a:	2100      	movs	r1, #0
 800646c:	e028      	b.n	80064c0 <round+0x80>
 800646e:	4a16      	ldr	r2, [pc, #88]	; (80064c8 <round+0x88>)
 8006470:	4122      	asrs	r2, r4
 8006472:	4211      	tst	r1, r2
 8006474:	d100      	bne.n	8006478 <round+0x38>
 8006476:	b180      	cbz	r0, 800649a <round+0x5a>
 8006478:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800647c:	4123      	asrs	r3, r4
 800647e:	443b      	add	r3, r7
 8006480:	ea23 0302 	bic.w	r3, r3, r2
 8006484:	e7f1      	b.n	800646a <round+0x2a>
 8006486:	2c33      	cmp	r4, #51	; 0x33
 8006488:	dd0a      	ble.n	80064a0 <round+0x60>
 800648a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800648e:	d104      	bne.n	800649a <round+0x5a>
 8006490:	ee10 2a10 	vmov	r2, s0
 8006494:	460b      	mov	r3, r1
 8006496:	f7f9 fef9 	bl	800028c <__adddf3>
 800649a:	ec41 0b10 	vmov	d0, r0, r1
 800649e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064a0:	f2a5 4213 	subw	r2, r5, #1043	; 0x413
 80064a4:	f04f 35ff 	mov.w	r5, #4294967295
 80064a8:	40d5      	lsrs	r5, r2
 80064aa:	4228      	tst	r0, r5
 80064ac:	d0f5      	beq.n	800649a <round+0x5a>
 80064ae:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80064b2:	2201      	movs	r2, #1
 80064b4:	40a2      	lsls	r2, r4
 80064b6:	1812      	adds	r2, r2, r0
 80064b8:	bf28      	it	cs
 80064ba:	3301      	addcs	r3, #1
 80064bc:	ea22 0105 	bic.w	r1, r2, r5
 80064c0:	4608      	mov	r0, r1
 80064c2:	4619      	mov	r1, r3
 80064c4:	e7e9      	b.n	800649a <round+0x5a>
 80064c6:	bf00      	nop
 80064c8:	000fffff 	.word	0x000fffff

080064cc <_sbrk>:
 80064cc:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <_sbrk+0x14>)
 80064ce:	6819      	ldr	r1, [r3, #0]
 80064d0:	4602      	mov	r2, r0
 80064d2:	b909      	cbnz	r1, 80064d8 <_sbrk+0xc>
 80064d4:	4903      	ldr	r1, [pc, #12]	; (80064e4 <_sbrk+0x18>)
 80064d6:	6019      	str	r1, [r3, #0]
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	4402      	add	r2, r0
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	4770      	bx	lr
 80064e0:	20000360 	.word	0x20000360
 80064e4:	20001c9c 	.word	0x20001c9c

080064e8 <_init>:
 80064e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ea:	bf00      	nop
 80064ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ee:	bc08      	pop	{r3}
 80064f0:	469e      	mov	lr, r3
 80064f2:	4770      	bx	lr

080064f4 <_fini>:
 80064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f6:	bf00      	nop
 80064f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fa:	bc08      	pop	{r3}
 80064fc:	469e      	mov	lr, r3
 80064fe:	4770      	bx	lr
